<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java之枚举类</title>
    <url>/post/b4562166.html</url>
    <content><![CDATA[<h1 id="Java之枚举类"><a href="#Java之枚举类" class="headerlink" title="Java之枚举类"></a>Java之枚举类</h1><h1 id="枚举类说明"><a href="#枚举类说明" class="headerlink" title="枚举类说明"></a>枚举类说明</h1><blockquote>
<p>类的对象只有有限个，确定的。我们称此类为枚举类</p>
</blockquote>
<ul>
<li><p>当需要定义<strong>一组常量</strong>时，强烈建议使用枚举类</p>
</li>
<li><p>枚举类的实现：</p>
<ul>
<li><p><code>JDK 5.0</code>以前需要自定义</p>
</li>
<li><p><code>JDK 5.0</code>后新增<code>enum</code>关键字用于定义枚举类</p>
</li>
</ul>
</li>
<li><p>如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</p>
</li>
<li><p>枚举类的属性：</p>
<ul>
<li>枚举类对象的属性不应允许被改动，所以应该使用 <code>private final</code>修饰 </li>
<li>枚举类的使用 <code>private final</code>修饰的属性应该在构造器中为其赋值 </li>
<li>若枚举类显式的定义了带参数的构造器，则在列出枚举值时也必须对应的传入参数</li>
</ul>
</li>
</ul>
<h1 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h1><p><strong>步骤</strong></p>
<ol>
<li>私有化构造器，保证不能在类的外部创建其对象；</li>
<li>在类的内部创建枚举类的示例。声明为：<code>public static final；</code></li>
<li>对象如果有实例变量，应该声明为<code>private final</code>，并在构造器中初始化；</li>
</ol>
<p><strong>代码示例:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.其他诉求1：提供toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="enum定义枚举类"><a href="#enum定义枚举类" class="headerlink" title="enum定义枚举类"></a>enum定义枚举类</h1><p><strong>使用说明</strong></p>
<ul>
<li>使用<code>enum</code>定义的枚举类默认继承了 <code>java.lang.Enum</code> 类，因此不能再继承其他类</li>
<li>枚举类的构造器只能使用<code>private</code>权限修饰符</li>
<li>枚举类的所有实例必须在枚举类中显式列出(<code>,</code> 分隔 <code>;</code> 结尾)。</li>
<li>列出的实例系统会自动添加<code>public static final</code> 修饰</li>
<li>必须在枚举类的第一行声明枚举类对象</li>
</ul>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span> &#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season1</span><span class="params">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="enum常用方法"><a href="#enum常用方法" class="headerlink" title="enum常用方法"></a>enum常用方法</h2><ol>
<li><p><code>values()</code>方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</p>
</li>
<li><p><code>valueOf(String str)</code>：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”.如不是，会有运行时异常<code> IllegalArgumentException</code></p>
</li>
<li><p><code>toString()</code>：返回当前枚举类对象常量的名称</p>
</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Season1</span> <span class="variable">summer</span> <span class="operator">=</span> Season1.SUMMER;</span><br><span class="line"><span class="comment">//toString():返回枚举类对象的名称</span></span><br><span class="line">System.out.println(summer.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Season1.class.getSuperclass());</span></span><br><span class="line">System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line"><span class="comment">//values():返回所的枚举类对象构成的数组</span></span><br><span class="line">Season1[] values = Season1.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">    System.out.println(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">Thread.State[] values1 = Thread.State.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values1.length; i++) &#123;</span><br><span class="line">    System.out.println(values1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line"><span class="type">Season1</span> <span class="variable">winter</span> <span class="operator">=</span> Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line"><span class="comment">//如果没objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"><span class="comment">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span></span><br><span class="line">System.out.println(winter);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="enum实现接口"><a href="#enum实现接口" class="headerlink" title="enum实现接口"></a>enum实现接口</h2><p><strong>使用说明：</strong></p>
<ol>
<li>和普通Java类一样，枚举类可以实现一个或多个接口</li>
<li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li>
<li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/post/b4562165.html</url>
    <content><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><hr>
<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol>
<li><p>什么是变量 就是内存中的一个存储空间，相当于一个代词 </p>
</li>
<li><p>变量的作用 让代码变得简洁，复用性好。 </p>
</li>
<li><p>如何使用变量</p>
<ul>
<li><p>1.变量的声明（创建） </p>
</li>
<li><p>2.变量的初始化</p>
</li>
</ul>
</li>
<li><p>使用变量的注意事项</p>
<ul>
<li><p>1.命名规范 </p>
</li>
<li><p>2.规定 不能以数字开头、 不能用java关键字、 同一范围内变量名不能重复、 没有声明的变量不能使用、 需要往变量里面存的数据类型，必须和变量的类型保持一致</p>
</li>
</ul>
</li>
<li><p>java数据类型</p>
<ul>
<li>分类：基本数据类型<ul>
<li>1.整数类型 <code>byte</code> <code>short</code> <code>int</code>  <code>long </code></li>
<li>2.小数类型 <code>float</code>  <code>double</code></li>
<li>3.字符类型 <code>char </code></li>
<li>4.布尔类型 <code>boolean</code> 默认值是<code>false</code> 引用数据类型</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>变量 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 如何使用变量</span></span><br><span class="line">        <span class="comment">//   1.变量的声明（创建）:就是在内存中开辟一个整型空间，名字叫a</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//   2.变量的初始化：就是往变量里面存一个值</span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>java中的运算符（运算符：运算一定会有结果） <ul>
<li>1.算术运算符   + - * &#x2F; %(取模) ++（自增） –（自减） </li>
<li>2.赋值运算符   &#x3D; +&#x3D;…. </li>
<li>3.关系运算符   &lt; &gt; !&#x3D; </li>
<li>4.逻辑运算符   &amp;&#x2F;&amp;&amp;     |&#x2F;||     ! </li>
<li>5.连接运算符   + java中的多态(事物存在的多种形态 水：水蒸气 冰)….. </li>
<li>6.三目运算符   (关系运算符)? 表达式1 : 表达式2</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span>运算符 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 三目运算符</span></span><br><span class="line"><span class="comment">         * (关系运算表达式)? 表达式1 : 表达式2</span></span><br><span class="line"><span class="comment">         *  执行流程：</span></span><br><span class="line"><span class="comment">         *      1.计算关系运算表达式的结果（boolean类型）</span></span><br><span class="line"><span class="comment">         *      2.若关系运算表达式的结果为true,</span></span><br><span class="line"><span class="comment">         *          则整个三目运算表达式的结果是表达式1</span></span><br><span class="line"><span class="comment">         *      3.若关系运算表达式的结果为false,</span></span><br><span class="line"><span class="comment">         *          则整个三目运算表达式的结果是表达式2</span></span><br><span class="line"><span class="comment">         * 思考：</span></span><br><span class="line"><span class="comment">         *  和if语句有什么区别？</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">100</span>, b1=<span class="number">200</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> a1&gt;b1?<span class="string">&quot;正确&quot;</span>:<span class="string">&quot;错误&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;result===&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a1&gt;b1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正确&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 连接运算符 +</span></span><br><span class="line"><span class="comment">         *  当+号左右两边，有一边是字符串的时候（双引号括起来的东西就是字符串）</span></span><br><span class="line"><span class="comment">         *  那么这个+号 就有两个功能：</span></span><br><span class="line"><span class="comment">         *      1.进行字符串拼接</span></span><br><span class="line"><span class="comment">         *      2.进行类型转换，将其他数据类型转换成String类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a=&quot;</span>+a;</span><br><span class="line">        <span class="comment">//&quot;a=100&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//     &quot;100&quot; + 200</span></span><br><span class="line">        str = <span class="string">&quot;&quot;</span> + <span class="number">100</span> + <span class="number">200</span>;</span><br><span class="line">        <span class="comment">//&quot;100200&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//  300 + &quot;&quot;</span></span><br><span class="line">        str = <span class="number">100</span> + <span class="number">200</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//&quot;300&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="comment">//&quot;1156&quot;</span></span><br><span class="line">        System.out.println(<span class="number">5</span> + <span class="number">6</span> + <span class="string">&quot;&quot;</span> + <span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>循环结构： <ul>
<li>1.定义：在java编程里面，需要反复执行某段代码的时候，就要用循环 </li>
<li>2.为什么要有循环结构:简化代码 </li>
<li>3.java中循环的分类 while、dowhile、for循环 </li>
<li>4.循环三要素(每次，你要写循环的时候，回想循环三要素) <ul>
<li>1.循环的初始值 就是循环从什么时候开始 </li>
<li>2.循环条件 满足什么条件才开始循环</li>
<li>3.循环体 就是需要反复执行的那段代码</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>循环结构 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * for(初始化语句;循环条件;控制循环条件语句)&#123;</span></span><br><span class="line"><span class="comment">         *     循环体</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * 执行流程：</span></span><br><span class="line"><span class="comment">         *  1.执行初始化语句</span></span><br><span class="line"><span class="comment">         *  2.判断循环条件（关系运算表达式）boolean类型</span></span><br><span class="line"><span class="comment">         *  3.若循环条件结果为true,执行循环体</span></span><br><span class="line"><span class="comment">         *  4.再执行控制循环条件语句</span></span><br><span class="line"><span class="comment">         *  5.再回到第2步，依次往复执行，直到循环条件结果为false，for循环结束，程序继续向下执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span> ;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;行动是成功的阶梯，动的越多，登的越高....&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以下输出结果是什么？</span></span><br><span class="line"><span class="comment">         *  1.语法错误</span></span><br><span class="line"><span class="comment">         *  2.....</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(System.out.println(<span class="string">&quot;A&quot;</span>);i&lt;<span class="number">5</span>; System.out.println(<span class="string">&quot;B&quot;</span>) )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>嵌套循环 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嵌套循环：</span></span><br><span class="line"><span class="comment">     *    就是循环中还有循环,循环的循环体还是循环</span></span><br><span class="line"><span class="comment">     *  1*1=1</span></span><br><span class="line"><span class="comment">     *  1*2=1 2*2=4</span></span><br><span class="line"><span class="comment">     *  1*3=3 2*3=6 3*3=9</span></span><br><span class="line"><span class="comment">     *  ...........</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  *=</span></span><br><span class="line"><span class="comment">     *  *= *=</span></span><br><span class="line"><span class="comment">     *  ***</span></span><br><span class="line"><span class="comment">     *  ****</span></span><br><span class="line"><span class="comment">     *  *****</span></span><br><span class="line"><span class="comment">     *  诀窍：</span></span><br><span class="line"><span class="comment">     *      1.分清楚什么是行，什么列</span></span><br><span class="line"><span class="comment">     *      2.外层循环，控制行数，内层循环控制列数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//外层循环  控制行数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//内层循环  控制列数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    <span class="comment">//内层循环控制列数所以打印星星的代码要写在内层循环</span></span><br><span class="line">                    <span class="comment">//\t表示制表符  相当于一个tab键   4个空格</span></span><br><span class="line">                    System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();<span class="comment">//空的输出语句作用：就是换行</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/../pic/1.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>冒泡排序 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序：</span></span><br><span class="line"><span class="comment">     *      1.相邻的两个元素比较，左边比右边的大就互换位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//整型数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//外层循环控制行数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//内层循环控制列数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">//编写对比替换逻辑</span></span><br><span class="line">                <span class="comment">//如果左边的元素比右边的元素大</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//就互换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="comment">//打印数组的API</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>方法 </p>
<ul>
<li><p>1.什么是方法 还有一种叫法：功能，函数一个意思，其实就是完成特定功能的代码块 举例：手机是一个工具，这个工具有很多功能，打电话，发短信，上网，照相。。。 为什么手机可以打电话，是因为里面有一系列的流程，其实就是一些代码，能够让我们的硬件去工作 </p>
</li>
<li><p>2.方法的作用 </p>
<ul>
<li>1.提高代码的复用性 </li>
<li>2.可以封装自己的逻辑，也可以调用其他人写的逻辑 比如<code>System.out.println()</code> 就是在调用其他人写的方法</li>
</ul>
</li>
<li><p>3.方法的格式 修饰符 返回值类型 方法名(参数类型 参数,参数类型 参数,参数类型 参数….){ 方法体语句；（完成特定功能的代码块） return 返回值; } </p>
</li>
<li><p>1.修饰符：<code>public static</code> (目前是固定的，后面还可以省略static以及private其他写法，边学边讲) </p>
</li>
<li><p>2.返回值类型:任何一个方法都可以有返回值，既然是返回值，就一定会有返回值的类型，如果没有返回值，就写void </p>
</li>
<li><p>3.参数类型：参数的数据类型 </p>
</li>
<li><p>4.参数： </p>
<ul>
<li>1.实际参数（实参） 实际参与运算的 </li>
<li>2.形式参数（形参） 写在方法上小括号里面的，用于接收实参用的</li>
</ul>
</li>
<li><p>5.方法体语句:特定功能的代码块 </p>
</li>
<li><p>6.<code>return </code>结束方法 </p>
</li>
<li><p>7.返回值 就是你这个方法（功能）经过一系列运算后得到的结果，由return带给调用者 </p>
</li>
<li><p>4.方法的种类 </p>
<ul>
<li>1.无参无返回值</li>
<li>2.有参无返回值 </li>
<li>3.无参有返回值 </li>
<li>4.有参有返回值</li>
</ul>
</li>
<li><p>5.使用方法的注意事项 </p>
<ul>
<li>1.方法不调用是不执行</li>
<li>2.方法和方法在创建是平级关系 </li>
<li>3.方法定义时，小括号里面的参数，用逗号隔开 </li>
<li>4.方法调用时，有参数必须传递参数，但是不用传递参数的类型 </li>
<li>5.如果方法体经过一系列运算后，有返回值，一定要写<code>return</code>，将返回值带给调用者</li>
</ul>
</li>
</ul>
</li>
<li><p>需求： 求2个整数的和？？？ 思考：如何写一个方法来完成我们的需求？？？ </p>
<ul>
<li>1.明确返回值类型（考虑这个方法有没有返回值） </li>
<li>2.明确参数列表（考虑这个方法有几个需要参与运算的数）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>方法 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>,b = <span class="number">20</span>;</span><br><span class="line">            <span class="comment">//a是实际参数，因为代码走到这里，a里面已经有值了</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> sum(a,b);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   需求：1.编写一个属于自己的冒泡排序方法？？？</span></span><br><span class="line"><span class="comment">   思考：如何写一个方法来完成我们的需求？？？</span></span><br><span class="line"><span class="comment">            *      1.明确返回值类型（考虑这个方法有没有返回值）</span></span><br><span class="line"><span class="comment">            *      2.明确参数列表（考虑这个方法有几个需要参与运算的数）*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="comment">//写排序的逻辑</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//内层循环控制列数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">//编写对比替换逻辑</span></span><br><span class="line">                <span class="comment">//如果左边的元素比右边的元素大</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//就互换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="comment">//a是形参，因为a里面的值是不确定</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul>
<li>方法重载（<code>overload</code>）:方法名相同，参数列表不同，与返回值类型无关 <ul>
<li>注意：参数的顺序不同也算重载，但是实际生产这么写没有意义 什么时候用重载，就是你如果有一套逻辑是相同，但是参数不同，然后你又懒得起一个新的名字，就用重载</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span>方法重载 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 求2个数的和</span></span><br><span class="line"><span class="comment">         * 求3个数的和</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li><p>面向过程：c语言 </p>
<ul>
<li>强调的是过程：也就是第一步做什么，第二步做什么。。。</li>
</ul>
</li>
<li><p>面向对象：java python 强调的是结果（对象（对象里面第一步，第二步）） </p>
<ul>
<li><p>特点： </p>
<ul>
<li>1.可以将复杂的事情，简单化。 </li>
<li>2.让我们从执行者，变成了指挥者（角色发生了转变）</li>
</ul>
</li>
<li><p>特征： </p>
<ul>
<li>1.<code>封装(encapsulation) </code></li>
<li>2.<code>继承(inheritance) </code></li>
<li>3.<code>多态(polymorphism) </code></li>
</ul>
</li>
</ul>
</li>
<li><p>类和对象 </p>
<ul>
<li><p>1.思考1：我们学习编程目的是什么？</p>
<ul>
<li>就是为了把日常生活中的事物，用编程语言描述出来，并解决一些问题。</li>
</ul>
</li>
<li><p>2.思考2：我们是如何描述现实世界中的事物的？</p>
<ul>
<li>属性：该事物的描述信息（举例：手机：尺寸，颜色，品牌，价格） </li>
<li>行为：该事物能做什么（举例：手机：打电话，发短信，上网）</li>
</ul>
</li>
<li><p>3.思考3：java中如何描述一个类？</p>
<ul>
<li>成员变量：（事物的属性）写在类中，方法外的 </li>
<li>成员方法：（事物的行为）写在类中，去掉<code>static</code>(static表示静态以后再说) 所以说一个类最基本的一般是由成员变量和成员方法组成的。</li>
</ul>
</li>
<li><p>4.java如何定义一个类 </p>
<ul>
<li>其实就是在一个class中，定义成员变量和成员方法</li>
</ul>
</li>
<li><p>5.类和对象之间的关系？ </p>
<ul>
<li>类：抽象出一些事物的共有属性和行为</li>
<li>对象：对该类的具体描述 </li>
<li>举例： <ul>
<li>类：学生 </li>
<li>对象：具体的某一个学生就是对象 </li>
<li>类：王者荣耀的坦克 </li>
<li>对象：猪八戒就是对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span>面向对象 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个学生对象</span></span><br><span class="line"><span class="comment">         *   类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">         * 如何使用里面的成员变量，成员方法</span></span><br><span class="line"><span class="comment">         * 对象名.变量名</span></span><br><span class="line"><span class="comment">         * 对象名.方法名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.name = <span class="string">&quot;Andy&quot;</span>;</span><br><span class="line">        System.out.println(stu.name);</span><br><span class="line">        stu.study();</span><br><span class="line">        <span class="comment">//以上就是创建了学生对象，并使用它来帮助我们存储数据，以及输出功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个手机类，要有属性和行为。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个.java源文件中，可以有多个class，但是public修饰的只能有一个</span></span><br><span class="line"><span class="comment"> *学生类  封装...  方法的封装，还有类的封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  成员变量</span></span><br><span class="line"><span class="comment">     *  姓名，年龄，性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法</span></span><br><span class="line"><span class="comment">     * 学习、睡觉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li><p>封装： </p>
<ul>
<li>1.概述 隐藏对象的属性和行为（实现逻辑的细节）,仅仅只提供对外公共访问的方式。Arrays.sort(); </li>
<li>2.好处 <ul>
<li>1.复用，提高代码的简洁性 </li>
<li>2.作出了属性和行为逻辑的隐藏，只提供对外的公共访问方式。 </li>
<li>3.提高安全性</li>
</ul>
</li>
</ul>
</li>
<li><p>3.封装的原则 将不需要对外提供的内容都隐藏起来 把属性隐藏，提供公共方法对外开放访问操作权限</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>封装 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出100句helloWorld</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出100句helloWorld</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><ul>
<li>private:私有 public公共 <ul>
<li>1.是一个权限修饰符 </li>
<li>2.可以修饰成员变量，成员方法 </li>
<li>3.被其修饰的成员只能在本类中访问 </li>
<li>4.一般private修饰的成员变量搭配setget方法去用 </li>
<li>5.private是封装的一种体现形式，不能说封装就是私</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02private</span>关键字 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">       <span class="comment">// hero.name = &quot;鸡你太美&quot;;</span></span><br><span class="line">        hero.setName(<span class="string">&quot;鸡你太美&quot;</span>);</span><br><span class="line">        System.out.println(hero.getName());</span><br><span class="line">        <span class="comment">//reflect 反射  暴力反射，就是可以直接获取到private修饰的成员  spring框架就是通过反射实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 英雄类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被其修饰的成员只能在本类中访问,</span></span><br><span class="line"><span class="comment">     * 提供set get 方法对外提供访问权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;鸡你太美&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="comment">//this表示本类对象,作用就是用来区分成员变量和局部变量重名的问题</span></span><br><span class="line">            <span class="built_in">this</span>.name=<span class="string">&quot;*****&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>面向对象的3大特征：封装、 继承 、多态</p>
</blockquote>
<ul>
<li><p>继承： </p>
</li>
<li><p>1.概念 </p>
<ul>
<li>让类和类之间产生父子关系，同时子类可以拥有父类所有非私有属性和行为（方法）</li>
</ul>
</li>
<li><p>2.好处 </p>
<ul>
<li>简化代码，同时让类和类之间产生了联系，是多态的前提</li>
</ul>
</li>
<li><p>3.弊端 </p>
<ul>
<li>代码和代码的耦合度增加了</li>
</ul>
</li>
<li><p>4.语法 </p>
<ul>
<li>子类 <code>extends</code> 父类</li>
</ul>
</li>
<li><p>5.注意事项 </p>
<ul>
<li>1.java不允许多继承 </li>
<li>2.继承是由传递性的 <code>java</code>顶级父类是<code>object </code></li>
<li>3.java中所有类（<code>class</code>）都是要么直接继承<code>object</code>，要么间接继承<code>object</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>继承 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TDog</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TDog</span>();</span><br><span class="line">        t.eat();</span><br><span class="line">        t.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类 动物类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="type">int</span> leg;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kanjia</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗会看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 舔狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TDog</span> <span class="keyword">extends</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">T</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一无所有&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>1.java不允许多继承 </p>
</li>
<li><p>2.继承是由传递性的 java顶级父类是object </p>
</li>
<li><p>3.java中所有类（class）都是要么直接继承object，要么间接继承object </p>
</li>
<li><p>4.子类不能继承父类的构造方法,但是可以通过super()去访问父类构造方法 </p>
</li>
<li><p>5.子类中所有的构造方法，默认都会访问父类的无参构造？ </p>
<ul>
<li>为什么？ <ul>
<li>因为子类会继承父类中的数据，可能还会使用父类中的数据, 所以子类在初始化之前，一定要先将父类进行初始化</li>
</ul>
</li>
</ul>
</li>
<li><p>6.思考：如果父类中，没有无参构造怎么解决调用的问题？也就是说子类应该怎么办？ </p>
<ul>
<li>1.super解决 </li>
<li>2.this解决</li>
</ul>
</li>
</ul>
<h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ul>
<li><p>方法重写（掌握） </p>
<ul>
<li><p>1.什么是方法重写 </p>
<ul>
<li>重写：子类父类出现一模一样的方法（注意：返回值类型可以是子父类，学完面向对象讲）</li>
</ul>
</li>
<li><p>2.方法重写的应用 </p>
<ul>
<li>当子类除了需要父类的功能，又需要子类自己独有的新功能时，就可以用方法重写 </li>
<li>这样既沿袭了父类的功能，又有子类特有的功能</li>
</ul>
</li>
<li><p>3.重写的注意事项： </p>
<ul>
<li>1.父类中私有方法不可以被重写 </li>
<li>2.子类重写父类方法时，访问权限不能比父类方法低（最好一致） </li>
<li>3.子类重写方法方法的时候，最好声明一模一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>方法重写 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChatGPT4</span> <span class="variable">chatGPT4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatGPT4</span>();</span><br><span class="line">        chatGPT4.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * chatgpt3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatGPT3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;识别文字&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatGPT4</span> <span class="keyword">extends</span> <span class="title class_">ChatGPT3</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     对父类继承过来的方法逻辑进行修改，迭代</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//super 表示父类引用 可以直接调用父类的method方法</span></span><br><span class="line">        <span class="built_in">super</span>.method();</span><br><span class="line">        System.out.println(<span class="string">&quot;识别图片&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><img src="/../pic/2.jpg"></p>
<p><img src="/../pic/3.jpg"></p>
<ul>
<li><p>多态：（事物存在的多种形态，水 固态叫冰，气态叫水蒸气）</p>
</li>
<li><p>java中多态： </p>
</li>
<li><p>多态的前提： </p>
<ul>
<li>1.要有继承关系 </li>
<li>2.要有方法重写 </li>
<li>3.要有向上造型（父类引用指向子类对象）</li>
</ul>
</li>
<li><p>多态中： </p>
<ul>
<li>成员变量编译看左边，运行看左边 </li>
<li>成员方法编译看左边，运行看右边 </li>
<li>静态方法编译看编译看左边，运行看左边 </li>
<li>但是静态方法是隶属本类的，不能被继承，所以谈不上重写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>多态 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.要有向上造型（父类引用指向子类对象）</span></span><br><span class="line">        <span class="comment">//父类引用指向子类对象  翻译成你能理解的中文：Tom是一只猫</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tom</span>();</span><br><span class="line">        <span class="comment">//成员变量编译看=左边，运行看=左边</span></span><br><span class="line">        System.out.println(cat.legs);</span><br><span class="line">        cat.eat();</span><br><span class="line">        <span class="comment">//相当于是Cat.sleep();</span></span><br><span class="line">        cat.sleep();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际开发多态一般把父类引用作为形式参数写在方法中接收子类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Cat cat)</span>&#123;<span class="comment">//Cat cat = new Tom()  动态加载</span></span><br><span class="line">        cat.eat();<span class="comment">//Tom吃Jerry  调用的是子类的成员方法</span></span><br><span class="line">        <span class="comment">//2    调用的是父类的成员变量</span></span><br><span class="line">        System.out.println(cat.legs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类 猫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">legs</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃饭......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 Tom</span></span><br><span class="line"><span class="comment"> * 1.要有继承关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tom</span> <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">legs</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.要有方法重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Tom吃Jerry......&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tom睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 多来A梦</span></span><br><span class="line"><span class="comment"> * 1.要有继承关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class 多来A梦 <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.要有方法重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;多来A梦吃铜锣烧......&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>多态的注意事项 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* //向上造型：父类引用指向子类对象</span></span><br><span class="line"><span class="comment">        Tank tank = new ZhuBaJie();</span></span><br><span class="line"><span class="comment">        tank.pingA();</span></span><br><span class="line"><span class="comment">        //多态的弊端：不可以直接调用子类独有的方法</span></span><br><span class="line"><span class="comment">        //tank.圈养时刻();</span></span><br><span class="line"><span class="comment">        //向下造型:把父类引用强制转换成子类引用</span></span><br><span class="line"><span class="comment">        ZhuBaJie zhuBaJie = (ZhuBaJie)tank;</span></span><br><span class="line"><span class="comment">        zhuBaJie.圈养时刻();</span></span><br><span class="line"><span class="comment">        Tank tank1 = new ChenYaoJin();*/</span></span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">ZhuBaJie</span>());</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">ChenYaoJin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法抽取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Tank tank)</span>&#123;<span class="comment">//Tank tank = new ChenYaoJin();</span></span><br><span class="line">        tank.pingA();</span><br><span class="line">        <span class="comment">//(ZhuBaJie)ChenYaoJin;ClassCastException</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * instanceof 判断某个引用的类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(tank <span class="keyword">instanceof</span> ZhuBaJie)&#123;</span><br><span class="line">            <span class="type">ZhuBaJie</span> <span class="variable">zhuBaJie</span> <span class="operator">=</span> (ZhuBaJie) tank;</span><br><span class="line">            zhuBaJie.圈养时刻();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tank <span class="keyword">instanceof</span> ChenYaoJin)&#123;</span><br><span class="line">            <span class="type">ChenYaoJin</span> <span class="variable">chenYaoJin</span> <span class="operator">=</span> (ChenYaoJin) tank;</span><br><span class="line">            chenYaoJin.正义潜能();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：坦克</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;平A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：程咬金</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChenYaoJin</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的pingA成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两把斧子旋转&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类独有的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 正义潜能()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5秒真男人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：猪八戒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZhuBaJie</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的pingA成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;肉蛋蹦床&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类独有的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 圈养时刻()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;释放一个屏障，限制敌人的走位&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul>
<li><p>static关键字： </p>
<ul>
<li><p>1.随着类的加载而加载（其实就是跟随字节码文件加载而加载） </p>
</li>
<li><p>2.优先于对象而存在的 </p>
</li>
<li><p>3.可以被类的所有对象共享 </p>
<ul>
<li>这句话就告诉我们，什么时候该用静态来修饰成员</li>
<li>班级编号 是一个成员属性，可以被所有学生共享，可以用static修饰 </li>
<li>饮水机 static 水杯 不能用static </li>
<li>共性用静态，非共性用非静态</li>
</ul>
</li>
<li><p>4.可以直接通过类名.出来 </p>
</li>
<li><p>5.注意事项： </p>
<ul>
<li>1.在静态方法中是没有this关键字的，因为静态随着着类的加载而加载，this是随着对象创建而存在的 </li>
<li>2.静态比对象优先存在 </li>
<li>3.静态方法只能访问静态成员变量或者静态成员方法 </li>
<li>4.非静态方法可以访问非静态成员，也可以访问静态成员 </li>
<li>5.诀窍：记住静态只能访问静态就可以</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07static</span>关键字 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.name=<span class="string">&quot;Andy&quot;</span>;</span><br><span class="line">        Student.college = <span class="string">&quot;软件学院&quot;</span>;</span><br><span class="line">        stu.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学院</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> String college;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;:&quot;</span>+college);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//在静态方法中是没有this关键字的，因为静态随着着类的加载而加载，this是随着对象创建而存在的</span></span><br><span class="line">        <span class="comment">/*System.out.println(this.name);*/</span></span><br><span class="line">        System.out.println(college);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul>
<li><p>构造方法：（Constructor） </p>
<ul>
<li><p>作用： </p>
<ul>
<li>1.创建对象用 new 类的构造方法() </li>
<li>2.给成员变量进行初始化赋值</li>
</ul>
</li>
<li><p>写法： </p>
<ul>
<li>方法名，和类名必须保持一致 </li>
<li>没有返回值，连void都不能写 </li>
<li>没有具体的返回值return</li>
</ul>
</li>
<li><p>构造的注意： </p>
<ul>
<li>1.在一个类中，你如果不写构造方法，计算机会自动给补充一个无参构造</li>
<li>2.但是一旦你写构造方法，就会用你写的构造方法，原来的无参构造就被踢出了</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span>构造方法 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实例化一个Father对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        new Father();</span></span><br><span class="line"><span class="comment">        Father f =  new Father(&quot;Andy&quot;,23);</span></span><br><span class="line"><span class="comment">        System.out.println(f.getName());</span></span><br><span class="line"><span class="comment">        System.out.println(f.getAge());*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名，和类名必须保持一致</span></span><br><span class="line"><span class="comment">     *  没有返回值，连void都不能写</span></span><br><span class="line"><span class="comment">     *  没有具体的返回值return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote>
<p>思考：抽象类、普通父类、接口之间的区别 </p>
</blockquote>
<p>抽象类： </p>
<ul>
<li><p>概念：java中用abstract 修饰的类就是抽象类，抽象就是完全看不懂，模糊 </p>
</li>
<li><p>写法： 抽象类：abstract class 类名{} 抽象方法：public abstract void eat(); </p>
</li>
<li><p>注意： </p>
<ul>
<li>1.抽象类中，不一定要有抽象方法，有抽象方法的一定是抽象类或者接口 </li>
<li>2.抽象类中的抽象方法因为没有具体的方法体，所以抽象类是不可以实例化的 </li>
<li>3.如果想要使用抽象类，变向对抽象类进行实例化要怎么做？ <ul>
<li>按照多态的方式，由其子类进行实例化，抽象类也相当于是多态的一种，抽象类多态</li>
</ul>
</li>
<li>4.抽象类的子类，要么是抽象类，要么强制重写抽象类中的所有抽象方法</li>
</ul>
</li>
<li><p>抽象类的特点： </p>
<ul>
<li>1.成员变量，既可以是变量，也可以是常量（其值不可以被改变，改变了就失去了其原有的意义） </li>
<li>2.抽象类是否有构造方法？有构造方法，作用就是给子类访问父类的数据进行初始化 </li>
<li>3.成员方法：可以是抽象的，也可以是非抽象的 </li>
<li>4.抽象类存在的意义是什么？ <ul>
<li>抽象类其实就是一种约束，子类继承抽象类，必须满足他的要求（重写抽象方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>抽象类 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tom</span>();</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中多态满足3个条件：</span></span><br><span class="line"><span class="comment"> *  1.要有继承关系</span></span><br><span class="line"><span class="comment"> *  2.要有方法重写</span></span><br><span class="line"><span class="comment"> *  3.向上造型（父类引用指向子类对象）</span></span><br><span class="line"><span class="comment"> *  父类：Cat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">     <span class="type">int</span> a;<span class="comment">//0</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报错，abstract不能修饰成员变量</span></span><br><span class="line"><span class="comment">     * public abstract int a;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        a =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类的成员方法&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：Tom</span></span><br><span class="line"><span class="comment"> * 抽象类的子类，要么是抽象类，要么强制重写抽象类中的所有抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Tom</span> <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tom吃Jerry....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>定义：就是一个特殊的抽象类。java8之前比抽象类更加严谨。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口：</span></span><br><span class="line"><span class="comment"> *   定义：就是一个特殊的抽象类。java8之前比抽象类更加严谨。</span></span><br><span class="line"><span class="comment"> *   接口中只允许有常量和抽象方法这句话对不对？</span></span><br><span class="line"><span class="comment"> *   java8之前接口中可以包含：</span></span><br><span class="line"><span class="comment"> *      常量</span></span><br><span class="line"><span class="comment"> *      抽象方法</span></span><br><span class="line"><span class="comment"> *   java8</span></span><br><span class="line"><span class="comment"> *      常量</span></span><br><span class="line"><span class="comment"> *      抽象方法</span></span><br><span class="line"><span class="comment"> *      默认方法  可以不用强制重写</span></span><br><span class="line"><span class="comment"> *      静态方法  可以不用强制重写，子类无法继承父类（父接口的）静态方法，通过接口名直接.就是</span></span><br><span class="line"><span class="comment"> *   java9</span></span><br><span class="line"><span class="comment"> *      常量</span></span><br><span class="line"><span class="comment"> *      抽象方法</span></span><br><span class="line"><span class="comment"> *      默认方法</span></span><br><span class="line"><span class="comment"> *      静态方法</span></span><br><span class="line"><span class="comment"> *      私有方法</span></span><br><span class="line"><span class="comment"> *如何实例化一个接口</span></span><br><span class="line"><span class="comment"> *      通过一个子类去通过implements(实现)这个接口，可以变向的实例化接口</span></span><br><span class="line"><span class="comment"> * 接口中是否可以有构造方法？？？</span></span><br><span class="line"><span class="comment"> *  不能有构造方法（构造方法的作用：1.实例化对象，2给成员变量初始化，接口里面没有成员变量，也不能直接new，所有没有构造）</span></span><br><span class="line"><span class="comment"> *接口实现类构造方法维护的是Object的构造方法</span></span><br><span class="line"><span class="comment"> * 什么时候使用接口？</span></span><br><span class="line"><span class="comment"> *      接口是一种约束，如果你想让所有子类都实现接口中抽象方法的时候，就用接口，否则也可以用抽象类</span></span><br><span class="line"><span class="comment"> *  总结：</span></span><br><span class="line"><span class="comment"> *      1.类和类之间</span></span><br><span class="line"><span class="comment"> *          继承关系：java中只允许单一继承，但是可以多层继承（继承是有传递性）</span></span><br><span class="line"><span class="comment"> *      2.类和接口之间</span></span><br><span class="line"><span class="comment"> *          实现关系：java中允许多实现（也就是说一个类可以实现多个接口,实现多个接口用,隔开）</span></span><br><span class="line"><span class="comment"> *          一个类可以继承另外一个类，同时实现多个接口</span></span><br><span class="line"><span class="comment"> *      3.接口和接口之间</span></span><br><span class="line"><span class="comment"> *          继承关系：同时接口可以做到多实现</span></span><br><span class="line"><span class="comment"> *    java中是否可以多继承？？？</span></span><br><span class="line"><span class="comment"> *    类不可以多继承，可以多实现，接口可以多继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Demo03</span>接口 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoTianQuan</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.methodDefault();</span><br><span class="line">        Dog.methodStatic();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父接口：动物类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">Aniaml</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">Aniaml1</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Aniaml</span>,Aniaml1&#123;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法  public abstract可以省略不写，计算机会自动给你加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认方法,可以不强制重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodDefault</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的默认方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法，可以不强制重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的静态方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：哮天犬</span></span><br><span class="line"><span class="comment"> * java中允许多实现（也就是说一个类可以实现多个接口）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianQuan</span> <span class="keyword">implements</span> <span class="title class_">Dog</span>,Aniaml&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XiaoTianQuan</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里super()调用的是所有类的顶级父类的Object的构造</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;哮天犬吃肉....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部类：</span></span><br><span class="line"><span class="comment"> *      概述：</span></span><br><span class="line"><span class="comment"> *          类中之类，说白就是一个类中，再定义一个类。</span></span><br><span class="line"><span class="comment"> *          那么这个类里面的类就叫内部类，外面的类就叫外部类，</span></span><br><span class="line"><span class="comment"> *          内部类是封装的一种体现形式，相对安全一些。</span></span><br><span class="line"><span class="comment"> *      内部类有哪些？</span></span><br><span class="line"><span class="comment"> *          1.成员内部类</span></span><br><span class="line"><span class="comment"> *          2.局部内部类</span></span><br><span class="line"><span class="comment"> *          3.静态内部类</span></span><br><span class="line"><span class="comment"> *          4.匿名内部类（常用）</span></span><br><span class="line"><span class="comment"> *      语法</span></span><br><span class="line"><span class="comment"> *          看代码</span></span><br><span class="line"><span class="comment"> *      特点</span></span><br><span class="line"><span class="comment"> *          1.内部类可以访问外部类的所有成员（属性，行为）</span></span><br><span class="line"><span class="comment"> *          2.外部要访问内部类的成员必须创建内部类的对象，实例化内部类，再去调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>内部类 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">        <span class="comment">//因为num是Outer的私有成员变量，无法通过实例化对象去调用</span></span><br><span class="line"><span class="comment">//        System.out.println(outer.num);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 成员内部类的成员方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员内部类的成员方法...&quot;</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部类成员方法</span></span><br><span class="line"><span class="comment">     * 外部要访问内部类的成员必须创建内部类的对象，实例化内部类，再去调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的成员方法...&quot;</span>+num);</span><br><span class="line">        inner.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部内部类：写在类中方法内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>局部内部类 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer2</span> <span class="variable">outer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>();</span><br><span class="line">        outer2.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer2</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部类的成员方法</span></span><br><span class="line"><span class="comment">     * 3.局部变量和成员变量生命周期不一样</span></span><br><span class="line"><span class="comment">     *   成员变量：随着对象创建而存在，对象的消失而消失</span></span><br><span class="line"><span class="comment">     *   局部变量：随着方法的调用而存在，方法执行完毕，而消失</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//       final int num = 2;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">//       num = 3;</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 局部内部类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只能在这里实例化局部内部类</span></span><br><span class="line">        <span class="type">Inner2</span> <span class="variable">inner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">        inner2.print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部类的成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new Inner2();//局部内部类只能在其方法（method）中创建对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类：由static修饰的内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>静态内部类 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer3.Inner3.print();</span><br><span class="line">        <span class="comment">//不是实例化Outer3而是实例话Inner3</span></span><br><span class="line">        Outer3.<span class="type">Inner3</span> <span class="variable">inner3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer3</span>.Inner3();</span><br><span class="line">        inner3.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer3</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner3</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的成员方法......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的静态方法......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匿名内部类（常用）:没有名字的内容部类</span></span><br><span class="line"><span class="comment"> * 1.前提</span></span><br><span class="line"><span class="comment"> *      要求必须先存在一个类（可以是普通类，抽象类，接口）</span></span><br><span class="line"><span class="comment"> * 2.语法</span></span><br><span class="line"><span class="comment"> *      new 接口名（或者类名）&#123;重写方法&#125;;</span></span><br><span class="line"><span class="comment"> * 3.实际生产中匿名内部类一般只针对重写一个抽象方法的时候再去使用，如果有多个抽象方法，最好用有名字的内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span>匿名内部类 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer4</span> <span class="variable">outer4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer4</span>();</span><br><span class="line">        outer4.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部类</span></span><br><span class="line"><span class="comment"> * 2.语法</span></span><br><span class="line"><span class="comment"> *  new 接口名或者类名()&#123;重写方法&#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer4</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部类的成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**匿名内部类*/</span></span><br><span class="line">        <span class="comment">/*Inter i =  new Inter()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void print() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;匿名内部类的print方法....&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        i.print();</span></span><br><span class="line"><span class="comment">        i.show();*/</span></span><br><span class="line">       <span class="type">Inter</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类的print方法....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;匿名内部类的show方法....&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dy</span><span class="params">()</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;子类独有的方法.....&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       i.print();</span><br><span class="line">       i.show();</span><br><span class="line">       <span class="comment">//i.Dy(); 这种写法不能调用，同时i不能向下造型，因为子类是没有名字的内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java实训笔记</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合第三方技术</title>
    <url>/post/0.html</url>
    <content><![CDATA[<h1 id="springBoot整合第三方技术"><a href="#springBoot整合第三方技术" class="headerlink" title="springBoot整合第三方技术"></a>springBoot整合第三方技术</h1><h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><ul>
<li>核心配置： 数据库连接相关信息</li>
<li>映射配置：SQL映射（XML&#x2F;注解）</li>
</ul>
<h2 id="创建新模块"><a href="#创建新模块" class="headerlink" title="创建新模块"></a>创建新模块</h2><h3 id="选择spring初始化，并配置模块相关基础信息"><a href="#选择spring初始化，并配置模块相关基础信息" class="headerlink" title="选择spring初始化，并配置模块相关基础信息"></a>选择spring初始化，并配置模块相关基础信息</h3><ol>
<li>选择当前模块需要的技术集（自动导入依赖坐标）</li>
<li>设置数据源参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/ssm</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>4.定义数据层接口与映射配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select *from tbl_book where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.测试类注入接口，测试功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootMyBatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><ol>
<li>MySQL 8.X驱动强制要求设置时区<ul>
<li>修改url，添加serverTimezone设定</li>
<li>修改MySQL数据库配置</li>
</ul>
</li>
<li>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</li>
</ol>
<h1 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h1><h2 id="手动添springBooot整合MybatisPlus坐标"><a href="#手动添springBooot整合MybatisPlus坐标" class="headerlink" title="手动添springBooot整合MybatisPlus坐标"></a>手动添springBooot整合MybatisPlus坐标</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.4</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="定义数据层接口与映射配置，继承BaseMapper"><a href="#定义数据层接口与映射配置，继承BaseMapper" class="headerlink" title="定义数据层接口与映射配置，继承BaseMapper"></a>定义数据层接口与映射配置，继承BaseMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同整合mybatis"><a href="#同整合mybatis" class="headerlink" title="同整合mybatis"></a>同整合mybatis</h2><h1 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h1><h2 id="导入对应的starter"><a href="#导入对应的starter" class="headerlink" title="导入对应的starter"></a>导入对应的starter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置对应的设置或采用默认配置"><a href="#配置对应的设置或采用默认配置" class="headerlink" title="配置对应的设置或采用默认配置"></a>配置对应的设置或采用默认配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql://localhost:3306/ssm</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>MyBatis</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>用户管理系统后端</title>
    <url>/post/29c5a7c0.html</url>
    <content><![CDATA[<h1 id="用户管理系统后端"><a href="#用户管理系统后端" class="headerlink" title="用户管理系统后端"></a>用户管理系统后端</h1><hr>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><strong>创建项目</strong></h2><blockquote>
<p>创建SpringBoot项目</p>
<p>版本：2.7.8</p>
</blockquote>
<h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a><strong>pom依赖</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- freemarker 一个用Java语言编写的模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="properties-yml"><a href="#properties-yml" class="headerlink" title="properties.yml"></a><strong>properties.yml</strong></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;061313&#x27;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///xdb</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.cheng:</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="MyBatis-Plus代码生成器"><a href="#MyBatis-Plus代码生成器" class="headerlink" title="MyBatis-Plus代码生成器"></a>MyBatis-Plus代码生成器</h1><h2 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h2><blockquote>
<p>在<code>src/test/java/com/cheng/CodeGenerator.java</code>下创建代码生成器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///xdb&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;061313&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;aaron&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> <span class="string">&quot;E:\\IdeaProjects\\workspace\\x-admin\\src\\main\\java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> <span class="string">&quot;com.cheng&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> <span class="string">&quot;sys&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">mapperLocation</span> <span class="operator">=</span> <span class="string">&quot;E:\\IdeaProjects\\workspace\\x-admin\\src\\main\\resources\\mapper\\&quot;</span> + moduleName;</span><br><span class="line"><span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="string">&quot;x_user,x_menu,x_role,x_role_menu,x_user_role&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">tablePrefix</span> <span class="operator">=</span> <span class="string">&quot;x_&quot;</span>;</span><br><span class="line">FastAutoGenerator.create(url, username, password)</span><br><span class="line">        .globalConfig(builder -&gt; &#123;</span><br><span class="line">            builder.author(author) <span class="comment">// 设置作者</span></span><br><span class="line">                    .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                    <span class="comment">//.fileOverride() // 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(outputDir); <span class="comment">// 指定输出目录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .packageConfig(builder -&gt; &#123;</span><br><span class="line">            builder.parent(basePackage) <span class="comment">// 设置父包名</span></span><br><span class="line">                    .moduleName(moduleName) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, mapperLocation)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .strategyConfig(builder -&gt; &#123;</span><br><span class="line">            builder.addInclude(tableName) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                    .addTablePrefix(tablePrefix); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">        .execute();</span><br></pre></td></tr></table></figure>



<h2 id="启动类加注解"><a href="#启动类加注解" class="headerlink" title="启动类加注解"></a><strong>启动类加注解</strong></h2><blockquote>
<p>使用<code>@MapperScan</code>注解<code>mapper</code>下的类都不需要再加<code>@Mapper</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.cheng.*.mapper&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><strong>测试数据层</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XAdminApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><strong>测试控制层</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin 解决跨域问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>这里需要使用@RestController因为需要返回的json数据</li>
</ul>
<p><strong>具体</strong>：<a href="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ" title="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ">https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ</a></p>
<h1 id="公共相应类"><a href="#公共相应类" class="headerlink" title="公共相应类"></a>公共相应类</h1><blockquote>
<p>为了给前端返回统一的格式，我们需要<strong>统一格式</strong></p>
</blockquote>
<h2 id="创建公共类"><a href="#创建公共类" class="headerlink" title="创建公共类"></a>创建公共类</h2><p>创建<code>com/cheng/common/vo/Result.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message,T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="登录相关接口"><a href="#登录相关接口" class="headerlink" title="登录相关接口"></a>登录相关接口</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><blockquote>
<p>查看前端项目时，点击登陆时，打开F12查看发送了哪些请求</p>
<p>这样就可以对这些请求进行编写</p>
</blockquote>
<table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
<tr>
<td>请求参数</td>
<td>username  &amp;#xA;password</td>
</tr>
</tbody></table>
<p>返回参数：</p>
<ol>
<li><code>code: 20000</code></li>
<li><code>data: &#123;token: &quot;user:90d64b1d-8b35-4162-b2e6-a9a9af231f03&quot;&#125;</code></li>
<li><code>token: &quot;user:90d64b1d-8b35-4162-b2e6-a9a9af231f03&quot;</code></li>
<li><code>message: &quot;success&quot;</code></li>
</ol>
<h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a><strong>UserController</strong></h3><blockquote>
<p>在<code>UserController</code>类中编写login方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = userService.login(user);</span><br><span class="line">    <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="number">20002</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>知识点</strong></p>
<ul>
<li><a href="https://blog.csdn.net/justry_deng/article/details/80972817" title="@RequestBody的使用">@RequestBody的使用</a></li>
</ul>
<h3 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a><strong>UserServiceImpl</strong></h3><blockquote>
<p>在<code>UserServiceImpl</code>编写登录逻辑</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 根据用户名和密码查询</span></span><br><span class="line">    lqw.eq(User::getUsername, user.getUsername());</span><br><span class="line">    lqw.eq(User::getPassword, user.getPassword());</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(lqw);</span><br><span class="line">    <span class="comment">// 如果结果不为空，则生成token，将用户信息存入redis</span></span><br><span class="line">    <span class="keyword">if</span> (loginUser != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span> + UUID.randomUUID();</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        loginUser.setPassword(<span class="literal">null</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(key,loginUser,<span class="number">30</span>, TimeUnit.HOURS);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;token&quot;</span>,key);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a><strong>整合Redis</strong></h3><ol>
<li><strong>pom</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol>
<li><strong>yml</strong></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.<strong>配置类</strong></p>
<blockquote>
<p>创建config包下MyRedisConfig配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        om.setTimeZone(TimeZone.getDefault());</span><br><span class="line">        om.configure(MapperFeature.USE_ANNOTATIONS, <span class="literal">false</span>);</span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        om.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存入redis</span></span><br><span class="line">loginUser.setPassword(<span class="literal">null</span>);</span><br><span class="line">redisTemplate.opsForValue().set(key,loginUser,<span class="number">30</span>, TimeUnit.HOURS);</span><br></pre></td></tr></table></figure>



<h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;info?token&#x3D;xxx</td>
</tr>
<tr>
<td>method</td>
<td>get</td>
</tr>
<tr>
<td>请求参数</td>
<td>token</td>
</tr>
</tbody></table>
<p>返回参数：</p>
<ol>
<li><code>code: 20000</code></li>
<li><code>data: &#123;token: &quot;user:2528455e-da46-4e9b-a789-fbcdfcad3e8d&quot;&#125;</code></li>
<li><code>token: &quot;user:2528455e-da46-4e9b-a789-fbcdfcad3e8d&quot;</code></li>
<li><code>message: &quot;success&quot;</code></li>
</ol>
<h3 id="UserController-1"><a href="#UserController-1" class="headerlink" title="UserController"></a>UserController</h3><blockquote>
<p>获取<code>user</code>对象需要反序列化</p>
</blockquote>
<p>在<code>pom.xml</code>中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>UserController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; getUserInfo(<span class="meta">@Param(&quot;token&quot;)</span> String token)&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = userService.getUserInfo(token);</span><br><span class="line">    <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="number">20003</span>,<span class="string">&quot;用户信息获取失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="UserServiceImpl-1"><a href="#UserServiceImpl-1" class="headerlink" title="UserServiceImpl"></a><strong>UserServiceImpl</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 从redis查询token</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(token);</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(JSON.toJSONString(obj),User.class);</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data =  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;name&quot;</span>,user.getUsername());</span><br><span class="line">        data.put(<span class="string">&quot;avatar&quot;</span>,user.getAvatar());</span><br><span class="line">        List&lt;String&gt; roleList = <span class="built_in">this</span>.getBaseMapper().getRoleNamesByUserId(user.getId());</span><br><span class="line">        data.put(<span class="string">&quot;roles&quot;</span>, roleList);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRoleNamesByUserId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    b.role_name</span><br><span class="line">    FROM x_user_role a,x_role b</span><br><span class="line">    WHERE a.`user_id` = #&#123;userId&#125;</span><br><span class="line">    AND a.`role_id` = b.`role_id`</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; <span class="title function_">getRoleNamesByUserId</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;logout</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
</tbody></table>
<h3 id="UserController-2"><a href="#UserController-2" class="headerlink" title="UserController"></a>UserController</h3><blockquote>
<p>X-Token 是从请求头里传过来的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; logout(<span class="meta">@RequestHeader(&quot;X-Token&quot;)</span> String token) &#123;</span><br><span class="line">    userService.logout(token);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="UserServiceIpml"><a href="#UserServiceIpml" class="headerlink" title="UserServiceIpml"></a>UserServiceIpml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    redisTemplate.delete(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="用户列表查询接口"><a href="#用户列表查询接口" class="headerlink" title="用户列表查询接口"></a>用户列表查询接口</h1><h2 id="UserController-3"><a href="#UserController-3" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span> String username,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(value = &quot;phone&quot;,required = false)</span> String phone,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(&quot;pageNo&quot;)</span> Long pageNO,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw  = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lqw.likeRight(StringUtils.hasLength(username),User::getUsername,username);</span><br><span class="line">        lqw.likeRight(StringUtils.hasLength(phone),User::getPhone,phone);</span><br><span class="line">        <span class="comment">// 按用户id降序排序</span></span><br><span class="line"><span class="comment">//        lqw.orderByDesc(User::getId);</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNO,pageSize);</span><br><span class="line">        userService.page(page,lqw);</span><br><span class="line"></span><br><span class="line">        Map&lt;String ,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        data.put(<span class="string">&quot;rows&quot;</span>,page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong></p>
<ul>
<li>用分页查询时需要若没有配置分页拦截器则查不到total的总记录数</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>创建<code>MybatisPlusInterceptor</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="用户列表前端对接"><a href="#用户列表前端对接" class="headerlink" title="用户列表前端对接"></a>用户列表前端对接</h2><blockquote>
<p><code>src\api\userManager.js</code>中每个方法对应一个后端接口</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">getUserList</span>(<span class="params">searchModel</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123;</span><br><span class="line">              <span class="attr">pageNo</span>: searchModel.<span class="property">pageNo</span>,</span><br><span class="line">              <span class="attr">pageSize</span>: searchModel.<span class="property">pageSize</span>,</span><br><span class="line">              <span class="attr">username</span>: searchModel.<span class="property">username</span>,</span><br><span class="line">              <span class="attr">phone</span>: searchModel.<span class="property">phone</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><code>src\views\sys\user.vue</code>中调用上述方法，具体如下</p>
</blockquote>
<p>调用前需要导入<code>import userApi from &quot;@/api/userManage&quot;;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> userApi <span class="keyword">from</span> <span class="string">&quot;@/api/userManage&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    userApi.<span class="title function_">getUserList</span>(<span class="variable language_">this</span>.<span class="property">searchModel</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userList</span> = response.<span class="property">data</span>.<span class="property">rows</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong></p>
<p>但是需要上述方法调用才会执行，这样登录进去就可以看到数据</p>
<p>所有需要让页面加载时就做一次查询</p>
<p>此时我们需要用到钩子函数</p>
<p>methods中定义方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>实现条件查询，需要为查询按钮绑定函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">@click=&quot;getUserList&quot;</span><br><span class="line">type=&quot;primary&quot;</span><br><span class="line">icon=&quot;el-icon-search&quot;</span><br><span class="line">round</span><br><span class="line">&gt;查询&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>



<p>实现分页查询按5、10条数据展示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleSizeChange</span>(<span class="params">pageSize</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageSize</span> = pageSize;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">pageNo</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageNo</span> = pageNo;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>由于分页查询出来的数据每次都是从1开始的，需要通过计算显示该条数据的正确序号</p>
<p>在查询列表里计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &#123;&#123;</span><br><span class="line">    (searchModel.pageNo - 1) * searchModel.pageSize + scope.$index + 1</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<p>一键删除输入框的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">  v-model=&quot;searchModel.username&quot;</span><br><span class="line">  placeholder=&quot;用户名&quot;</span><br><span class="line">  clearable</span><br><span class="line">&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure>





<h1 id="新增用户接口"><a href="#新增用户接口" class="headerlink" title="新增用户接口"></a>新增用户接口</h1><h2 id="UserController-4"><a href="#UserController-4" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="设计前端新增界面"><a href="#设计前端新增界面" class="headerlink" title="设计前端新增界面"></a>设计前端新增界面</h2><blockquote>
<p>使用对话框组件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog title=&quot;收货地址&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">  &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动名称&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;form.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动区域&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">  &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;dialogFormVisible = false&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure>

<p>复用<code>title</code>，因为后面修改用户需要在掉一次该对话框</p>
<p>使用 <code>:title</code>绑定&amp;#x20;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog</span><br><span class="line">      @close=&quot;clearForm&quot;</span><br><span class="line">      :title=&quot;title&quot;</span><br><span class="line">      :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>同样需要在scrip下data中定义title</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br></pre></td></tr></table></figure>



<p><strong>修改需要绑定的属性</strong></p>
<ul>
<li><code>v-model</code></li>
</ul>
<p><strong>定义数据</strong></p>
<ul>
<li><code>label-width</code> :指的时下面的宽度</li>
</ul>
<p><img src="/image/laybel-width_uxbls2I7kf.png"></p>
<p><strong>为新增按钮绑定单击事件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-col :span=&quot;4&quot; align=&quot;right&quot;&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;openEditUI(null)&quot;</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    icon=&quot;el-icon-plus&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br></pre></td></tr></table></figure>



<p>定义<code>openEditUI</code> 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;新增用户&#x27;</span>,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><strong>问题</strong></p>
<p>当我们点开新增按钮并填写了用户信息时之后，关闭对话框</p>
<p>下次重新打开，会发现上一次输入的数据还在上面</p>
<p><strong>解决</strong></p>
<blockquote>
<p>对话框组件提供了一个关闭(close)事件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户信息编辑对话框 --&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">  @close=&quot;clearForm&quot;</span><br><span class="line">  :title=&quot;title&quot;</span><br><span class="line">  :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>定义<code>clearlForm</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">clearForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">userForm</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">clearValidate</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><blockquote>
<p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则</p>
<p>并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form :model=&quot;userForm&quot; ref=&quot;userFormRef&quot; :rules=&quot;rules&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;长度在 3 到 20 个字符&quot;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;密码不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;长度在 6 到 16 个字符&quot;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">phone</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入手机号码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkPhone, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">email</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入电子邮件&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkEmail, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>required: true</code> :表示必填项</p>
<p><code>trigger: &quot;blur&quot;</code> : 表示失去焦点时触发&amp;#x20;</p>
<p><strong>使用表单验证需要加</strong>**<code>prop</code>**<strong>属性</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户名 --&gt;</span><br><span class="line">&lt;el-form-item</span><br><span class="line">  label=&quot;用户名&quot;</span><br><span class="line">  prop=&quot;username&quot;</span><br><span class="line">  :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">  &gt;&lt;i class=&quot;el-icon-user-solid&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;el-input v-model=&quot;userForm.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>



<p><strong>自定义校验规则</strong></p>
<p>在<code>data</code>中定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">checkEmail</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z\d][\w-]&#123;2,&#125;)@(\w&#123;2,&#125;)\.([a-z]&#123;2,&#125;)(\.[a-z]&#123;2,&#125;)?$/</span>;</span><br><span class="line">      <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;邮箱格式错误&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">checkPhone</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> reg = <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>;</span><br><span class="line">      <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;号码格式错误&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">phone</span>: [</span><br><span class="line">  &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入手机号码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">validator</span>: checkPhone, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">email</span>: [</span><br><span class="line">  &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入电子邮件&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">validator</span>: checkEmail, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">],</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>小问题</strong></p>
<blockquote>
<p>上一次验证的提示信息在下一次打开时未消失</p>
<p>需要清理校验结果</p>
</blockquote>
<p><strong>处理过程</strong></p>
<blockquote>
<p>定义<code>ref</code>具体如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户信息编辑对话框 --&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">  @close=&quot;clearForm&quot;</span><br><span class="line">  :title=&quot;title&quot;</span><br><span class="line">  :visible.sync=&quot;dialogFormVisible&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-form :model=&quot;userForm&quot; ref=&quot;userFormRef&quot; :rules=&quot;rules&quot;&gt;</span><br><span class="line">    &lt;!-- 用户名 --&gt;</span><br><span class="line">    &lt;el-form-item</span><br><span class="line">      label=&quot;用户名&quot;</span><br><span class="line">      prop=&quot;username&quot;</span><br><span class="line">      :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">      &gt;&lt;i class=&quot;el-icon-user-solid&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;userForm.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>

<p>clearForm方法中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">clearForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">userForm</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">clearValidate</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><strong>点确定按钮也需要进行表单校验</strong></p>
<blockquote>
<p>为确定按钮添加保存用户的单击事件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;确 定&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<p>实现<code>saveUser</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">saveUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h2><p><strong>前后端对接</strong></p>
<p><strong>后端</strong></p>
<blockquote>
<p>后端新增用户已实现</p>
</blockquote>
<p><strong>前端</strong></p>
<blockquote>
<p><code>src\api\userManage.js</code>下创建交互方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: user</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>提交给后台</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">addUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>添加用户状态标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column prop=&quot;status&quot; label=&quot;用户状态&quot; width=&quot;100&quot;&gt;</span><br><span class="line">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">    &lt;el-tag v-if=&quot;scope.row.status == 1&quot;&gt;正常&lt;/el-tag&gt;</span><br><span class="line">    &lt;el-tag v-else type=&quot;danger&quot;&gt;异常&lt;/el-tag&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>



<h1 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h1><h2 id="修改登录接口"><a href="#修改登录接口" class="headerlink" title="修改登录接口"></a>修改登录接口</h2><p>导入依赖<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring-Security--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动类配置<code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入对象<code>UserController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br></pre></td></tr></table></figure>

<p>加密处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<p>每次产生的密码都是随机生成的，我们需要对登录逻辑业务层方法进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果结果不为空，并且密码和传入的是匹配的，则生成token，将用户信息存入redis</span></span><br><span class="line"><span class="keyword">if</span> (loginUser != <span class="literal">null</span> &amp;&amp; passwordEncoder.matches(user.getPassword(), loginUser.getPassword())) &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="用户修改"><a href="#用户修改" class="headerlink" title="用户修改"></a>用户修改</h1><h2 id="UserController-5"><a href="#UserController-5" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; updateUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">    user.setPassword(<span class="literal">null</span>); <span class="comment">//密码不需要修改</span></span><br><span class="line">    userService.updateById(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;修改用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改用户需要再定义根据id查询用户信息接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="增加修改和删除按钮"><a href="#增加修改和删除按钮" class="headerlink" title="增加修改和删除按钮"></a>增加修改和删除按钮</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;openEditUI(scope.row.id)&quot;</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    icon=&quot;el-icon-edit&quot;</span><br><span class="line">    size=&quot;mini&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;deleteUser(scope.row)&quot;</span><br><span class="line">    type=&quot;danger&quot;</span><br><span class="line">    icon=&quot;el-icon-delete&quot;</span><br><span class="line">    size=&quot;mini&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h2 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h2><blockquote>
<p><code>src\api\userManage.js</code>&amp;#x20;</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="comment">// url: &#x27;/user/&#x27; + id,</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: user</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<blockquote>
<p>复用openEditUI</p>
<p>修改该方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;新增用户&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改用户&quot;</span>;</span><br><span class="line">    <span class="comment">// 根据id查询用户数据</span></span><br><span class="line">    userApi.<span class="title function_">getUserById</span>(id).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userForm</span> = response.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改用户时不需要修改密码</p>
<p>需要对编辑对话框做个判断</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item</span><br><span class="line">  v-if=&quot;userForm.id == null || userForm.id == undefined&quot;</span><br><span class="line">  label=&quot;登录密码&quot;</span><br><span class="line">  prop=&quot;password&quot;</span><br><span class="line">  :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">  &gt;&lt;i class=&quot;el-icon-key&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;el-input</span><br><span class="line">    type=&quot;password&quot;</span><br><span class="line">    v-model=&quot;userForm.password&quot;</span><br><span class="line">    autocomplete=&quot;off&quot;</span><br><span class="line">    show-password</span><br><span class="line">  &gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>添加保存用户方法<code>src\api\userManage.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">id</span> == <span class="literal">null</span> &amp;&amp; user.<span class="property">id</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">addUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">updateUser</span>(user);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改<code>user.vue</code>中saveUser方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">saveUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





<h1 id="用户删除"><a href="#用户删除" class="headerlink" title="用户删除"></a>用户删除</h1><h2 id="UserController-6"><a href="#UserController-6" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><blockquote>
<p><code>properties.yml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>



<h2 id="对接-1"><a href="#对接-1" class="headerlink" title="对接"></a>对接</h2><blockquote>
<p>定义方法<code>src\api\userManage.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUserById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>user.vue</code> 绑定按钮</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">  @click=&quot;deleteUser(scope.row)&quot;</span><br><span class="line">  type=&quot;danger&quot;</span><br><span class="line">  icon=&quot;el-icon-delete&quot;</span><br><span class="line">  size=&quot;mini&quot;</span><br><span class="line">  circle</span><br><span class="line">&gt;&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义<code>deleteUser</code>方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$confirm(<span class="string">`你确认删除用户 <span class="subst">$&#123;user.username&#125;</span> ?`</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      userApi.<span class="title function_">deleteUserById</span>(user.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/post/63785.html</url>
    <content><![CDATA[<h1 id="用户管理系统"><a href="#用户管理系统" class="headerlink" title="用户管理系统"></a>用户管理系统</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0">项目概述</a><ul>
<li><p><a href="#1%E7%9B%AE%E6%A0%87">1.目标</a></p>
</li>
<li><p><a href="#2%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F">2.开发模式</a></p>
</li>
<li><p><a href="#3%E6%8A%80%E6%9C%AF%E6%A0%88">3.技术栈</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote>
<p>通过学习本项目，深刻理解<strong>前后端分离的思想</strong>，具备独立搭建前后端分离项目的能力及功能扩展能力</p>
</blockquote>
<h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><blockquote>
<p>前端项目：<code>Vue+ElementUI</code></p>
<p>后端项目：<code>SpringBoot+MyBatis-Plus</code></p>
<p>数据库：    <code>MySql</code></p>
</blockquote>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><table>
<thead>
<tr>
<th>前端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Vue</code></td>
<td>前端框架</td>
</tr>
<tr>
<td><code>Vuex</code></td>
<td>全局状态管理框架</td>
</tr>
<tr>
<td><code>ElementUI</code></td>
<td>前端UI框架</td>
</tr>
<tr>
<td><code>Axios</code></td>
<td>前端HTTP框架</td>
</tr>
<tr>
<td><code>vue-element-admin</code></td>
<td>项目脚手架</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>后端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>SpringBoot</code></td>
<td>容器+MVC框架</td>
</tr>
<tr>
<td><code>MyBatis</code></td>
<td>ORM框架</td>
</tr>
<tr>
<td><code>MyBatis-plus</code></td>
<td>MyBatis增强工具</td>
</tr>
<tr>
<td><code>Redis</code></td>
<td>非关系型数据库</td>
</tr>
</tbody></table>
<p><a href="https://www.wolai.com/qgsYJoozyv59fshVdQAUvs" title="前端">前端</a></p>
<p><a href="https://www.wolai.com/nuemM6Whjfy18p1N61D21q" title="后端">后端</a></p>
<p><a href="https://www.wolai.com/xzg8frW8EeQ1ZSkz4UAfcf" title="前后端对接">前后端对接</a></p>
<p><a href="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ" title="知识点">知识点</a></p>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
        <tag>vue</tag>
        <tag>Vue</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习路线</title>
    <url>/post/b4562164.html</url>
    <content><![CDATA[<h1 id="Java-学习路线"><a href="#Java-学习路线" class="headerlink" title="Java 学习路线"></a>Java 学习路线</h1><blockquote>
<p>Java 学习路线一条龙版 by 程序员鱼皮</p>
</blockquote>
<p>💂 + 💻 &#x3D; 👴🏽</p>
<p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p>
<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://qiniuyun.code-nav.cn/img/image-20211127235325557.png" alt="image-20211127235325557"></p>
<h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol>
<li>最新，完整一条龙的大厂 Java 学习路线，从入门到入土</li>
<li>同时适用于想全面学习 &#x2F; 快速求职的同学，可以根据符号来定制自己的专属学习路线</li>
<li>给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等）</li>
<li>鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂</li>
<li>划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能</li>
<li>完全开源，回馈社区，持续更新！</li>
</ol>
<h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：</p>
<ul>
<li>🌕 所有同学必须学习！！！</li>
<li>🌖 非常急着找工作，才可不学；目标大厂，必须学习！</li>
<li>🌗 急着找工作的话，可不学；目标大厂，建议学习</li>
<li>🌘 时间充足的话，再去学</li>
<li>⭐ 表示推荐资源</li>
</ul>
<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。</p>
<p>目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！</p>
<p>有关更多编程语言的选择，大家可以看我的视频了解：<a href="https://www.bilibili.com/video/BV1y3411r7pX/">https://www.bilibili.com/video/BV1y3411r7pX/</a></p>
<h2 id="阶段-0：前期准备"><a href="#阶段-0：前期准备" class="headerlink" title="阶段 0：前期准备"></a>阶段 0：前期准备</h2><ol>
<li>准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。<ul>
<li>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a></li>
</ul>
</li>
<li>准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。<ul>
<li>推荐本地软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a> （线上可以用 xx 文档）</li>
<li>推荐使用 Markdown 语法编写，鱼皮教程：<a href="https://www.bilibili.com/video/BV1no4y1k7YT/">https://www.bilibili.com/video/BV1no4y1k7YT/</a></li>
</ul>
</li>
<li>想学好编程，别背代码，要多写，把这句话刻到脑子里。</li>
<li>选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。</li>
<li>如何访问 GitHub：<a href="https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA">https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA</a> （上面有很多免费的编程学习资源、项目源码，程序员必备）</li>
</ol>
<h2 id="阶段-1：Java-入门"><a href="#阶段-1：Java-入门" class="headerlink" title="阶段 1：Java 入门"></a>阶段 1：Java 入门</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>培养兴趣、快速上手，能运行和编写简单的 Java 程序。</p>
<p>学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。</p>
<h3 id="🌕-Java-编程基础（45-天）"><a href="#🌕-Java-编程基础（45-天）" class="headerlink" title="🌕 Java 编程基础（45 天）"></a>🌕 Java 编程基础（45 天）</h3><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Java 特点（看不懂没事，别背！）</li>
<li>环境搭建</li>
<li>IDEA 开发工具<ul>
<li>新建项目</li>
<li>运行调试</li>
<li>界面配置</li>
<li>插件管理</li>
</ul>
</li>
<li><strong>Java 基础语法</strong><ul>
<li>数据类型</li>
<li>流程控制</li>
</ul>
</li>
<li>数组</li>
<li><strong>面向对象</strong><ul>
<li>方法</li>
<li>重载</li>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li>抽象类</li>
<li>接口</li>
<li>枚举</li>
<li>常用类<ul>
<li>String</li>
<li>日期时间</li>
</ul>
</li>
<li>集合类</li>
<li>泛型</li>
<li>注解</li>
<li>异常处理</li>
<li>多线程</li>
<li>IO 流</li>
<li>反射</li>
</ul>
<h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><p>初学一门语言时，一定要持续学习，不能中断！</p>
<p>想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。</p>
<p>不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。</p>
<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>为什么重写 equals 还要重写 hashcode？</li>
<li>&#x3D;&#x3D; 和 equals 比较的区别</li>
<li>为啥有时会出现 4.0 - 3.6 &#x3D; 0.40000001 这种现象？</li>
<li>final 关键字的作用</li>
<li>介绍 Java 的集合类</li>
<li>ArrayList 和 LinkedList 的区别</li>
</ol>
<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a> （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> （可以在线练习）</p>
</li>
<li><p>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></p>
</li>
<li><p>IDEA 中文教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></p>
</li>
<li><p>IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a></p>
</li>
<li><p>IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a></p>
</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Head First Java》</li>
</ul>
</li>
<li><p>在线游戏</p>
<ul>
<li>Codegym：<a href="https://codegym.cc/zh">https://codegym.cc/zh</a> （玩玩前几关培养兴趣不错，但后面收费了）</li>
</ul>
</li>
</ul>
<h3 id="🌖-Java-8（3-天）"><a href="#🌖-Java-8（3-天）" class="headerlink" title="🌖 Java 8（3 天）"></a>🌖 Java 8（3 天）</h3><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Stream API</li>
<li>Lambda 表达式</li>
<li>新日期时间 API</li>
<li>接口默认方法</li>
</ul>
<h4 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h4><p>Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。</p>
<h4 id="经典面试题-1"><a href="#经典面试题-1" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>java 8 有哪些新特性？</li>
<li>HashMap 在 jdk 1.7 和 1.8 的区别？</li>
</ol>
<h4 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a> （只看 Java 8 部分即可）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Java 8 实战》</li>
</ul>
</li>
<li><p>工具</p>
<ul>
<li>⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></li>
</ul>
</li>
</ul>
<h3 id="练手项目"><a href="#练手项目" class="headerlink" title="练手项目"></a>练手项目</h3><ul>
<li>Java 实现简单计算器：<a href="https://www.lanqiao.cn/courses/185">https://www.lanqiao.cn/courses/185</a></li>
<li>Eclipse 实现 Java 编辑器：<a href="https://www.lanqiao.cn/courses/287">https://www.lanqiao.cn/courses/287</a></li>
<li>一本糊涂账：<a href="https://how2j.cn/module/104.html">https://how2j.cn/module/104.html</a></li>
<li>Java 五子棋：<a href="https://blog.csdn.net/cnlht/article/details/8176130">https://blog.csdn.net/cnlht/article/details/8176130</a></li>
<li>Java 中国象棋：<a href="https://blog.csdn.net/cnlht/article/details/8205733">https://blog.csdn.net/cnlht/article/details/8205733</a></li>
<li>JAVA GUI 图书馆管理系统：<a href="https://github.com/uboger/LibraryManager">https://github.com/uboger/LibraryManager</a></li>
<li>JAVA 坦克大战小游戏：<a href="https://github.com/wangzhengyi/TankWar">https://github.com/wangzhengyi/TankWar</a></li>
<li>Swing 编写的俄罗斯方块：<a href="https://github.com/HelloClyde/Tetris-Swing">https://github.com/HelloClyde/Tetris-Swing</a></li>
<li>小小记账本：<a href="https://github.com/xenv/SmallAccount">https://github.com/xenv/SmallAccount</a> （适合了解数据库的同学）</li>
</ul>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？</p>
<p>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？</p>
<p>当然是数据结构和算法！</p>
<h2 id="阶段-2：巩固基础"><a href="#阶段-2：巩固基础" class="headerlink" title="阶段 2：巩固基础"></a>阶段 2：巩固基础</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>想学好编程，计算机基础知识要学好。</p>
<p>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。</p>
<p>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）</p>
<p>此外，建议大家利用零碎时间多去了解 <strong>计算机基础知识</strong> ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。</p>
<h3 id="Java-基础（30-天）"><a href="#Java-基础（30-天）" class="headerlink" title="Java 基础（30 天）"></a>Java 基础（30 天）</h3><h4 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h4><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。</p>
<p>之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。</p>
<p>如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。</p>
<h4 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h4><ul>
<li>书籍<ul>
<li>⭐《Java 核心技术卷 1》</li>
</ul>
</li>
<li>练习<ul>
<li>⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-数据结构与算法"><a href="#🌖-数据结构与算法" class="headerlink" title="🌖 数据结构与算法"></a>🌖 数据结构与算法</h3><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><ul>
<li><p><strong>时间 &#x2F; 空间复杂度分析</strong></p>
</li>
<li><p>数据结构</p>
<ul>
<li>数组</li>
<li>字符串</li>
<li>队列</li>
<li>栈</li>
<li>链表</li>
<li>集合</li>
<li>哈希表</li>
<li>树<ul>
<li>二叉树</li>
<li>多叉树</li>
<li>字典树</li>
</ul>
</li>
</ul>
</li>
<li><p>算法</p>
<ul>
<li>排序</li>
<li>双指针</li>
<li>查找</li>
<li>分治</li>
<li>动态规划</li>
<li>递归</li>
<li>回溯</li>
<li>贪心</li>
<li>位运算</li>
<li>DFS</li>
<li>BFS</li>
<li>图</li>
</ul>
</li>
</ul>
<h4 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h4><p>学算法一定要多思考、多练习！！！</p>
<p>在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。</p>
<p>不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。</p>
<p>之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。</p>
<p>有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~</p>
<h4 id="经典面试题-2"><a href="#经典面试题-2" class="headerlink" title="经典面试题"></a>经典面试题</h4><ul>
<li>LeetCode 精选 100 道：<a href="https://leetcode-cn.com/problem-list/2cktkvj/">https://leetcode-cn.com/problem-list/2cktkvj/</a></li>
<li>LeetCode 精选算法 200 题：<a href="https://leetcode-cn.com/problem-list/qg88wci/">https://leetcode-cn.com/problem-list/qg88wci/</a></li>
</ul>
<h4 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h4><ul>
<li>文章<ul>
<li>⭐ 刷了 1000 多道算法题，一点心得：<a href="https://t.1yb.co/oT9q">https://t.1yb.co/oT9q</a> （鱼皮原创）</li>
</ul>
</li>
<li>在线教程<ul>
<li>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></li>
</ul>
</li>
<li>在线刷题<ul>
<li>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《小灰的漫画算法》</li>
<li>⭐《剑指 Offer》</li>
<li>《程序员代码面试指南》</li>
<li>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a></li>
<li>LeetCode 101（C++）：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></li>
<li>LeetCode 题解（C++）：<a href="https://github.com/soulmachine/leetcode">https://github.com/soulmachine/leetcode</a></li>
<li>LeetCode Cookbook（Go 语言）：<a href="https://github.com/halfrost/LeetCode-Go">https://github.com/halfrost/LeetCode-Go</a></li>
</ul>
</li>
<li>视频<ul>
<li>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a> （难度比面试的要求大一些，适合希望更全面学习的朋友）</li>
<li>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></li>
</ul>
</li>
<li>工具<ul>
<li>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></li>
<li>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li>
<li>RegExr：<a href="https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b">https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b</a> （学习、创建和测试正则表达式的在线可视化工具）</li>
</ul>
</li>
<li>网站<ul>
<li>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌘-计算机导论"><a href="#🌘-计算机导论" class="headerlink" title="🌘 计算机导论"></a>🌘 计算机导论</h3><h4 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h4><ul>
<li>计算机发展历史</li>
<li>计算机应用领域</li>
<li>计算机发展方向</li>
<li>计算机基本组成</li>
<li>二进制</li>
<li>编程语言发展</li>
</ul>
<h4 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。</p>
<p>自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。</p>
<h4 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>《计算机科学速成课》：<a href="https://www.bilibili.com/video/BV1EW411u7th">https://www.bilibili.com/video/BV1EW411u7th</a> （从底层到上层的计算机知识科普，强烈推荐）</li>
</ul>
</li>
<li>书籍<ul>
<li>《半小时漫画计算机》</li>
</ul>
</li>
</ul>
<h3 id="🌖-操作系统"><a href="#🌖-操作系统" class="headerlink" title="🌖 操作系统"></a>🌖 操作系统</h3><h4 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h4><ul>
<li>操作系统的组成</li>
<li>进程、线程</li>
<li>进程 &#x2F; 线程间通讯方式</li>
<li>进程调度算法</li>
<li>进程 &#x2F; 线程同步方式</li>
<li>进程 &#x2F; 线程状态</li>
<li>死锁</li>
<li>内存管理</li>
<li>局部性原理</li>
</ul>
<h4 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h4><p>说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？</p>
<p>我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。</p>
<p>还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。</p>
<h4 id="经典面试题-3"><a href="#经典面试题-3" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是死锁？死锁产生的条件？</li>
<li>线程有哪几种状态？</li>
<li>有哪些进程调度算法？</li>
<li>什么是缓冲区溢出？</li>
</ol>
<h4 id="资源-5"><a href="#资源-5" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《编码》</li>
<li>《30天自制操作系统》</li>
<li>《现代操作系统》（难度较大，不推荐新手看）</li>
<li>《深入理解计算机系统》（难度较大，不推荐新手看）</li>
<li>《 自己动手写操作系统》（国产好书，网上可以下载）</li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大操作系统：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-计算机网络"><a href="#🌖-计算机网络" class="headerlink" title="🌖 计算机网络"></a>🌖 计算机网络</h3><h4 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h4><ul>
<li>网络分层模型</li>
<li>网络传输过程</li>
<li>IP、端口</li>
<li>HTTP &#x2F; HTTPS 协议</li>
<li>UDP &#x2F; TCP 协议</li>
<li>ARP 地址解析协议</li>
<li>网络安全</li>
<li>DNS 域名解析</li>
</ul>
<h4 id="学习建议-6"><a href="#学习建议-6" class="headerlink" title="学习建议"></a>学习建议</h4><p>很多学习 Java 开发的同学最后都是从事 <strong>后端开发</strong> 的工作，而计算机网络知识是后端开发的重点。</p>
<p>和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。</p>
<p>学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。</p>
<h4 id="经典面试题-4"><a href="#经典面试题-4" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>计算机网络各层有哪些协议？</li>
<li>TCP 和 UDP 协议的区别？</li>
<li>TCP 为什么需要三次握手和四次挥手？</li>
<li>HTTP 和 HTTPS 协议的区别？</li>
</ol>
<h4 id="资源-6"><a href="#资源-6" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>⭐《图解 HTTP》</li>
<li>《网络是怎样连接的》</li>
<li>⭐《图解 TCP &#x2F; IP》</li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大计算机网络基础：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="尾声-1"><a href="#尾声-1" class="headerlink" title="尾声"></a>尾声</h3><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p>
<h2 id="阶段-3：Java-企业开发基础"><a href="#阶段-3：Java-企业开发基础" class="headerlink" title="阶段 3：Java 企业开发基础"></a>阶段 3：Java 企业开发基础</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p>
<p>学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。</p>
<h3 id="🌕-MySQL-数据库（7-天）"><a href="#🌕-MySQL-数据库（7-天）" class="headerlink" title="🌕 MySQL 数据库（7 天）"></a>🌕 MySQL 数据库（7 天）</h3><p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p>
<h4 id="知识-6"><a href="#知识-6" class="headerlink" title="知识"></a>知识</h4><ul>
<li>基本概念</li>
<li>MySQL 搭建</li>
<li>SQL 语句编写</li>
<li>约束</li>
<li>索引</li>
<li>事务</li>
<li>锁机制</li>
<li>设计数据库表</li>
<li>性能优化</li>
</ul>
<h4 id="学习建议-7"><a href="#学习建议-7" class="headerlink" title="学习建议"></a>学习建议</h4><p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！</p>
<p>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。</p>
<p>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p>
<h4 id="经典面试题-5"><a href="#经典面试题-5" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>MySQL 索引的最左原则</li>
<li>InnoDB 和 MyIsam 引擎的区别？</li>
<li>有哪些优化数据库性能的方法？</li>
<li>如何定位慢查询？</li>
<li>MySQL 支持行锁还是表锁？分别有哪些优缺点？</li>
</ol>
<h4 id="资源-7"><a href="#资源-7" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a> （较新、内容相对精炼，有习题）</li>
<li>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a> （小姐姐讲课，但感觉音质一般）</li>
</ul>
</li>
<li>在线练习<ul>
<li>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a></li>
<li>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a></li>
</ul>
</li>
<li>文档<ul>
<li>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a></li>
<li>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li>
</ul>
</li>
<li>网站<ul>
<li><a href="https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0">数据库大全</a>：果创云收录的各种数据库表设计</li>
</ul>
</li>
</ul>
<h3 id="🌕-开发框架（60-天）"><a href="#🌕-开发框架（60-天）" class="headerlink" title="🌕 开发框架（60 天）"></a>🌕 开发框架（60 天）</h3><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。</p>
<p>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！</p>
<p>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。</p>
<p>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p>
<h4 id="知识-7"><a href="#知识-7" class="headerlink" title="知识"></a>知识</h4><h5 id="🌕-Java-Web"><a href="#🌕-Java-Web" class="headerlink" title="🌕 Java Web"></a>🌕 Java Web</h5><ul>
<li><p>描述：Java 网页应用开发基础</p>
</li>
<li><p>一丢丢前端基础</p>
</li>
<li><p>XML</p>
</li>
<li><p>JSON</p>
</li>
<li><p>Servlet</p>
</li>
<li><p>Filter</p>
</li>
<li><p>Listener</p>
</li>
<li><p>JSP</p>
</li>
<li><p>JSTL</p>
</li>
<li><p>Cookie</p>
</li>
<li><p>Session</p>
</li>
</ul>
<h5 id="🌕-Spring-5"><a href="#🌕-Spring-5" class="headerlink" title="🌕 Spring 5"></a>🌕 Spring 5</h5><ul>
<li>描述：Java 轻量级应用框架</li>
<li>IOC</li>
<li>AOP</li>
<li>事务</li>
</ul>
<h5 id="🌕-SpringMVC"><a href="#🌕-SpringMVC" class="headerlink" title="🌕 SpringMVC"></a>🌕 SpringMVC</h5><ul>
<li>描述：Java 轻量级 web 开发框架</li>
<li>什么是 MVC？</li>
<li>请求与响应</li>
<li>Restful API</li>
<li>拦截器</li>
<li>配置</li>
<li>执行过程</li>
</ul>
<h5 id="🌕-MyBatis"><a href="#🌕-MyBatis" class="headerlink" title="🌕 MyBatis"></a>🌕 MyBatis</h5><ul>
<li>描述：数据访问框架，操作数据库进行增删改查等操作</li>
<li>增删改查</li>
<li>全局配置</li>
<li>动态 SQL</li>
<li>缓存</li>
<li>和其他框架的整合</li>
<li>逆向工程</li>
</ul>
<h5 id="🌗-MyBatis-Plus"><a href="#🌗-MyBatis-Plus" class="headerlink" title="🌗 MyBatis Plus"></a>🌗 MyBatis Plus</h5><ul>
<li>描述：Mybatis 的增强工具，能够简化开发、提高效率</li>
<li>引入</li>
<li>通用 CRUD</li>
<li>条件构造器</li>
<li>代码生成器</li>
<li>插件扩展</li>
<li>自定义全局操作</li>
</ul>
<h5 id="🌕-SpringBoot-2"><a href="#🌕-SpringBoot-2" class="headerlink" title="🌕 SpringBoot 2"></a>🌕 SpringBoot 2</h5><ul>
<li>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率</li>
<li>常用注解</li>
<li>资源整合</li>
<li>高级特性</li>
<li>本地热部署</li>
</ul>
<h5 id="🌗-Spring-Security"><a href="#🌗-Spring-Security" class="headerlink" title="🌗 Spring Security"></a>🌗 Spring Security</h5><ul>
<li>描述：Spring 的安全管理框架</li>
<li>用户认证</li>
<li>权限管理</li>
<li>相关技术：Shiro</li>
</ul>
<h5 id="🌗-Maven-x2F-Gradle"><a href="#🌗-Maven-x2F-Gradle" class="headerlink" title="🌗 Maven &#x2F; Gradle"></a>🌗 Maven &#x2F; Gradle</h5><ul>
<li>描述：项目管理工具</li>
<li>构建</li>
<li>依赖管理</li>
<li>插件</li>
<li>配置</li>
<li>子父工程</li>
<li>多模块打包构建</li>
<li>Nexus 私服搭建</li>
</ul>
<h4 id="学习建议-8"><a href="#学习建议-8" class="headerlink" title="学习建议"></a>学习建议</h4><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p>
<p>学这些技术的时候，<strong>千万不能懒</strong> ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p>
<p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p>
<p>Maven &#x2F; Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。</p>
<h4 id="经典面试题-6"><a href="#经典面试题-6" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Spring 的 IOC 和 AOP 是什么，有哪些优点？</li>
<li>Spring 框架用到了哪些设计模式？</li>
<li>介绍 Spring Bean 的生命周期</li>
<li>MyBatis 如何实现延迟加载？</li>
<li>介绍 MyBatis 的多级缓存机制</li>
</ol>
<h4 id="资源-8"><a href="#资源-8" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频（按顺序看）</p>
<ul>
<li><p>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a> （前端部分最好也看下）</p>
</li>
<li><p>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></p>
</li>
<li><p>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></p>
</li>
<li><p>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></p>
</li>
<li><p>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></p>
</li>
<li><p>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a> （搞不懂 Maven 可以看看）</p>
</li>
<li><p>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p>
</li>
<li><p>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="🌘-开发规范（3-天）"><a href="#🌘-开发规范（3-天）" class="headerlink" title="🌘 开发规范（3 天）"></a>🌘 开发规范（3 天）</h3><p>开发不规范，同事两行泪。</p>
<p>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p>
<h4 id="知识-8"><a href="#知识-8" class="headerlink" title="知识"></a>知识</h4><ul>
<li>代码规范<ul>
<li>代码风格</li>
<li>命名</li>
<li>其他规则</li>
</ul>
</li>
<li>代码校验（CheckStyle）</li>
<li>提交规范</li>
</ul>
<h4 id="学习建议-9"><a href="#学习建议-9" class="headerlink" title="学习建议"></a>学习建议</h4><p>有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。</p>
<p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。</p>
<h4 id="资源-9"><a href="#资源-9" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a> （搜索《Java开发手册》）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a> （谷歌 Java 代码规范）</li>
</ul>
</li>
</ul>
<h3 id="🌕-Git（3-天）"><a href="#🌕-Git（3-天）" class="headerlink" title="🌕 Git（3 天）"></a>🌕 Git（3 天）</h3><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。</p>
<p>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。</p>
<p>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p>
<h4 id="知识-9"><a href="#知识-9" class="headerlink" title="知识"></a>知识</h4><ul>
<li>区分 Git 和 GitHub</li>
<li>工作区</li>
<li>分支</li>
<li>代码提交、推送、拉取、回退、重置</li>
<li>分支操作</li>
<li>代码合并、解决冲突</li>
<li>标签</li>
<li>cherry-pick</li>
<li>Git Flow</li>
<li>相关技术：SVN（比较老）</li>
</ul>
<h4 id="学习建议-10"><a href="#学习建议-10" class="headerlink" title="学习建议"></a>学习建议</h4><p>每个命令跟着敲一遍，有个大致的印象，会用即可。</p>
<p>建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。</p>
<h4 id="经典面试题-7"><a href="#经典面试题-7" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>如何解决提交冲突？</li>
<li>提交不小心出现误操作，如何撤销？</li>
<li>什么是 Git Flow，它有什么好处？</li>
</ol>
<h4 id="资源-10"><a href="#资源-10" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li>
<li>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li>
</ul>
</li>
<li><p>游戏</p>
<ul>
<li>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-Linux（10-天）"><a href="#🌖-Linux（10-天）" class="headerlink" title="🌖 Linux（10 天）"></a>🌖 Linux（10 天）</h3><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。</p>
<p>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p>
<h4 id="知识-10"><a href="#知识-10" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Linux 系统安装</li>
<li>环境变量</li>
<li>文件管理</li>
<li>用户管理</li>
<li>内存管理</li>
<li>磁盘管理</li>
<li>进程管理</li>
<li>网络管理</li>
<li>软件包管理</li>
<li>服务管理</li>
<li>日志管理</li>
<li>Linux 内核</li>
<li><strong>常用命令</strong></li>
<li><strong>常用环境搭建</strong></li>
<li><strong>Shell 脚本编程</strong></li>
<li><strong>VIM 的使用</strong></li>
</ul>
<h4 id="学习建议-11"><a href="#学习建议-11" class="headerlink" title="学习建议"></a>学习建议</h4><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p>
<p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p>
<p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p>
<p>记不住没关系，用文档查就行了。</p>
<p>先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。</p>
<h4 id="经典面试题-8"><a href="#经典面试题-8" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>如何查看某个进程的运行状态？</li>
<li>如何在 Linux 上查看 2 G 的大文件？</li>
<li>Linux 软链接和硬链接的区别</li>
</ol>
<h4 id="资源-11"><a href="#资源-11" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a> （基于 CentOS 7.6 版本较新）</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a> （经典）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a> （基础、工具进阶、工具参考）</li>
</ul>
</li>
<li><p>实战</p>
<ul>
<li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a></li>
<li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li>
<li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li>
<li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li>
<li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li>
</ul>
</li>
<li><p>社区</p>
<ul>
<li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li>
</ul>
</li>
<li><p>工具</p>
<ul>
<li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li>
<li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li>
<li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li>
<li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li>
</ul>
</li>
</ul>
<h3 id="🌘-前端基础（14-天）"><a href="#🌘-前端基础（14-天）" class="headerlink" title="🌘 前端基础（14 天）"></a>🌘 前端基础（14 天）</h3><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p>
<h4 id="知识-11"><a href="#知识-11" class="headerlink" title="知识"></a>知识</h4><ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript<ul>
<li>Ajax</li>
</ul>
</li>
<li>Vue</li>
</ul>
<h4 id="学习建议-12"><a href="#学习建议-12" class="headerlink" title="学习建议"></a>学习建议</h4><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p>
<h4 id="资源-12"><a href="#资源-12" class="headerlink" title="资源"></a>资源</h4><p>参见鱼皮原创的前端学习路线：<a href="https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ">https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ</a></p>
<h3 id="练手项目-1"><a href="#练手项目-1" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote>
<p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p>
</blockquote>
<ul>
<li>HotelSystem：<a href="https://github.com/misterchaos/HotelSystem">https://github.com/misterchaos/HotelSystem</a> （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）</li>
<li>超市管理系统：<a href="https://github.com/zhanglei-workspace/shopping-management-system">https://github.com/zhanglei-workspace/shopping-management-system</a></li>
<li>Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a> （Spring Boot 电商系统）</li>
<li>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （基于 Spring Boot 2.X 的全栈电商系统）</li>
<li>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</li>
<li>forum-java：<a href="https://github.com/Qbian61/forum-java">https://github.com/Qbian61/forum-java</a> （一款用 Java Spring Boot 实现的现代化社区系统）</li>
</ul>
<h3 id="尾声-2"><a href="#尾声-2" class="headerlink" title="尾声"></a>尾声</h3><p>学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~</p>
<p>如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。</p>
<p>但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。</p>
<h2 id="阶段-4：Java-企业开发进阶"><a href="#阶段-4：Java-企业开发进阶" class="headerlink" title="阶段 4：Java 企业开发进阶"></a>阶段 4：Java 企业开发进阶</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，<strong>解决实际问题</strong> 。</p>
<p>要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？</p>
<p>当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。</p>
<h3 id="🌘-软件工程"><a href="#🌘-软件工程" class="headerlink" title="🌘 软件工程"></a>🌘 软件工程</h3><p>软件开发和管理的一些概念、原则、技术、方法、工具和经验。</p>
<h4 id="知识-12"><a href="#知识-12" class="headerlink" title="知识"></a>知识</h4><ul>
<li>软件的本质</li>
<li>软件特性</li>
<li>软件过程</li>
<li>软件开发原则<ul>
<li>开闭原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
</ul>
</li>
<li>软件过程模型</li>
<li>敏捷开发</li>
<li>软件开发模型</li>
<li>需求建模</li>
<li>软件设计</li>
<li>UML</li>
<li>体系结构设计</li>
<li>设计模式</li>
<li>软件质量管理</li>
<li>评审</li>
<li>软件质量保证</li>
<li>软件测试<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>系统测试</li>
<li>压力测试</li>
<li>部署测试</li>
</ul>
</li>
<li>软件配置管理</li>
<li>软件项目管理</li>
<li>软件项目估算</li>
<li>项目进度安排</li>
<li>风险管理</li>
<li>软件过程改进<ul>
<li>成熟度模型</li>
</ul>
</li>
</ul>
<h4 id="学习建议-13"><a href="#学习建议-13" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。</p>
<h4 id="资源-13"><a href="#资源-13" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>《软件工程：实践者的研究方法》：<a href="https://book.douban.com/subject/6047742/">https://book.douban.com/subject/6047742/</a> （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）</li>
<li>《软件开发的 201 个原则》：<a href="https://book.douban.com/subject/35628886/">https://book.douban.com/subject/35628886/</a> （工具书，看一遍挺好的）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>清华大学软件工程：<a href="https://www.bilibili.com/video/BV1eE411V7Cr">https://www.bilibili.com/video/BV1eE411V7Cr</a></li>
<li>北京大学软件工程：<a href="https://www.bilibili.com/video/BV1Vt411V72G">https://www.bilibili.com/video/BV1Vt411V72G</a></li>
<li>大连工业大学软件工程：<a href="https://www.bilibili.com/video/BV1Ns41177VM">https://www.bilibili.com/video/BV1Ns41177VM</a></li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大计算机软件工程：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-设计模式（21-天）"><a href="#🌖-设计模式（21-天）" class="headerlink" title="🌖 设计模式（21 天）"></a>🌖 设计模式（21 天）</h3><p>设计模式是软件开发中解决一类问题的通用方法。</p>
<p>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p>
<h4 id="知识-13"><a href="#知识-13" class="headerlink" title="知识"></a>知识</h4><ul>
<li><p>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程</p>
<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li><p>结构型模式：把类或对象结合在一起形成一个更大的结构</p>
<ul>
<li>适配器模式</li>
<li>组合模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>享元模式</li>
<li>外观模式</li>
<li>桥接模式</li>
</ul>
</li>
<li><p>行为型模式：类和对象如何交互，及划分责任和算法</p>
<ul>
<li>迭代器模式</li>
<li>模板方法模式</li>
<li>策略模式</li>
<li>命令模式</li>
<li>状态模式</li>
<li>责任链模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
</ul>
<h4 id="学习建议-14"><a href="#学习建议-14" class="headerlink" title="学习建议"></a>学习建议</h4><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p>
<h4 id="经典面试题-9"><a href="#经典面试题-9" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>单例模式有哪些实现方式？有哪些优缺点？请手写其中一种</li>
<li>你用过哪些设计模式，为什么用它？</li>
</ol>
<h4 id="资源-14"><a href="#资源-14" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）</li>
<li>《Head First 设计模式》</li>
<li>《大话设计模式》</li>
<li>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li>
<li>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a></li>
</ul>
</li>
</ul>
<h3 id="🌕-缓存（14-天）"><a href="#🌕-缓存（14-天）" class="headerlink" title="🌕 缓存（14 天）"></a>🌕 缓存（14 天）</h3><p>缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。</p>
<h4 id="知识-14"><a href="#知识-14" class="headerlink" title="知识"></a>知识</h4><ul>
<li>什么是缓存？</li>
<li>本地缓存<ul>
<li>Caffeine 库</li>
</ul>
</li>
<li>多级缓存</li>
<li>Redis 分布式缓存<ul>
<li>数据类型</li>
<li>常用操作</li>
<li>Java 操作 Redis<ul>
<li>Spring Boot Redis Template</li>
<li>Redisson</li>
</ul>
</li>
<li>主从模型搭建</li>
<li>哨兵集群搭建</li>
<li>日志持久化</li>
</ul>
</li>
<li>缓存（Redis）应用场景<ul>
<li>数据共享</li>
<li>单点登录</li>
<li>计数器</li>
<li>限流</li>
<li>点赞</li>
<li>实时排行榜</li>
<li>分布式锁</li>
</ul>
</li>
<li>缓存常见问题<ul>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>缓存穿透</li>
<li>缓存更新一致性</li>
</ul>
</li>
<li>相关技术：Memcached、Ehcache</li>
</ul>
<h4 id="学习建议-15"><a href="#学习建议-15" class="headerlink" title="学习建议"></a>学习建议</h4><p>学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。</p>
<p>因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。</p>
<p>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p>
<h4 id="经典面试题-10"><a href="#经典面试题-10" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Redis 为什么快？</li>
<li>Redis 有哪些常用的数据结构？</li>
<li>Redis RDB 和 AOF 持久化的区别，如何选择？</li>
<li>如何解决缓存击穿、缓存穿透、雪崩问题？</li>
<li>如何用 Redis 实现点赞功能，怎么设计 Key &#x2F; Value？</li>
</ol>
<h4 id="资源-15"><a href="#资源-15" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a> （基于 Redis 6 的，推荐）</li>
</ul>
</li>
<li>文档<ul>
<li>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></li>
<li>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《Redis 实战》（经典）</li>
</ul>
</li>
<li>工具<ul>
<li>⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a> （强烈推荐）</li>
</ul>
</li>
</ul>
<h3 id="🌖-消息队列（14-天）"><a href="#🌖-消息队列（14-天）" class="headerlink" title="🌖 消息队列（14 天）"></a>🌖 消息队列（14 天）</h3><p>消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。</p>
<h4 id="知识-15"><a href="#知识-15" class="headerlink" title="知识"></a>知识</h4><ul>
<li>消息队列的作用</li>
<li>RabbitMQ 消息队列<ul>
<li>生产消费模型</li>
<li>交换机模型</li>
<li>死信队列</li>
<li>延迟队列</li>
<li>消息持久化</li>
<li>Java 操作</li>
<li>集群搭建</li>
</ul>
</li>
<li>相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ</li>
</ul>
<h4 id="学习建议-16"><a href="#学习建议-16" class="headerlink" title="学习建议"></a>学习建议</h4><p>和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。</p>
<p>因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。</p>
<p>这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p>
<h4 id="经典面试题-11"><a href="#经典面试题-11" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>使用消息队列有哪些优缺点？</li>
<li>如何保证消息消费的幂等性？</li>
<li>消息队列有哪些路由模型？</li>
<li>你是否用过消息队列，解决过什么问题？</li>
</ol>
<h4 id="资源-16"><a href="#资源-16" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a> （很新很全面）</li>
</ul>
</li>
<li>文档<ul>
<li>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</li>
</ul>
</li>
<li>工具<ul>
<li>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-Nginx（14-天）"><a href="#🌖-Nginx（14-天）" class="headerlink" title="🌖 Nginx（14 天）"></a>🌖 Nginx（14 天）</h3><p>Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。</p>
<h4 id="知识-16"><a href="#知识-16" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Nginx 作用</li>
<li>正向代理</li>
<li>反向代理（负载均衡）</li>
<li>常用命令</li>
<li>配置</li>
<li>动静分离（网站部署）</li>
<li>集群搭建</li>
<li>相关技术：HAProxy、Apache</li>
</ul>
<h4 id="学习建议-17"><a href="#学习建议-17" class="headerlink" title="学习建议"></a>学习建议</h4><p>Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。</p>
<p>但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。</p>
<h4 id="经典面试题-12"><a href="#经典面试题-12" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Nginx 有哪些作用？</li>
<li>Nginx 为什么支持高并发？</li>
<li>Nginx 有哪些负载均衡策略？</li>
<li>什么是 Nginx 惊群问题，如何解决它？</li>
</ol>
<h4 id="资源-17"><a href="#资源-17" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a> （讲的比较全面）</li>
<li>⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）</li>
</ul>
</li>
<li>文档<ul>
<li>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></li>
</ul>
</li>
<li>工具<ul>
<li>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></li>
</ul>
</li>
</ul>
<h3 id="🌗-Netty-网络编程（21-天）"><a href="#🌗-Netty-网络编程（21-天）" class="headerlink" title="🌗 Netty 网络编程（21 天）"></a>🌗 Netty 网络编程（21 天）</h3><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。</p>
<p>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p>
<h4 id="知识-17"><a href="#知识-17" class="headerlink" title="知识"></a>知识</h4><ul>
<li>IO 模型（BIO &#x2F; NIO）</li>
<li>Channel</li>
<li>Buffer</li>
<li>Seletor</li>
<li>Netty 模型</li>
<li>WebSocket 编程（动手做个聊天室）</li>
<li>相关技术：Vertx（中文文档：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a> ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</li>
</ul>
<h4 id="学习建议-18"><a href="#学习建议-18" class="headerlink" title="学习建议"></a>学习建议</h4><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p>
<p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。</p>
<h4 id="经典面试题-13"><a href="#经典面试题-13" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Netty 有哪些优点？</li>
<li>什么是 NIO？</li>
<li>介绍 Netty 的零拷贝机制</li>
</ol>
<h4 id="资源-18"><a href="#资源-18" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li><p>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></p>
</li>
<li><p>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></p>
</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide/</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Netty 实战》</li>
</ul>
</li>
</ul>
<h3 id="🌖-微服务（60-天）"><a href="#🌖-微服务（60-天）" class="headerlink" title="🌖 微服务（60 天）"></a>🌖 微服务（60 天）</h3><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。</p>
<p>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。</p>
<p>换言之，想做大型项目，这块儿一定要好好学！</p>
<h4 id="知识-18"><a href="#知识-18" class="headerlink" title="知识"></a>知识</h4><h5 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h5><ul>
<li>架构演进</li>
<li>RPC</li>
<li>Zookeeper</li>
<li>服务提供者</li>
<li>服务消费者</li>
<li>项目搭建</li>
<li>相关技术：DubboX（对 Dubbo 的扩展）</li>
</ul>
<h5 id="🌖-微服务"><a href="#🌖-微服务" class="headerlink" title="🌖 微服务"></a>🌖 微服务</h5><ul>
<li>微服务概念</li>
<li>Spring Cloud 框架<ul>
<li>子父工程</li>
<li>服务注册与发现</li>
<li>注册中心 Eureka、Zookeeper、Consul</li>
<li>Ribbon 负载均衡</li>
<li>Feign 服务调用</li>
<li>Hystrix 服务限流、降级、熔断</li>
<li>Resilience4j 服务容错</li>
<li>Gateway（Zuul）微服务网关</li>
<li>Config 分布式配置中心</li>
<li>分布式服务总线</li>
<li>Sleuth + Zipkin 分布式链路追踪</li>
</ul>
</li>
<li>Spring Cloud Alibaba<ul>
<li>Nacos 注册、配置中心</li>
<li>OpenFeign 服务调用</li>
<li>Sentinel 流控</li>
<li>Seata 分布式事务</li>
</ul>
</li>
</ul>
<h5 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h5><ul>
<li>Swagger 接口文档</li>
<li>Postman 接口测试</li>
<li>相关技术：YApi、ShowDoc</li>
</ul>
<h4 id="学习建议-19"><a href="#学习建议-19" class="headerlink" title="学习建议"></a>学习建议</h4><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。</p>
<p>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。</p>
<p>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p>
<p>大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。</p>
<h4 id="经典面试题-14"><a href="#经典面试题-14" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是微服务，有哪些优缺点？</li>
<li>什么是注册中心，能解决什么问题？</li>
</ol>
<h4 id="资源-19"><a href="#资源-19" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li><p>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></p>
</li>
<li><p>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a> （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）</p>
</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a></li>
<li>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li>
<li>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a> （跟着快速开始直接用就好了）</li>
</ul>
</li>
</ul>
<h3 id="🌖-容器（7-天）"><a href="#🌖-容器（7-天）" class="headerlink" title="🌖 容器（7 天）"></a>🌖 容器（7 天）</h3><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p>
<p>便于实现微服务、持续集成和交付。</p>
<h4 id="知识-19"><a href="#知识-19" class="headerlink" title="知识"></a>知识</h4><ul>
<li>🌖 Docker<ul>
<li>容器概念</li>
<li>镜像</li>
<li>部署服务</li>
<li>Dockerfile</li>
<li>Docker Compose</li>
<li>Docker Machine</li>
<li>Docker Swarm</li>
<li>多阶段构建</li>
</ul>
</li>
<li>🌘 K8S（Kubernetes）<ul>
<li>K8S 架构</li>
<li>工作负载<ul>
<li>资源类型</li>
<li>Pod</li>
<li>Pod 生命周期</li>
<li>Pod 安全策略</li>
</ul>
</li>
<li>K8S 组件</li>
<li>K8S 对象</li>
<li>部署应用</li>
<li>服务<ul>
<li>Ingress</li>
</ul>
</li>
<li>Kubectl 命令行</li>
<li>集群管理</li>
</ul>
</li>
<li>相关技术：Apache Mesos、Mesosphere</li>
</ul>
<h4 id="学习建议-20"><a href="#学习建议-20" class="headerlink" title="学习建议"></a>学习建议</h4><p>业务上云是趋势，但是对于开发同学来说，会用 Docker &#x2F; K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。</p>
<h4 id="经典面试题-15"><a href="#经典面试题-15" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是容器？</li>
<li>使用  Docker 有哪些好处？</li>
<li>如何快速启动多个 Docker 节点？</li>
</ol>
<h4 id="资源-20"><a href="#资源-20" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li>
<li>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></li>
<li>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li>
<li>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></li>
</ul>
</li>
<li><p>网站</p>
<ul>
<li>Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a> （强烈推荐，有很多 Docker 技术文章和学习笔记）</li>
<li>Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a> （国外 Docker 技术博客）</li>
</ul>
</li>
<li><p>镜像源</p>
<ul>
<li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li>
<li>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a></li>
<li>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌗-CI-x2F-CD（3-天）"><a href="#🌗-CI-x2F-CD（3-天）" class="headerlink" title="🌗 CI &#x2F; CD（3 天）"></a>🌗 CI &#x2F; CD（3 天）</h3><p>持续集成 &#x2F; 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p>
<p>大公司一般都有自己的 CI &#x2F; CD 平台。</p>
<h4 id="知识-20"><a href="#知识-20" class="headerlink" title="知识"></a>知识</h4><ul>
<li>什么是 CI &#x2F; CD</li>
<li>CI &#x2F; CD 有什么好处</li>
<li>使用任一 CI &#x2F; CD 平台</li>
<li>相关技术：Jenkins、GitLab、微信云托管</li>
</ul>
<h4 id="学习建议-21"><a href="#学习建议-21" class="headerlink" title="学习建议"></a>学习建议</h4><p>了解它是什么，并且实战使用任一 CI &#x2F; CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p>
<p>真正要自己去搭建的时候，跟着官方文档来就行。</p>
<h4 id="资源-21"><a href="#资源-21" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【狂神说】CI&#x2F;CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a> （讲的非常棒！带你快速理解 CI &#x2F; CD 的作用和部分原理）</li>
<li>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a> （实在要用到 Jenkins 再去学）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）</li>
</ul>
</li>
<li><p>实战平台</p>
<ul>
<li>⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun">https://cloud.weixin.qq.com/cloudrun</a> （直播演示过，鱼皮后面会给大家出视频教程）</li>
<li>前端托管 Webify：<a href="https://cloud.tencent.com/product/webify">https://cloud.tencent.com/product/webify</a> （鱼皮给大家出过视频教程的 <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></li>
</ul>
</li>
</ul>
<h3 id="练手项目-2"><a href="#练手项目-2" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote>
<p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p>
</blockquote>
<ul>
<li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p>
</li>
<li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p>
</li>
<li><p>Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p>
</li>
<li><p>Spring-Cloud-Admin：<a href="https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin">https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin</a> （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）</p>
</li>
<li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p>
</li>
<li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p>
</li>
<li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p>
</li>
<li><p>jeecg-boot：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a> （低代码开发平台）</p>
</li>
<li><p>PassJava-Platform：<a href="https://github.com/Jackson0714/PassJava-Platform">https://github.com/Jackson0714/PassJava-Platform</a> （一款面试刷题的 Spring Cloud 开源系统）</p>
</li>
</ul>
<h3 id="尾声-3"><a href="#尾声-3" class="headerlink" title="尾声"></a>尾声</h3><p>看到这里，相信你已经感叹：编程语言一辈子学不完了！</p>
<p>但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。</p>
<p>接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。</p>
<h2 id="阶段-5：项目实战"><a href="#阶段-5：项目实战" class="headerlink" title="阶段 5：项目实战"></a>阶段 5：项目实战</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p>
<h3 id="学习建议-22"><a href="#学习建议-22" class="headerlink" title="学习建议"></a>学习建议</h3><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p>
<p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p>
<p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p>
<p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p>
<p>做一个完整的项目的确很不容易，建议大家根据自己的 <strong>时间、兴趣</strong> 选择 <strong>较新的</strong>、<strong>有配套源码的</strong> 教程，保持耐心。</p>
<p>如何选择编程学习资源，可以看下我的原创文章：<a href="https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA">https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA</a></p>
<p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p>
<h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><ul>
<li><p>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a> （全栈项目，前后端讲得都很全面）</p>
</li>
<li><p>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）</p>
</li>
<li><p>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></p>
</li>
<li><p>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></p>
</li>
<li><p>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></p>
</li>
<li><p>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></p>
</li>
<li><p>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></p>
</li>
<li><p>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p>
</li>
</ul>
<h3 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h3><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul>
<li>Guava：谷歌开发的 Java 工具库（<a href="https://github.com/google/guava%EF%BC%89">https://github.com/google/guava）</a></li>
<li>Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（<a href="https://github.com/apache/commons-lang%EF%BC%89">https://github.com/apache/commons-lang）</a></li>
<li>Hutool：Java 工具集库（<a href="https://github.com/looly/hutool%EF%BC%89">https://github.com/looly/hutool）</a></li>
<li>Lombok：Java 增强库（<a href="https://github.com/projectlombok/lombok%EF%BC%89">https://github.com/projectlombok/lombok）</a></li>
<li>Apache HttpComponents Client：HTTP 客户端库（<a href="https://github.com/apache/httpcomponents-client%EF%BC%89">https://github.com/apache/httpcomponents-client）</a></li>
<li>OkHttp：适用于 JVM、Android 等平台的 Http 客户端（<a href="https://github.com/square/okhttp%EF%BC%89">https://github.com/square/okhttp）</a></li>
<li>Gson：谷歌的 JSON 处理库（<a href="https://github.com/google/gson%EF%BC%89">https://github.com/google/gson）</a></li>
<li>Jcommander：Java 命令行参数解析框架（<a href="https://github.com/cbeust/jcommander%EF%BC%89">https://github.com/cbeust/jcommander）</a></li>
<li>Apache PDFBox：PDF 操作库（<a href="https://github.com/apache/pdfbox%EF%BC%89">https://github.com/apache/pdfbox）</a></li>
<li>EasyExcel：阿里的 Excel 处理库（<a href="https://github.com/alibaba/easyexcel%EF%BC%89">https://github.com/alibaba/easyexcel）</a></li>
<li>Apache POI：表格文件处理库（<a href="https://github.com/apache/poi%EF%BC%89">https://github.com/apache/poi）</a></li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul>
<li>JUnit：Java 测试框架（<a href="https://github.com/junit-team/junit4%EF%BC%89">https://github.com/junit-team/junit4）</a></li>
<li>Mockito：Java 单元测试 Mock 框架（<a href="https://github.com/mockito/mockito%EF%BC%89">https://github.com/mockito/mockito）</a></li>
<li>Selenium：浏览器自动化框架（<a href="https://github.com/SeleniumHQ/selenium%EF%BC%89">https://github.com/SeleniumHQ/selenium）</a></li>
<li>htmlunit：Java 模拟浏览器（<a href="https://github.com/HtmlUnit/htmlunit%EF%BC%89">https://github.com/HtmlUnit/htmlunit）</a></li>
<li>TestNG：Java 测试框架（<a href="https://github.com/cbeust/testng%EF%BC%89">https://github.com/cbeust/testng）</a></li>
<li>Jacoco：Java 代码覆盖度库（<a href="https://github.com/jacoco/jacoco%EF%BC%89">https://github.com/jacoco/jacoco）</a></li>
</ul>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>cglib：字节码生成库（<a href="https://github.com/cglib/cglib%EF%BC%89">https://github.com/cglib/cglib）</a></li>
<li>Arthas：Java 诊断工具（<a href="https://github.com/alibaba/arthas%EF%BC%89">https://github.com/alibaba/arthas）</a></li>
<li>config：针对 JVM 的配置库（<a href="https://github.com/lightbend/config%EF%BC%89">https://github.com/lightbend/config）</a></li>
<li>Quasar：Java 纤程库（<a href="https://github.com/puniverse/quasar%EF%BC%89">https://github.com/puniverse/quasar）</a></li>
<li>drools：Java 规则引擎（<a href="https://github.com/kiegroup/drools%EF%BC%89">https://github.com/kiegroup/drools）</a></li>
<li>Caffeine：Java 高性能缓存库（<a href="https://github.com/ben-manes/caffeine%EF%BC%89">https://github.com/ben-manes/caffeine）</a></li>
<li>Disruptor：高性能线程间消息传递库（<a href="https://github.com/LMAX-Exchange/disruptor%EF%BC%89">https://github.com/LMAX-Exchange/disruptor）</a></li>
<li>Knife4j：Swagger 文档增强（<a href="https://doc.xiaominfo.com/%EF%BC%89">https://doc.xiaominfo.com/）</a></li>
<li>Thumbnailator：Java 缩略图生成库（<a href="https://github.com/coobird/thumbnailator%EF%BC%89">https://github.com/coobird/thumbnailator）</a></li>
<li>Logback：Java 日志库（<a href="https://github.com/qos-ch/logback%EF%BC%89">https://github.com/qos-ch/logback）</a></li>
<li>Apache Camel：消息传输集成框架（<a href="https://github.com/apache/camel%EF%BC%89">https://github.com/apache/camel）</a></li>
<li>Quartz：定时任务调度库（<a href="https://github.com/quartz-scheduler/quartz%EF%BC%89">https://github.com/quartz-scheduler/quartz）</a></li>
<li>Apache Mahout：机器学习库（<a href="https://github.com/apache/mahout%EF%BC%89">https://github.com/apache/mahout）</a></li>
<li>Apache OpenNLP：NLP 工具库（<a href="https://github.com/apache/opennlp%EF%BC%89">https://github.com/apache/opennlp）</a></li>
<li>RxJava：JVM 反应式编程框架（<a href="https://github.com/ReactiveX/RxJava%EF%BC%89">https://github.com/ReactiveX/RxJava）</a></li>
<li>JProfiler：性能分析库（<a href="https://www.ej-technologies.com/products/jprofiler/overview.html%EF%BC%89">https://www.ej-technologies.com/products/jprofiler/overview.html）</a></li>
<li>jsoup：HTML 文档解析库（<a href="https://jsoup.org/%EF%BC%89">https://jsoup.org/）</a></li>
<li>webmagic：Java 爬虫框架（<a href="https://github.com/code4craft/webmagic/%EF%BC%89">https://github.com/code4craft/webmagic/）</a></li>
</ul>
<h3 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h3><p>综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。</p>
<h4 id="精选地品插件"><a href="#精选地品插件" class="headerlink" title="精选地品插件"></a>精选地品插件</h4><p>简单好用、增强功能</p>
<ul>
<li><p>Background Image Plus +</p>
<ul>
<li>描述：给编辑器设置背景图片（小姐姐图片）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li>
</ul>
</li>
<li><p>Chinese Language Pack</p>
<ul>
<li>描述：中文支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li>
</ul>
</li>
<li><p>Translation</p>
<ul>
<li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li>
</ul>
</li>
<li><p>Key Promoter X</p>
<ul>
<li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li>
</ul>
</li>
<li><p>Rainbow Brackets</p>
<ul>
<li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li>
</ul>
</li>
<li><p>CodeGlance</p>
<ul>
<li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li>
</ul>
</li>
<li><p>WakaTime</p>
<ul>
<li>描述：代码统计和跟踪插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li>
</ul>
</li>
<li><p>Statistic</p>
<ul>
<li>描述：代码统计</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li>
</ul>
</li>
</ul>
<h4 id="精选天品插件"><a href="#精选天品插件" class="headerlink" title="精选天品插件"></a>精选天品插件</h4><p>提高开发效率和代码质量</p>
<ul>
<li><p>String Manipulation</p>
<ul>
<li>描述：字符串快捷处理</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li>
</ul>
</li>
<li><p>Tabnine AI Code Completion</p>
<ul>
<li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li>
</ul>
</li>
<li><p>GsonFormatPlus</p>
<ul>
<li>描述：根据 json 生成对象</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li>
</ul>
</li>
<li><p>JUnitGenerator V2.0</p>
<ul>
<li>描述：自动生成单元测试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li>
</ul>
</li>
<li><p>RestfulTool</p>
<ul>
<li>描述：辅助 web 开发的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li>
</ul>
</li>
<li><p>SequenceDiagram</p>
<ul>
<li>描述：自动生成方法调用时序图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li>
</ul>
</li>
<li><p>CheckStyle-IDEA</p>
<ul>
<li>描述：自动检查 Java 代码规范</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li>
</ul>
</li>
<li><p>Alibaba Java Coding Guidelines</p>
<ul>
<li>描述：代码规范检查插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li>
</ul>
</li>
<li><p>SonarLint</p>
<ul>
<li>描述：帮助你发现和修复代码的错误和漏洞</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li>
</ul>
</li>
<li><p>MybatisX</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li>
</ul>
</li>
</ul>
<h4 id="美化类"><a href="#美化类" class="headerlink" title="美化类"></a>美化类</h4><ul>
<li><p>Extra Icons</p>
<ul>
<li>描述：图标美化插件，支持更多文件类型</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11058-extra-icons">https://plugins.jetbrains.com/plugin/11058-extra-icons</a></li>
</ul>
</li>
<li><p>Chinese Language Pack</p>
<ul>
<li>描述：中文支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li>
</ul>
</li>
<li><p>Grep Console</p>
<ul>
<li>描述：自定义设置控制台输出颜色</li>
<li>官网：<a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></li>
</ul>
</li>
<li><p>Material Theme UI</p>
<ul>
<li>描述：美观的主题</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui">https://plugins.jetbrains.com/plugin/8006-material-theme-ui</a></li>
</ul>
</li>
<li><p>Nyan Progress Bar</p>
<ul>
<li>描述：进度条美化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar">https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar</a></li>
</ul>
</li>
<li><p>activate-power-mode</p>
<ul>
<li>描述：打字特效</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode">https://plugins.jetbrains.com/plugin/8330-activate-power-mode</a></li>
</ul>
</li>
<li><p>Power Mode II</p>
<ul>
<li>描述：打字特效插件升级版</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii">https://plugins.jetbrains.com/plugin/8251-power-mode-ii</a></li>
</ul>
</li>
<li><p>Rainbow Brackets</p>
<ul>
<li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li>
</ul>
</li>
<li><p>Background Image Plus +</p>
<ul>
<li>描述：给编辑器设置背景图片</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li>
</ul>
</li>
</ul>
<h4 id="代码生成类"><a href="#代码生成类" class="headerlink" title="代码生成类"></a>代码生成类</h4><ul>
<li><p>Codota AI Autocomplete for Java and JavaScript</p>
<ul>
<li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a></li>
</ul>
</li>
<li><p>Tabnine AI Code Completion</p>
<ul>
<li>描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li>
</ul>
</li>
<li><p>UUID Generator</p>
<ul>
<li>描述：生成随机的 UUID</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8320-uuid-generator">https://plugins.jetbrains.com/plugin/8320-uuid-generator</a></li>
</ul>
</li>
<li><p>Randomness</p>
<ul>
<li>描述：生成随机值</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9836-randomness">https://plugins.jetbrains.com/plugin/9836-randomness</a></li>
</ul>
</li>
<li><p>.ignore</p>
<ul>
<li>描述：生成不同语言的版本控制忽略文件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></li>
</ul>
</li>
<li><p>Auto filling Java call arguments</p>
<ul>
<li>描述：通过快捷键自动补全函数的调用参数</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a></li>
</ul>
</li>
<li><p>GenerateAllSetter</p>
<ul>
<li>描述：快速生成调用对象 setter 方法的代码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></li>
</ul>
</li>
<li><p>GenerateSerialVersionUID</p>
<ul>
<li>描述：一键为实现 Serializable 接口的类生成 SerialVersionUID</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a></li>
</ul>
</li>
<li><p>GsonFormatPlus</p>
<ul>
<li>描述：根据 json 生成对象</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li>
</ul>
</li>
<li><p>Lombok</p>
<ul>
<li><p>描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。</p>
</li>
<li><p>官网：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a></p>
</li>
</ul>
</li>
<li><p>Easy Code</p>
<ul>
<li>描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10954-easy-code">https://plugins.jetbrains.com/plugin/10954-easy-code</a></li>
</ul>
</li>
<li><p>Easy Javadoc</p>
<ul>
<li>描述：快速生成 Javadoc 文档</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">https://plugins.jetbrains.com/plugin/12977-easy-javadoc</a></li>
</ul>
</li>
<li><p>JavaDoc</p>
<ul>
<li>描述：生成 Javadoc 文档</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7157-javadoc">https://plugins.jetbrains.com/plugin/7157-javadoc</a></li>
</ul>
</li>
<li><p>Json2Pojo</p>
<ul>
<li>描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8533-json2pojo">https://plugins.jetbrains.com/plugin/8533-json2pojo</a></li>
</ul>
</li>
<li><p>JUnitGenerator V2.0</p>
<ul>
<li>描述：自动生成单元测试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li>
</ul>
</li>
<li><p>Jindent - Source Code Formatter</p>
<ul>
<li>描述：根据自定义模板来生成 javadoc 注释</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter">https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter</a></li>
</ul>
</li>
<li><p>MybatisX</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li>
</ul>
</li>
<li><p>MyBatisCodeHelperPro</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro">https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro</a></li>
</ul>
</li>
</ul>
<h4 id="功能提效类"><a href="#功能提效类" class="headerlink" title="功能提效类"></a>功能提效类</h4><h5 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h5><ul>
<li>Call Graph<ul>
<li>描述：生成调用关系图，便于查看源码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12304-call-graph">https://plugins.jetbrains.com/plugin/12304-call-graph</a></li>
</ul>
</li>
<li>Jump to Line<ul>
<li>描述：支持跳转到任意行进行调试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line">https://plugins.jetbrains.com/plugin/14877-jump-to-line</a></li>
</ul>
</li>
<li>SequenceDiagram<ul>
<li>描述：自动生成方法调用时序图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li>
</ul>
</li>
<li>jclasslib Bytecode Viewer<ul>
<li>描述：字节码查看器</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></li>
</ul>
</li>
<li>BrowseWordAtCaret<ul>
<li>描述： 快速在相同单词间进行跳转</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/201-browsewordatcaret">https://plugins.jetbrains.com/plugin/201-browsewordatcaret</a></li>
</ul>
</li>
<li>CodeGlance<ul>
<li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li>
</ul>
</li>
</ul>
<h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><ul>
<li>CheckStyle-IDEA<ul>
<li>描述：自动检查 Java 代码规范</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li>
</ul>
</li>
<li>Alibaba Java Coding Guidelines<ul>
<li>描述：代码规范检查插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li>
</ul>
</li>
<li>SonarLint<ul>
<li>描述：帮助你发现和修复代码的错误和漏洞</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li>
</ul>
</li>
<li>FindBugs-IDEA<ul>
<li>描述：帮你找出代码中潜藏的 Bug</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea">https://plugins.jetbrains.com/plugin/3847-findbugs-idea</a></li>
</ul>
</li>
<li>MetricsReloaded<ul>
<li>描述：代码复杂度分析</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></li>
</ul>
</li>
</ul>
<h5 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h5><ul>
<li><p>CamelCase</p>
<ul>
<li>描述：快速字符串格式转换工具，如驼峰式</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a></li>
</ul>
</li>
<li><p>Json Parser</p>
<ul>
<li>描述：验证和格式化 Json 字符串的工具</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10650-json-parser">https://plugins.jetbrains.com/plugin/10650-json-parser</a></li>
</ul>
</li>
<li><p>Properties to YAML Converter</p>
<ul>
<li>描述：把 Properties 文件的格式转为 YAML 格式</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></li>
</ul>
</li>
<li><p>String Manipulation</p>
<ul>
<li>描述：字符串快捷处理</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li>
</ul>
</li>
</ul>
<h5 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h5><ul>
<li>WakaTime<ul>
<li>描述：代码统计和跟踪插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li>
</ul>
</li>
<li>Statistic<ul>
<li>描述：代码统计</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li>
</ul>
</li>
</ul>
<h5 id="代码检索"><a href="#代码检索" class="headerlink" title="代码检索"></a>代码检索</h5><ul>
<li>OnlineSearch<ul>
<li>描述：选择文本后支持不同搜索引擎进行搜索</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8298-onlinesearch/">https://plugins.jetbrains.com/plugin/8298-onlinesearch/</a></li>
</ul>
</li>
<li>CodeSearch<ul>
<li>描述：快捷地打开搜索引擎进行搜索</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12578-codesearch">https://plugins.jetbrains.com/plugin/12578-codesearch</a></li>
</ul>
</li>
</ul>
<h5 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h5><ul>
<li><p>Leetcode Editor</p>
<ul>
<li>描述：在 IDEA 里刷算法题</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">https://plugins.jetbrains.com/plugin/12132-leetcode-editor</a></li>
</ul>
</li>
<li><p>File Watchers</p>
<ul>
<li>描述：监听文件，当其发生变化时自动执行命令</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7177-file-watchers">https://plugins.jetbrains.com/plugin/7177-file-watchers</a></li>
</ul>
</li>
<li><p>PlantUML integration</p>
<ul>
<li>描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></li>
</ul>
</li>
<li><p>Bytecode Editor</p>
<ul>
<li>描述：字节码编辑工具</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8461-bytecode-editor">https://plugins.jetbrains.com/plugin/8461-bytecode-editor</a></li>
</ul>
</li>
<li><p>Alibaba Cloud Toolkit</p>
<ul>
<li>描述：阿里云工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit">https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit</a></li>
</ul>
</li>
<li><p>Tencent Cloud Toolkit</p>
<ul>
<li>描述：腾讯云工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit">https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit</a></li>
</ul>
</li>
<li><p>EduTools</p>
<ul>
<li>描述：面向教育者，允许创建、分享和加入练习</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10081-edutools">https://plugins.jetbrains.com/plugin/10081-edutools</a></li>
</ul>
</li>
<li><p>IDE Features Trainer</p>
<ul>
<li>描述：IntelliJ IDEA 官方出的学习辅助插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">https://plugins.jetbrains.com/plugin/8554-ide-features-trainer</a></li>
</ul>
</li>
<li><p>JRebel Plugin</p>
<ul>
<li>描述：项目热更新，提高效率（可惜要收费）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij">https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij</a></li>
</ul>
</li>
<li><p>Key Promoter X</p>
<ul>
<li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li>
</ul>
</li>
<li><p>Translation</p>
<ul>
<li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li>
</ul>
</li>
<li><p>idea_seat</p>
<ul>
<li>描述：自动提醒，防止你久坐不动</li>
<li>官网：<a href="https://github.com/s-unscrupulous/idea_seat">https://github.com/s-unscrupulous/idea_seat</a></li>
</ul>
</li>
<li><p>RestfulTool</p>
<ul>
<li>描述：辅助 web 开发的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li>
</ul>
</li>
<li><p>Multirun</p>
<ul>
<li>描述：同时启动多应用</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7248-multirun">https://plugins.jetbrains.com/plugin/7248-multirun</a></li>
</ul>
</li>
</ul>
<h4 id="扩展增强类"><a href="#扩展增强类" class="headerlink" title="扩展增强类"></a>扩展增强类</h4><ul>
<li>Free Mybatis Plugin<ul>
<li>描述：MyBatis 增强插件，支持 mapper &#x3D;&gt; xml 的跳转、代码生成等功能</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a></li>
</ul>
</li>
<li>MyBatis Log Plugin<ul>
<li>描述：MyBatis SQL 提取和格式化输出</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin">https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin</a></li>
</ul>
</li>
<li>Maven Helper<ul>
<li>描述：Maven 辅助插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></li>
</ul>
</li>
<li>Gradle View<ul>
<li>描述：Gradle 项目管理工具的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view">https://plugins.jetbrains.com/plugin/7150-gradle-view</a></li>
</ul>
</li>
<li>Arthas Idea<ul>
<li>描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a></li>
</ul>
</li>
<li>GitToolBox<ul>
<li>描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a></li>
</ul>
</li>
<li>BashSupport<ul>
<li>描述：支持 Bash 脚本文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">https://plugins.jetbrains.com/plugin/4230-bashsupport</a></li>
</ul>
</li>
<li>Git Flow Integration<ul>
<li>描述：Git Flow 的图形界面操作</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></li>
</ul>
</li>
<li>Gitee<ul>
<li>描述：开源中国的码云插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a></li>
</ul>
</li>
<li>Drools<ul>
<li>描述：规则引擎的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/16871-drools">https://plugins.jetbrains.com/plugin/16871-drools</a></li>
</ul>
</li>
<li>EnvFile<ul>
<li>描述：对多环境配置文件的支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7861-envfile">https://plugins.jetbrains.com/plugin/7861-envfile</a></li>
</ul>
</li>
<li>Kubernetes<ul>
<li>描述：容器管理的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10485-kubernetes">https://plugins.jetbrains.com/plugin/10485-kubernetes</a></li>
</ul>
</li>
<li>Vue.js<ul>
<li>描述：Vue.js 前端框架的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9442-vue-js">https://plugins.jetbrains.com/plugin/9442-vue-js</a></li>
</ul>
</li>
<li>Scala<ul>
<li>描述：Scala 语言的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1347-scala">https://plugins.jetbrains.com/plugin/1347-scala</a></li>
</ul>
</li>
<li>Zookeeper<ul>
<li>描述：Zookeeper 中间件的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7364-zookeeper">https://plugins.jetbrains.com/plugin/7364-zookeeper</a></li>
</ul>
</li>
<li>Jms messenger<ul>
<li>描述：对 Java 消息服务的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10949-jms-messenger">https://plugins.jetbrains.com/plugin/10949-jms-messenger</a></li>
</ul>
</li>
<li>MapStruct Support<ul>
<li>描述：对 MapStruct 对象转换的支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support">https://plugins.jetbrains.com/plugin/10036-mapstruct-support</a></li>
</ul>
</li>
<li>Big Data Tools<ul>
<li>描述：提供了 HDFS 等大数据框架的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">https://plugins.jetbrains.com/plugin/12494-big-data-tools</a></li>
</ul>
</li>
<li>CSV<ul>
<li>描述：支持 CSV 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10037-csv">https://plugins.jetbrains.com/plugin/10037-csv</a></li>
</ul>
</li>
<li>Ideolog<ul>
<li>描述：识别和格式化 log 日志文件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9746-ideolog">https://plugins.jetbrains.com/plugin/9746-ideolog</a></li>
</ul>
</li>
<li>Toml<ul>
<li>描述：支持 toml 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8195-toml">https://plugins.jetbrains.com/plugin/8195-toml</a></li>
</ul>
</li>
<li>.env files support<ul>
<li>描述：支持 .env 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">https://plugins.jetbrains.com/plugin/9525--env-files-support</a></li>
</ul>
</li>
</ul>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><strong>以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~</strong></p>
<h5 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h5><ul>
<li>JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（<a href="https://www.jetbrains.com/idea/%EF%BC%89">https://www.jetbrains.com/idea/）</a></li>
<li>Reset Jetbrains：你懂的</li>
<li>Visual Studio Code：插件化代码编辑器（<a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a></li>
<li>Sublime Text：轻量代码编辑器（<a href="https://www.sublimetext.com/%EF%BC%89">https://www.sublimetext.com/）</a></li>
<li>Navicat：数据库管理软件（<a href="https://www.navicat.com.cn/%EF%BC%89">https://www.navicat.com.cn/）</a></li>
<li>JMeter：Java 性能测试工具（<a href="https://jmeter.apache.org/%EF%BC%89">https://jmeter.apache.org/）</a></li>
<li>JVisual VM：Java 运行状态可视化工具（<a href="https://visualvm.github.io/%EF%BC%89">https://visualvm.github.io/）</a></li>
<li>XShell：SSH 连接软件（<a href="https://www.netsarang.com/zh/xshell/%EF%BC%89">https://www.netsarang.com/zh/xshell/）</a></li>
<li>XFtp：FTP 连接软件（<a href="https://www.netsarang.com/zh/xftp/%EF%BC%89">https://www.netsarang.com/zh/xftp/）</a></li>
<li>Redis Desktop Manager：Redis 可视化管理工具（<a href="https://github.com/uglide/RedisDesktopManager%EF%BC%89">https://github.com/uglide/RedisDesktopManager）</a></li>
<li>Postman：接口测试工具（<a href="https://www.postman.com/%EF%BC%89">https://www.postman.com/）</a></li>
<li>VMware：虚拟机软件（<a href="https://www.vmware.com/%EF%BC%89">https://www.vmware.com/）</a></li>
<li>Chocolatey：Windows 软件包管理器（<a href="https://chocolatey.org/%EF%BC%89">https://chocolatey.org/）</a></li>
<li>Typora：写文档软件（<a href="https://typora.io/%EF%BC%89">https://typora.io/）</a></li>
</ul>
<h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><ul>
<li>Ditto：强大的剪切板（<a href="https://ditto-cp.sourceforge.io/%EF%BC%89">https://ditto-cp.sourceforge.io/）</a></li>
<li>uTools：插件化的效率工具（<a href="https://u.tools/%EF%BC%89">https://u.tools/）</a></li>
<li>XMind：思维导图软件（<a href="https://www.xmind.cn/%EF%BC%89">https://www.xmind.cn/）</a></li>
<li>Qdir：Windows 多窗口管理器（<a href="https://q-dir.en.softonic.com/%EF%BC%89">https://q-dir.en.softonic.com/）</a></li>
</ul>
<h3 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h3><h4 id="电商秒杀"><a href="#电商秒杀" class="headerlink" title="电商秒杀"></a>电商秒杀</h4><ul>
<li><p>天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a></p>
</li>
<li><p>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></p>
</li>
<li><p>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></p>
</li>
<li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p>
</li>
<li><p>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></p>
</li>
<li><p>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p>
</li>
<li><p>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</p>
</li>
<li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p>
</li>
<li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p>
</li>
<li><p>onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a> （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</p>
</li>
<li><p>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （又一个小商城，litemall &#x3D; Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</p>
</li>
<li><p>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</p>
</li>
<li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p>
</li>
<li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p>
</li>
</ul>
<h4 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h4><ul>
<li><p><a href="https://github.com/langhsu/mblog">Mblog</a>：开源 Java 博客系统</p>
</li>
<li><p><a href="https://github.com/halo-dev/halo">halo</a>：一个优秀的开源博客发布应用</p>
</li>
<li><p><a href="https://github.com/Qbian61/forum-java">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛&#x2F;问答&#x2F;BBS&#x2F;社交网络&#x2F;博客）系统平台</p>
</li>
<li><p><a href="https://github.com/lenve/vhr">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</p>
</li>
<li><p><a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</p>
</li>
<li><p><a href="https://github.com/codedrinker/community">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL&#x2F;H2、Bootstrap</p>
</li>
<li><p><a href="https://github.com/yourkevin/NiterForum">NiterForum</a>：尼特社区-NiterForum-一个论坛&#x2F;社区程序。后端Springboot&#x2F;MyBatis&#x2F;Maven&#x2F;MySQL，前端Thymeleaf&#x2F;Layui。可供初学者，学习、交流使用。</p>
</li>
<li><p><a href="https://github.com/lenve/VBlog">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!</p>
</li>
<li><p><a href="https://github.com/damoqiongqiu/NiceFish">NiceFish</a>：SpringBoot&#x2F;SpringCloud 前后端分离项目</p>
</li>
<li><p><a href="https://github.com/ZHENFENG13/My-Blog">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</p>
</li>
<li><p><a href="https://github.com/ZHENFENG13/My-Blog-layui">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</p>
</li>
<li><p><a href="https://github.com/88250/symphony">symphony</a>：Java 实现的现代化社区</p>
</li>
</ul>
<h4 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h4><ul>
<li><p><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</p>
</li>
<li><p><a href="https://github.com/tomsun28/bootshiro">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</p>
</li>
<li><p><a href="https://github.com/72crm/72crm-java">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统</p>
</li>
<li><p><a href="https://github.com/elunez/eladmin">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统</p>
</li>
<li><p><a href="https://gitee.com/log4j/pig">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</p>
</li>
<li><p><a href="https://github.com/wuyouzhuguli/FEBS-Shiro">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</p>
</li>
<li><p><a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理</p>
</li>
<li><p><a href="https://github.com/ZeroWdd/studentmanager">studentmanager</a>：基于springboot+mybatis学生管理系统</p>
</li>
<li><p><a href="https://github.com/jishenghua/jshERP">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</p>
</li>
<li><p><a href="https://github.com/misterchaos/HotelSystem">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</p>
</li>
</ul>
<h4 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h4><ul>
<li><a href="https://github.com/2014shijina2014/open-capacity-platform">open-capacity-platform</a>：微服务能力开发平台</li>
<li><a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！</li>
</ul>
<h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><ul>
<li><p><a href="https://github.com/mindskip/xzs">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统</p>
</li>
<li><p><a href="https://github.com/Jackson0714/PassJava-Platform">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统</p>
</li>
<li><p><a href="https://github.com/kekingcn/kkFileView">kkFileView</a>：使用spring boot打造文件文档在线预览项目</p>
</li>
<li><p><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器</p>
</li>
<li><p><a href="https://github.com/373675032/moti-cloud">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</p>
</li>
<li><p><a href="https://github.com/qiurunze123/threadandjuc">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</p>
</li>
<li><p><a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载</p>
</li>
<li><p><a href="https://github.com/sfturing/hosp_order">hosp_order</a>：医院预约挂号系统，基于 SSM 框架</p>
</li>
<li><p><a href="https://how2j.cn/module/170.html">趋势投资 SpringCloud</a></p>
</li>
<li><p><a href="https://how2j.cn/module/176.html">DiyTomcat</a></p>
</li>
</ul>
<h2 id="阶段-6：Java-高级"><a href="#阶段-6：Java-高级" class="headerlink" title="阶段 6：Java 高级"></a>阶段 6：Java 高级</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p>
<p>已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。</p>
<h3 id="🌖-并发编程（21-天）"><a href="#🌖-并发编程（21-天）" class="headerlink" title="🌖 并发编程（21 天）"></a>🌖 并发编程（21 天）</h3><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p>
<p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p>
<h4 id="知识-21"><a href="#知识-21" class="headerlink" title="知识"></a>知识</h4><ul>
<li>线程和进程</li>
<li>线程状态</li>
<li>并行和并发</li>
<li>同步和异步</li>
<li>Synchronized</li>
<li>Volatile 关键字</li>
<li>Lock 锁</li>
<li>死锁</li>
<li>可重入锁</li>
<li>线程安全</li>
<li>线程池</li>
<li>JUC 的使用</li>
<li>AQS</li>
<li>Fork Join</li>
<li>CAS</li>
</ul>
<h4 id="学习建议-23"><a href="#学习建议-23" class="headerlink" title="学习建议"></a>学习建议</h4><p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。</p>
<h4 id="经典面试题-16"><a href="#经典面试题-16" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>volatile 关键字的作用</li>
<li>使用线程池有哪些好处？</li>
<li>线程池参数如何设置？</li>
<li>什么是线程安全问题，如何解决？</li>
<li>介绍 synchronized 的锁升级机制</li>
<li>CopyOnWriteArrayList 适用于哪种场景？</li>
</ol>
<h4 id="资源-22"><a href="#资源-22" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a> （特点是短、精、新）</li>
<li>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a> （讲的很细、全面深入）</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>⭐《Java并发编程实战》（国外的经典）</li>
<li>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</li>
</ul>
</li>
<li><p>项目</p>
<ul>
<li>⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-JVM（30-天）"><a href="#🌖-JVM（30-天）" class="headerlink" title="🌖 JVM（30 天）"></a>🌖 JVM（30 天）</h3><p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p>
<p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p>
<p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p>
<h4 id="知识-22"><a href="#知识-22" class="headerlink" title="知识"></a>知识</h4><ul>
<li>JVM 内存结构</li>
<li>JVM 生命周期</li>
<li>主流虚拟机</li>
<li>Java 代码执行流程</li>
<li>类加载<ul>
<li>类加载器</li>
<li>类加载过程</li>
<li>双亲委派机制</li>
</ul>
</li>
<li>垃圾回收<ul>
<li>垃圾回收器</li>
<li>垃圾回收策略</li>
<li>垃圾回收算法</li>
<li>StopTheWorld</li>
</ul>
</li>
<li>字节码</li>
<li>内存分配和回收</li>
<li>JVM 性能调优<ul>
<li>性能分析方法</li>
<li>常用工具</li>
<li>参数设置</li>
</ul>
</li>
<li>Java 探针</li>
<li>线上故障分析</li>
</ul>
<h4 id="学习建议-24"><a href="#学习建议-24" class="headerlink" title="学习建议"></a>学习建议</h4><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p>
<p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p>
<p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p>
<h4 id="经典面试题-17"><a href="#经典面试题-17" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>介绍 JVM 的内存模型？</li>
<li>JVM 内存为什么要分代？</li>
<li>介绍一次完整的 GC 流程</li>
<li>介绍双亲委派模型，为什么需要它？</li>
</ol>
<h4 id="资源-23"><a href="#资源-23" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a> （讲得相当全面！附有实操）</li>
<li>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a> （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）</li>
</ul>
</li>
<li>项目<ul>
<li>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></li>
</ul>
</li>
<li>实战<ul>
<li>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a></li>
</ul>
</li>
<li>工具<ul>
<li>Arthas 开源 Java 诊断工具：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li>
</ul>
</li>
</ul>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><h4 id="🌖-分布式"><a href="#🌖-分布式" class="headerlink" title="🌖 分布式"></a>🌖 分布式</h4><ul>
<li>分布式理论<ul>
<li>CAP</li>
<li>BASE</li>
</ul>
</li>
<li>分布式缓存<ul>
<li>Redis</li>
<li>Memcached</li>
<li>Etcd</li>
</ul>
</li>
<li>一致性算法<ul>
<li>Raft</li>
<li>Paxos</li>
<li>一致性哈希</li>
</ul>
</li>
<li>分布式事务<ul>
<li>解决方案<ul>
<li>2PC</li>
<li>3PC</li>
<li>TCC</li>
<li>本地消息表</li>
<li>MQ 事务消息</li>
<li>最大努力通知</li>
</ul>
</li>
<li>LCN 分布式事务框架：<a href="https://github.com/codingapi/tx-lcn">https://github.com/codingapi/tx-lcn</a></li>
</ul>
</li>
<li>分布式 id 生成<ul>
<li>Leaf 分布式 id 生成服务：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></li>
</ul>
</li>
<li>分布式任务调度<ul>
<li>XXL-JOB 调度平台：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></li>
<li>elastic-job：<a href="https://gitee.com/elasticjob/elastic-job">https://gitee.com/elasticjob/elastic-job</a></li>
</ul>
</li>
<li>分布式服务调用<ul>
<li>trpc</li>
</ul>
</li>
<li>分布式存储<ul>
<li>HDFS</li>
<li>Ceph</li>
</ul>
</li>
<li>分布式数据库<ul>
<li>TiDB</li>
<li>OceanBase</li>
</ul>
</li>
<li>分布式文件系统<ul>
<li>HDFS</li>
</ul>
</li>
<li>分布式协调<ul>
<li>Zookeeper</li>
</ul>
</li>
<li>分布式监控<ul>
<li>Prometheus</li>
<li>Zabbix</li>
</ul>
</li>
<li>分布式消息队列<ul>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>Apache Pulsar</li>
</ul>
</li>
<li>分布式日志收集<ul>
<li>Elastic Stack</li>
<li>Loki</li>
</ul>
</li>
<li>分布式搜索引擎<ul>
<li>Elasticsearch</li>
</ul>
</li>
<li>分布式链路追踪<ul>
<li>Apache SkyWalking</li>
</ul>
</li>
<li>分布式配置中心<ul>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
</ul>
<h4 id="🌗-高可用"><a href="#🌗-高可用" class="headerlink" title="🌗 高可用"></a>🌗 高可用</h4><ul>
<li>限流</li>
<li>降级熔断</li>
<li>冷备</li>
<li>双机热备</li>
<li>同城双活</li>
<li>异地双活</li>
<li>异地多活</li>
<li>容灾备份</li>
</ul>
<h4 id="🌗-高并发"><a href="#🌗-高并发" class="headerlink" title="🌗 高并发"></a>🌗 高并发</h4><ul>
<li>数据库<ul>
<li>分库分表<ul>
<li>MyCat 中间件</li>
<li>Apache ShardingSphere 中间件</li>
</ul>
</li>
<li>读写分离</li>
</ul>
</li>
<li>缓存<ul>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>缓存穿透</li>
</ul>
</li>
<li>负载均衡<ul>
<li>负载均衡算法</li>
<li>软硬件负载均衡（2、3、4、7 层）</li>
</ul>
</li>
</ul>
<h4 id="🌘-服务网格"><a href="#🌘-服务网格" class="headerlink" title="🌘 服务网格"></a>🌘 服务网格</h4><p>服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。</p>
<h5 id="知识-23"><a href="#知识-23" class="headerlink" title="知识"></a>知识</h5><ul>
<li>Istio<ul>
<li>流量管理</li>
<li>安全性</li>
<li>可观测性</li>
</ul>
</li>
<li>Envoy（开源的边缘和服务代理）</li>
</ul>
<h5 id="资源-24"><a href="#资源-24" class="headerlink" title="资源"></a>资源</h5><ul>
<li>资料大全：<a href="https://www.servicemesher.com/awesome-servicemesh/">https://www.servicemesher.com/awesome-servicemesh/</a></li>
<li>istio 官方文档：<a href="https://preliminary.istio.io/latest/zh">https://preliminary.istio.io/latest/zh</a></li>
<li>istio 视频教程：<a href="https://www.bilibili.com/video/BV1Lf4y1x7j8">https://www.bilibili.com/video/BV1Lf4y1x7j8</a></li>
<li>在线体验 istio：<a href="https://katacoda.com/courses/istio/">https://katacoda.com/courses/istio/</a></li>
</ul>
<h4 id="🌘-DDD-领域驱动设计"><a href="#🌘-DDD-领域驱动设计" class="headerlink" title="🌘 DDD 领域驱动设计"></a>🌘 DDD 领域驱动设计</h4><p>将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。</p>
<h5 id="知识-24"><a href="#知识-24" class="headerlink" title="知识"></a>知识</h5><ul>
<li>DDD 的优势</li>
<li>DDD 的适用场景</li>
<li>DDD 核心概念<ul>
<li>领域模型分类：失血、贫血、充血、涨血</li>
<li>子域划分：核心域、通用域、支撑域</li>
<li>限界上下文</li>
<li>实体和值对象</li>
<li>聚合设计</li>
<li>领域事件</li>
</ul>
</li>
<li>DDD 实践</li>
</ul>
<h5 id="资源-25"><a href="#资源-25" class="headerlink" title="资源"></a>资源</h5><ul>
<li>DDD 入门：<a href="https://juejin.cn/post/7004002483601145863">https://juejin.cn/post/7004002483601145863</a></li>
<li>DDD 编码实践：<a href="https://juejin.cn/post/6844903903104860174">https://juejin.cn/post/6844903903104860174</a></li>
<li>DDD 实践教程：<a href="https://www.bilibili.com/video/BV1Y341167Xp">https://www.bilibili.com/video/BV1Y341167Xp</a></li>
</ul>
<h4 id="🌘-其他"><a href="#🌘-其他" class="headerlink" title="🌘 其他"></a>🌘 其他</h4><ul>
<li>Sidecar</li>
<li>Serverless</li>
<li>云原生</li>
</ul>
<h4 id="学习建议-25"><a href="#学习建议-25" class="headerlink" title="学习建议"></a>学习建议</h4><p>架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。</p>
<p>还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。</p>
<h3 id="🌘-其他技术"><a href="#🌘-其他技术" class="headerlink" title="🌘 其他技术"></a>🌘 其他技术</h3><ul>
<li>热数据探测技术：京东 HotKey</li>
<li>数据库流水订阅：阿里 Canal</li>
<li>监控告警</li>
<li>应用安全</li>
<li>故障演练</li>
<li>流量回放</li>
</ul>
<h2 id="阶段-7：Java-求职"><a href="#阶段-7：Java-求职" class="headerlink" title="阶段 7：Java 求职"></a>阶段 7：Java 求职</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>找到好工作</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol>
<li>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</li>
<li>雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a></li>
<li>多读面经，坚持刷算法</li>
<li>多参与面试，持续复盘总结</li>
</ol>
<h3 id="资源-26"><a href="#资源-26" class="headerlink" title="资源"></a>资源</h3><h4 id="校招岗位"><a href="#校招岗位" class="headerlink" title="校招岗位"></a>校招岗位</h4><ul>
<li>⭐ 牛客求职校招版：<a href="https://www.nowcoder.com/recommend/campus">https://www.nowcoder.com/recommend/campus</a></li>
<li>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></li>
<li>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=101&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2</a></li>
<li>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=137&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2</a></li>
<li>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=105&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2</a></li>
<li>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2</a></li>
<li>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></li>
</ul>
<h4 id="社招岗位"><a href="#社招岗位" class="headerlink" title="社招岗位"></a>社招岗位</h4><ul>
<li>⭐ 牛客求职社招版：<a href="https://www.nowcoder.com/recommend/fulltime">https://www.nowcoder.com/recommend/fulltime</a></li>
<li>阿里社招：<a href="https://job.alibaba.com/zhaopin/positionList.htm">https://job.alibaba.com/zhaopin/positionList.htm</a></li>
<li>腾讯社招：<a href="https://careers.tencent.com/search.html">https://careers.tencent.com/search.html</a></li>
</ul>
<h4 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h4><ul>
<li>⭐ 牛客实习广场：<a href="https://nowpick.nowcoder.com/w/intern/center">https://nowpick.nowcoder.com/w/intern/center</a></li>
<li>实习僧：<a href="https://www.shixiseng.com/">https://www.shixiseng.com/</a></li>
</ul>
<h4 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h4><ul>
<li>牛客内推：<a href="https://www.nowcoder.com/discuss/referral/index">https://www.nowcoder.com/discuss/referral/index</a></li>
</ul>
<h4 id="鱼皮经历"><a href="#鱼皮经历" class="headerlink" title="鱼皮经历"></a>鱼皮经历</h4><ul>
<li>从 0 开始的编程学习进大厂经历<ul>
<li>⭐ 我学计算机的四年，共勉：<a href="https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg">https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg</a></li>
</ul>
</li>
<li>实习经历<ul>
<li><p>⭐ 我的第一份实习：<a href="https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw">https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw</a></p>
</li>
<li><p>⭐ 我的第二份实习，字节跳动：<a href="https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw">https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><ul>
<li>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></li>
<li>⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a></li>
<li>⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a></li>
<li>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></li>
</ul>
<h4 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h4><ul>
<li><p>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></p>
</li>
<li><p>秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：<a href="https://www.nowcoder.com/discuss/327041">https://www.nowcoder.com/discuss/327041</a></p>
</li>
<li><p>被疫情逼得gap year的完全菜鸡的春招之路。：<a href="https://www.nowcoder.com/discuss/427812">https://www.nowcoder.com/discuss/427812</a></p>
</li>
<li><p>谨以此文纪念2019年春招：<a href="https://www.nowcoder.com/discuss/181212">https://www.nowcoder.com/discuss/181212</a></p>
</li>
<li><p>2019秋招经验谈：<a href="https://www.nowcoder.com/discuss/122463">https://www.nowcoder.com/discuss/122463</a></p>
</li>
<li><p>秋招心得：<a href="https://www.nowcoder.com/discuss/317888">https://www.nowcoder.com/discuss/317888</a></p>
</li>
<li><p>非科班本科菜鸡投的337家(Java后台)：<a href="https://www.nowcoder.com/discuss/133333">https://www.nowcoder.com/discuss/133333</a></p>
</li>
<li><p>2018 这一年：<a href="https://www.nowcoder.com/discuss/137593">https://www.nowcoder.com/discuss/137593</a></p>
</li>
<li><p>双非的秋招，感谢牛客：<a href="https://www.nowcoder.com/discuss/142181">https://www.nowcoder.com/discuss/142181</a></p>
</li>
<li><p>二本本科Java上岸(滴滴京东58)2019秋招心得+面经：<a href="https://www.nowcoder.com/discuss/333912">https://www.nowcoder.com/discuss/333912</a></p>
</li>
<li><p>碎碎念流水账特别长 of 自己的 Java 秋招：<a href="https://www.nowcoder.com/discuss/354154">https://www.nowcoder.com/discuss/354154</a></p>
</li>
<li><p>秋招之路：个人历程以及面经总结：<a href="https://www.nowcoder.com/discuss/344311">https://www.nowcoder.com/discuss/344311</a></p>
</li>
<li><p>【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：<a href="https://www.nowcoder.com/discuss/352030">https://www.nowcoder.com/discuss/352030</a></p>
</li>
<li><p>阿里11面+EMC+网易+美团面经：<a href="https://www.nowcoder.com/discuss/105302">https://www.nowcoder.com/discuss/105302</a></p>
</li>
<li><p>2018秋招阿里巴巴java笔试试题：<a href="https://www.nowcoder.com/discuss/67379">https://www.nowcoder.com/discuss/67379</a></p>
</li>
<li><p>我的秋招经验分享（已拿BAT头条网易）：<a href="https://www.nowcoder.com/discuss/117071">https://www.nowcoder.com/discuss/117071</a></p>
</li>
<li><p>20届的阿里 头条 网易  滴滴 百度 小米等Java面经：<a href="https://www.nowcoder.com/discuss/68289">https://www.nowcoder.com/discuss/68289</a></p>
</li>
<li><p>拿了5个offer，回馈牛友发一波面经（长文详细）：<a href="https://www.nowcoder.com/discuss/79051">https://www.nowcoder.com/discuss/79051</a></p>
</li>
<li><p>【总结】零基础学习一年拿到BAT三家offer：<a href="https://www.nowcoder.com/discuss/188241">https://www.nowcoder.com/discuss/188241</a></p>
</li>
<li><p>本科生秋招经验总结帖：<a href="https://www.nowcoder.com/discuss/296586">https://www.nowcoder.com/discuss/296586</a></p>
</li>
<li><p>双非渣硕校招总结+Java面经（网易阿里百度等）：<a href="https://www.nowcoder.com/discuss/134850">https://www.nowcoder.com/discuss/134850</a></p>
</li>
<li><p>2018秋招笔试科大讯飞java笔试试题：<a href="https://www.nowcoder.com/discuss/67684">https://www.nowcoder.com/discuss/67684</a></p>
</li>
<li><p>头条后台研发面经（共三面）：<a href="https://www.nowcoder.com/discuss/94233">https://www.nowcoder.com/discuss/94233</a></p>
</li>
<li><p>一点点小经验和几家Java面经：<a href="https://www.nowcoder.com/discuss/138434">https://www.nowcoder.com/discuss/138434</a></p>
</li>
<li><p>感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：<a href="https://www.nowcoder.com/discuss/101712">https://www.nowcoder.com/discuss/101712</a></p>
</li>
<li><p>非科班水硕的春招实习总结- Java 后台开发：<a href="https://www.nowcoder.com/discuss/186528">https://www.nowcoder.com/discuss/186528</a></p>
</li>
<li><p>十面阿里，七面头条，六个Offer，春招结束：<a href="https://www.nowcoder.com/discuss/80156">https://www.nowcoder.com/discuss/80156</a></p>
</li>
<li><p>成功上岸，最后一波回馈：<a href="https://www.nowcoder.com/discuss/176434">https://www.nowcoder.com/discuss/176434</a></p>
</li>
<li><p>【Java后台开发面经】阿里|网易|头条|腾讯|华为：<a href="https://www.nowcoder.com/discuss/108655">https://www.nowcoder.com/discuss/108655</a></p>
</li>
<li><p>三跨学生的面经（头条、拼多多、华为、vivo）：<a href="https://www.nowcoder.com/discuss/195640">https://www.nowcoder.com/discuss/195640</a></p>
</li>
</ul>
<h4 id="面试题解"><a href="#面试题解" class="headerlink" title="面试题解"></a>面试题解</h4><ul>
<li>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a> （密码：lkw1）</li>
<li>牛客网 Java开发校招面试考点汇总（附面试题和答案）：<a href="https://www.nowcoder.com/discuss/161991">https://www.nowcoder.com/discuss/161991</a></li>
<li>50w字+的技术类校招面试题汇总（附答案+考点）：<a href="https://www.nowcoder.com/discuss/164726">https://www.nowcoder.com/discuss/164726</a></li>
<li>硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：<a href="https://www.nowcoder.com/discuss/212783">https://www.nowcoder.com/discuss/212783</a></li>
</ul>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul>
<li><p>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p>
</li>
<li><p>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p>
</li>
</ul>
<h2 id="阶段-8：持续学习"><a href="#阶段-8：持续学习" class="headerlink" title="阶段 8：持续学习"></a>阶段 8：持续学习</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong> 和 <strong>不可替代性</strong> ，学无止境！</p>
<h3 id="学习建议-26"><a href="#学习建议-26" class="headerlink" title="学习建议"></a>学习建议</h3><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p>
<h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><h4 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h4><ul>
<li>Spring</li>
<li>SpringBoot</li>
<li>SpringMVC</li>
<li>MyBatis</li>
<li>Netty</li>
<li>Dubbo</li>
<li>SpringCloud</li>
</ul>
<h4 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h4><ul>
<li>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></li>
<li>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></li>
<li>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></li>
<li>《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></li>
<li>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a></li>
<li>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a></li>
<li>《数据库系统概论》：<a href="https://www.bilibili.com/video/BV1G54y1d7ZK">https://www.bilibili.com/video/BV1G54y1d7ZK</a></li>
</ul>
<h4 id="数据库-x2F-中间件-x2F-分布式"><a href="#数据库-x2F-中间件-x2F-分布式" class="headerlink" title="数据库 &#x2F; 中间件 &#x2F; 分布式"></a>数据库 &#x2F; 中间件 &#x2F; 分布式</h4><ul>
<li>数据库<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
</ul>
</li>
<li>缓存<ul>
<li>Redis</li>
</ul>
</li>
<li>队列<ul>
<li>Apache Kafka</li>
<li>Apache Pulsar</li>
</ul>
</li>
<li>搜索引擎<ul>
<li>Elastic Stack<ul>
<li>Elasticsearch</li>
<li>logstash</li>
<li>kibana</li>
<li>beats</li>
</ul>
</li>
</ul>
</li>
<li>容器<ul>
<li>Docker</li>
<li>K8S</li>
</ul>
</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>广告系统</li>
<li>电商系统</li>
<li>搜索系统</li>
<li>支付转账</li>
<li>游戏后台</li>
<li>即时通讯</li>
<li>社交系统</li>
<li>CMS 系统</li>
<li>ERP 系统</li>
<li>OA 系统</li>
<li>代码生成</li>
<li>权限管理</li>
<li>秒杀活动</li>
</ul>
<h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><p>同阶段 6 架构设计部分</p>
<h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><ul>
<li>5V 特点</li>
<li>Hadoop</li>
<li>HDFS</li>
<li>MapReduce</li>
<li>Spark</li>
<li>Flink</li>
<li>Storm</li>
<li>Hive</li>
<li>HBase</li>
<li>Druid</li>
<li>Kylin</li>
<li>Pig</li>
<li>Mahout</li>
</ul>
<h4 id="前沿技术"><a href="#前沿技术" class="headerlink" title="前沿技术"></a>前沿技术</h4><ul>
<li>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a><ul>
<li>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li>
</ul>
</li>
<li>服务网格：<a href="https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh">https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh</a><ul>
<li>istio：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a></li>
</ul>
</li>
<li>GraalVM：<a href="https://juejin.cn/post/6850418120570437646">https://juejin.cn/post/6850418120570437646</a> （高性能的通用虚拟机）<ul>
<li>官网：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li>
</ul>
</li>
<li>ZGC：<a href="https://juejin.cn/post/6859276583656980493">https://juejin.cn/post/6859276583656980493</a> （新一代垃圾回收器）<ul>
<li>官网：<a href="http://openjdk.java.net/projects/zgc/">http://openjdk.java.net/projects/zgc/</a></li>
</ul>
</li>
</ul>
<h3 id="自学-Java-专题资源"><a href="#自学-Java-专题资源" class="headerlink" title="自学 Java 专题资源"></a>自学 Java 专题资源</h3><ul>
<li>⭐ GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></li>
<li>⭐ GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></li>
<li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a> （解决问题必备）</li>
<li>⭐ 掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></li>
<li>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></li>
<li>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></li>
<li>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="程序员重要能力"><a href="#程序员重要能力" class="headerlink" title="程序员重要能力"></a>程序员重要能力</h3><p>想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！</p>
<ol>
<li><p>团队协作能力</p>
</li>
<li><p>高效沟通能力</p>
</li>
<li><p>需求分析能力</p>
</li>
<li><p>架构设计能力</p>
</li>
<li><p>抽象复用能力</p>
</li>
<li><p>独立创造能力</p>
</li>
<li><p>问题解决能力</p>
</li>
<li><p>归纳总结能力</p>
</li>
<li><p>自主学习能力</p>
</li>
<li><p>工具利用能力</p>
</li>
<li><p>高效编码能力</p>
</li>
<li><p>信息检索能力</p>
</li>
<li><p>开源建设能力</p>
</li>
<li><p>源码阅读能力</p>
</li>
<li><p>自测审查能力</p>
</li>
<li><p>文档编写能力</p>
</li>
<li><p>知识表达能力</p>
</li>
<li><p>绘图描述能力</p>
</li>
<li><p>兴趣驱动（长期学习能力）</p>
</li>
<li><p>保持好奇心</p>
</li>
<li><p>其他（狗头）</p>
<ul>
<li><p>复制粘贴能力</p>
</li>
<li><p>打架能力</p>
</li>
<li><p>PPT 制作能力</p>
</li>
</ul>
</li>
</ol>
<h3 id="编程误区"><a href="#编程误区" class="headerlink" title="编程误区"></a>编程误区</h3><ol>
<li>我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己）</li>
<li>忽视基础，急于求成 ❌（勿以浮沙筑高台）</li>
<li>数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升）</li>
<li>编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行）</li>
<li>每行代码都要追求完美 ❌（何为完美？每个人的定义不同）</li>
<li>用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹）</li>
<li>我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长）</li>
<li>跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &gt; 2，切勿闭门造车，不过也要找到合适的同学去交流）</li>
<li>做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？）</li>
<li>遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长）</li>
<li>遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》）</li>
<li>花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵）</li>
<li>只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的）</li>
<li>单元测试不重要 ❌（一棍打死）</li>
<li>写文档不重要 ❌（一棍打死）</li>
<li>和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野）</li>
<li>收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？）</li>
<li>不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考）</li>
</ol>
<h3 id="高效法则"><a href="#高效法则" class="headerlink" title="高效法则"></a>高效法则</h3><ol>
<li>不要过分追求完美，完成比完美更重要。</li>
<li>有现成的代码，就不要自己写，避免重复劳动（学习除外）。</li>
<li>学会使用软件及快捷键来提升自己的编码效率。</li>
<li>做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。</li>
<li>将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。</li>
<li>养成好的作息习惯，找到自己适合工作的黄金时间。</li>
<li>记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。</li>
<li>积累属于自己的工具库，配合搜索软件实现随用随取。</li>
<li>多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。</li>
<li>找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。</li>
<li>做事高效，离不开经验的积累，因此要多写代码、多做项目。</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>按照这份路线学习，每天要学多少个小时，总共要学多久？</p>
<p>回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。</p>
</li>
<li><p>这份路线上推荐的资源，鱼皮都看完了么？</p>
<p>回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。</p>
</li>
<li><p>我学到这份路线的哪个位置，可以找工作？</p>
<p>回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。</p>
</li>
<li><p>学完这份路线就能进大厂么？</p>
<p>回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！</p>
</li>
<li><p>我可以相信你么？</p>
<p>回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！</p>
</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p>
<p>以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 <strong>三连</strong> 支持下。</p>
<p>我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~</p>
]]></content>
      <categories>
        <category>学习路线</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>路线</tag>
      </tags>
  </entry>
  <entry>
    <title>Java核心笔记</title>
    <url>/post/b4562167.html</url>
    <content><![CDATA[<h1 id="Java核心笔记"><a href="#Java核心笔记" class="headerlink" title="Java核心笔记"></a>Java核心笔记</h1><p>[TOC]</p>
<h1 id="0-导论"><a href="#0-导论" class="headerlink" title="0.导论"></a>0.导论</h1><h2 id="标柱注释"><a href="#标柱注释" class="headerlink" title="标柱注释"></a>标柱注释</h2><ul>
<li><strong>单独重点加粗</strong></li>
<li><u>单独背诵下划线</u></li>
<li>⭐️重点</li>
<li>⭐️⭐️重点的重点</li>
</ul>
<h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><ul>
<li>需求——&gt;知识点——&gt;基本原理语法——&gt;快速入门(基本程序)——&gt;技术细节</li>
</ul>
<h1 id="1-java概述"><a href="#1-java概述" class="headerlink" title="1 java概述"></a>1 java概述</h1><h2 id="1-1转义字符"><a href="#1-1转义字符" class="headerlink" title="1.1转义字符"></a>1.1转义字符</h2><ul>
<li>\t  一个制表位，实现对齐功能</li>
<li>\n  换行</li>
<li>\\  一个\</li>
<li>\“  一个” </li>
<li>\r  回车</li>
</ul>
<h2 id="1-2注释"><a href="#1-2注释" class="headerlink" title="1.2注释"></a>1.2注释</h2><ul>
<li><p>单行注释:  &#x2F;&#x2F;注释文字</p>
</li>
<li><p>多行注释:  &#x2F;*注释文字*&#x2F;</p>
</li>
<li><p>文档注释:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-3代码规范⭐️"><a href="#1-3代码规范⭐️" class="headerlink" title="1.3代码规范⭐️"></a>1.3代码规范⭐️</h2><ul>
<li>类、方法的注释，要以 javadoc 的方式来写</li>
<li>注释详细，着重告述读者为什么这样写，如何修改，注意什么问题等</li>
<li>使用tab、shift + tab</li>
<li>运算符和 &#x3D; 两边习惯性各加一个空格</li>
<li>源文件使用utf-8编码</li>
<li>行宽度不要超过80字符</li>
<li>代码编写次行风格和行尾风格</li>
</ul>
<h2 id="1-4-JDK-JRE⭐️"><a href="#1-4-JDK-JRE⭐️" class="headerlink" title="1.4  JDK  JRE⭐️"></a>1.4  JDK  JRE⭐️</h2><ul>
<li>JDK(java开发工具包)</li>
<li>JDK &#x3D; JRE + java开发工具</li>
<li>JRE &#x3D; JVM + Java的核心类库</li>
<li>JVM(java虚拟机)</li>
</ul>
<h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><ul>
<li><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>；</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同]</li>
<li>该区域有自己的名称[变量名]和类型[数据类型]</li>
<li>变量必须先声明，后使用，即有顺序</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li><strong>变量在同一个作用域内不能重名</strong></li>
<li>变量&#x3D;变量名＋值+数据类型</li>
</ol>
</li>
</ul>
<h2 id="2-2-基本数据类型⭐️"><a href="#2-2-基本数据类型⭐️" class="headerlink" title="2.2 基本数据类型⭐️"></a>2.2 基本数据类型⭐️</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%883.18.09.png" alt="截屏2022-04-16 下午3.18.09"></p>
<p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-09-01%2010.57.09.jpg" alt="截屏2022-09-01 10.57.09"></p>
<ul>
<li><h4 id="整数类型-byte-1-short-2-int-4-long-8"><a href="#整数类型-byte-1-short-2-int-4-long-8" class="headerlink" title="整数类型  (byte [1]  short[2]  int[4]  long [8])"></a>整数类型  (byte [1]  short[2]  int[4]  long [8])</h4><ol>
<li>Java的整型常量(具体值)<strong>默认为 int 型</strong>，声明long型常量须后加‘l’或‘L’</li>
<li>java程序中变量常声明为int型，除非不足以表示大数，才使用long</li>
<li>bit: 计算机中的最小存储单位，byte：算机中基本存储单元，1byte &#x3D; 8 bit</li>
</ol>
</li>
<li><h4 id="浮点-小数-类型-float-4-double-8"><a href="#浮点-小数-类型-float-4-double-8" class="headerlink" title="浮点(小数)类型 (float [4]  double [8])"></a>浮点(小数)类型 (float [4]  double [8])</h4><ol>
<li>浮点数&#x3D;符号位+指数位+尾数位</li>
<li>尾部可能丢失，造成精度损失</li>
<li>Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加’f’或’F’</li>
<li>十进制数形式：5.12    512.0f    .512(必须有小数点)<br>科学计数法形式：5.12e2    5.12E-2 </li>
<li><strong>通常情况默认使用double</strong></li>
</ol>
</li>
<li><h4 id="字符型-Char-2"><a href="#字符型-Char-2" class="headerlink" title="字符型(Char[2])"></a>字符型(Char[2])</h4><ol>
<li>使用单引号表示</li>
<li>Java中还允许使用转义字符来将其后的字符转变为特殊字符型常量</li>
<li>char的<strong>本质是一个整数</strong>，输出时是unicode码对应字符</li>
<li>char类可以进行运算</li>
</ol>
</li>
<li><h4 id="布尔型-boolean-1"><a href="#布尔型-boolean-1" class="headerlink" title="布尔型(boolean[1])"></a>布尔型(boolean[1])</h4><ol>
<li>boolean类型数据只允许取值true和false，无null</li>
<li>boolean类型占1个字节</li>
<li><strong>不可以用0或非0的整数代替false和true，与C语言不同</strong></li>
</ol>
</li>
</ul>
<h2 id="2-3-基本数据类型转化"><a href="#2-3-基本数据类型转化" class="headerlink" title="2.3 基本数据类型转化"></a>2.3 基本数据类型转化</h2><h3 id="2-3-1-自动类型转换"><a href="#2-3-1-自动类型转换" class="headerlink" title="2.3.1 自动类型转换"></a>2.3.1 自动类型转换</h3><ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="转换规则："><a href="#转换规则：" class="headerlink" title="转换规则："></a>转换规则：</h4><p><strong><u>char&lt;int&lt;long&lt;float&lt;double</u></strong></p>
<p><u>**byte&lt;short&lt;int&lt;long&lt;float&lt;double**</u></p>
</li>
<li><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li>
</ul>
<ol>
<li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，再进行计算</li>
<li>我们把精度(容量)大的数据类型赋值给精度(容量)小 的数据类型时，就会报错，反之就会进行自动类型转换。</li>
<li><strong>byte    short    char    之间不会相互转换</strong></li>
<li><strong>byte    short    char    计算是首先转换为int类型</strong></li>
<li>boolean不参与转换</li>
<li>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</li>
</ol>
<h3 id="2-3-2-强制类型转换"><a href="#2-3-2-强制类型转换" class="headerlink" title="2.3.2 强制类型转换"></a>2.3.2 强制类型转换</h3><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符()，但可能造成精度降低或溢出，格外要注意</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">8.8</span>;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li>
</ul>
<ol>
<li><p>当数据从精度  大——＞小，就需要使用到强制转换</p>
</li>
<li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="type">int</span>(<span class="number">10</span>*<span class="number">3.5</span>+<span class="number">6</span>*<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>char类型可以保存 int的常量值，但不能保存int的变量值，需要强转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">//false</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;<span class="comment">//ture</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>byte    short    char    类型在进行运算时，当做int类型处理</strong></p>
</li>
</ol>
<h2 id="2-4-基本数据类型和String类型转换"><a href="#2-4-基本数据类型和String类型转换" class="headerlink" title="2.4 基本数据类型和String类型转换"></a>2.4 基本数据类型和String类型转换</h2><ul>
<li><h4 id="基本类型转String类型"><a href="#基本类型转String类型" class="headerlink" title="基本类型转String类型"></a>基本类型转String类型</h4><p>语法：将基本类型的值  +” “</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> n2 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> n3 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="String类型转基本数据类型"><a href="#String类型转基本数据类型" class="headerlink" title="String类型转基本数据类型"></a>String类型转基本数据类型</h4><p>语法：通过基本类型的包装类调用parseXX方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> InterInt.parseInt(s5);</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> InterInt.parseDouble(s5);</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> InterInt.parseFloat(s5);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4>算术运算符是对数值类型的变量进行运算的</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%883.19.01.png" alt="截屏2022-04-16 下午3.19.01"  />

<h3 id="3-1-1-号使用"><a href="#3-1-1-号使用" class="headerlink" title="3.1.1 +号使用"></a>3.1.1 +号使用</h3><ol>
<li><p>当左右两边都是数值型时，则做加法运算</p>
</li>
<li><p>当左右两边有一方为<strong>字符串，则做拼接运算</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out，println(<span class="number">100</span> + <span class="number">98</span>): <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> +<span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+ <span class="number">100</span> +<span class="number">3</span>);<span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-1-2-号使用"><a href="#3-1-2-号使用" class="headerlink" title="3.1.2 ++号使用"></a>3.1.2 ++号使用</h3><ul>
<li><p>前＋＋和后＋+都完全等价子 i&#x3D;i+1;作为表达式使用</p>
<p>前++：++先自增后赋值</p>
<p>后++：i++先赋值后自增</p>
</li>
</ul>
<h3 id="3-1-3-号使用"><a href="#3-1-3-号使用" class="headerlink" title="3.1.3 %号使用"></a>3.1.3 %号使用</h3><ul>
<li>a % b 当a是小数时，公式 &#x3D; a - (int)a &#x2F; b * b</li>
</ul>
<h2 id="3-2-关系运算符"><a href="#3-2-关系运算符" class="headerlink" title="3.2 关系运算符"></a>3.2 关系运算符</h2><ul>
<li>关系运算符的结果都是 boolean 型</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%884.09.29.png" alt="截屏2022-04-16 下午4.09.29"  />

<h2 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h2><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4>用于连接多个条件(多个关系表达式)，结果是boolean</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%884.20.34.png" alt="截屏2022-04-16 下午4.20.34" style="zoom:;" />

<h3 id="3-3-1-amp-amp-和-amp-基本规则"><a href="#3-3-1-amp-amp-和-amp-基本规则" class="headerlink" title="3.3.1  &amp;&amp;和&amp;基本规则"></a>3.3.1  &amp;&amp;和&amp;基本规则</h3><ul>
<li><h4 id="amp-amp-短路与"><a href="#amp-amp-短路与" class="headerlink" title="&amp;&amp; 短路与:"></a>&amp;&amp; 短路与:</h4><p>如果第一个条件为 false ，后面的条件不再判断</p>
</li>
<li><h4 id="amp-逻辑与"><a href="#amp-逻辑与" class="headerlink" title="&amp; 逻辑与:"></a>&amp; 逻辑与:</h4><p>如果第一个条件为 false ，后面的条件仍然判断</p>
</li>
</ul>
<h3 id="3-3-2-和-基本规则"><a href="#3-3-2-和-基本规则" class="headerlink" title="3.3.2  ||和|基本规则"></a>3.3.2  ||和|基本规则</h3><ul>
<li><h4 id="短路或"><a href="#短路或" class="headerlink" title="|| 短路或:"></a>|| 短路或:</h4><p>如果第一个条件为 true，则第二个条件不会判断，结果为true</p>
</li>
<li><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="|  逻辑或:"></a>|  逻辑或:</h4><p>不管第一个条件是否为true，第二个条件都要判断</p>
</li>
</ul>
<h3 id="3-3-3-逻辑异或"><a href="#3-3-3-逻辑异或" class="headerlink" title="3.3.3  ^逻辑异或"></a>3.3.3  ^逻辑异或</h3><ul>
<li>当a和b不同时，则结果为true，否则为false</li>
</ul>
<h2 id="3-4-赋值运算符"><a href="#3-4-赋值运算符" class="headerlink" title="3.4 赋值运算符"></a>3.4 赋值运算符</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>赋值运算符就是将某个运算后的值，赋给指定的变量</p>
</li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>运算顺序从右往左</p>
</li>
<li><p>赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值</p>
</li>
<li><p>复合赋值： a  x&#x3D;  b  等于  a  &#x3D;  a  x  b</p>
</li>
<li><p><strong>复合赋值运算符会进行类型转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>;  <span class="comment">//等价于 b = (byte)(b + 2)</span></span><br><span class="line">b++;  <span class="comment">//等价于 b = (byte)(b + 1)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="3-5-三元运算符"><a href="#3-5-三元运算符" class="headerlink" title="3.5 三元运算符"></a>3.5 三元运算符</h2><ul>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">条件表达式？表达式<span class="number">1</span>：表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a&gt;b ? a++:b--;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h4><ol>
<li>如果条件表达式为true，运算后的结果是表达式1;</li>
<li>如果条件表达式为false，运算后的结果是表达式2;</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换)<!--三元运算符是一个整体，精度保持一致--></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? <span class="type">int</span>(<span class="number">1.1</span>) : <span class="type">int</span>(<span class="number">3.4</span>);  </span><br></pre></td></tr></table></figure>
</li>
<li><p>三元运算符可以转成  if–else语句</p>
</li>
</ol>
</li>
</ul>
<h2 id="3-5-运算符优先级"><a href="#3-5-运算符优先级" class="headerlink" title="3.5 运算符优先级"></a>3.5 运算符优先级</h2><ul>
<li><h4 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h4><ol>
<li>()  {} , 等</li>
<li>单目运算符 ++ –</li>
<li>算术运算符</li>
<li>位移运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>三元运算符</li>
<li>赋值运算符</li>
</ol>
</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8810.44.16.png" alt="截屏2022-04-17 上午10.44.16" style="zoom: 67%;" />

<h2 id="3-6-标识符的命名规则和规范"><a href="#3-6-标识符的命名规则和规范" class="headerlink" title="3.6 标识符的命名规则和规范"></a>3.6 标识符的命名规则和规范</h2><ul>
<li><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ol>
<li>由26个英文字母大小写，0~9，或＄组成</li>
<li><strong>数字不可开头</strong></li>
<li>不可以使用关键字和保留宇，但能包含关键字和保留字</li>
<li>Java中严格区分大小写，长度无限制</li>
<li><strong>标识符不能包含空格</strong></li>
</ol>
</li>
<li><h4 id="规范："><a href="#规范：" class="headerlink" title="规范："></a>规范：</h4><ol>
<li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li>
<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单河开始每个单词首字母大写：xxxYyyzzz</li>
<li>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>
</ol>
</li>
</ul>
<h2 id="3-7-关键字、保留字"><a href="#3-7-关键字、保留字" class="headerlink" title="3.7 关键字、保留字"></a>3.7 关键字、保留字</h2><ul>
<li><h4 id="关键字基本介绍："><a href="#关键字基本介绍：" class="headerlink" title="关键字基本介绍："></a>关键字基本介绍：</h4><p>被Java语言赋子了特殊含义，用做专门用途的字符串(单词)</p>
<p>特点：关键字中所有字母都为小写</p>
</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8811.25.09.jpg" alt="截屏2022-04-17 上午11.25.09"  />

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8811.26.14.jpg" alt="截屏2022-04-17 上午11.26.14"  />

<ul>
<li><h4 id="保留字基本介绍："><a href="#保留字基本介绍：" class="headerlink" title="保留字基本介绍："></a>保留字基本介绍：</h4><p>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留宇</p>
<p>byValue、cast、future、 generic、 inner、 operator、outer、rest、var、goto、const</p>
</li>
</ul>
<h2 id="3-8-键盘输入"><a href="#3-8-键盘输入" class="headerlink" title="3.8 键盘输入"></a>3.8 键盘输入</h2><ul>
<li><h4 id="基本介绍：-5"><a href="#基本介绍：-5" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取<br>lnput.java，需要一个扫描器(对象)，就是 Scanner</p>
</li>
<li><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>导入该类的包，java.util.*</p>
</li>
<li><p>创建该类的对象(声明变量)</p>
</li>
<li><p>调用里面的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//System.in 代表使用键盘输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;名字=&quot;</span>+name+ <span class="string">&quot;\t&quot;</span> +<span class="string">&quot;年龄=&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="3-9-进制⭐️"><a href="#3-9-进制⭐️" class="headerlink" title="3.9 进制⭐️"></a>3.9 进制⭐️</h2><ul>
<li>二进制：0.1，满2进1，以0b或0B开头</li>
<li>十进制：0-9，满10进1</li>
<li>八进制：0-7，满8进1，以数字0开头表示</li>
<li>十六进制：0-9及A(10)-F(15)，满16进1.以Ox或0x开头表示，此处的A-F不区分大小写</li>
</ul>
<h3 id="3-9-1-其他转十进制"><a href="#3-9-1-其他转十进制" class="headerlink" title="3.9.1 其他转十进制"></a>3.9.1 其他转十进制</h3><ul>
<li><p>从最低位开始，将每个位上的数提取出来，乘以(几进制)的(位数-1)次方</p>
<p>例：0b01011 &#x3D; 1 * 2^(1-1) + 1 * 2^(2-1) + 0 * 2^(3-1) + 1 * 2^(4-1) &#x3D; 1 + 2 + 0 + 8 &#x3D;11</p>
</li>
</ul>
<h3 id="3-9-2-十进制转其他"><a href="#3-9-2-十进制转其他" class="headerlink" title="3.9.2 十进制转其他"></a>3.9.2 十进制转其他</h3><ul>
<li>将该数不断除(几进制)，直到商为0，每步余数倒写</li>
</ul>
<h3 id="3-9-3-二进制转八-x2F-十六"><a href="#3-9-3-二进制转八-x2F-十六" class="headerlink" title="3.9.3 二进制转八&#x2F;十六"></a>3.9.3 二进制转八&#x2F;十六</h3><ul>
<li>从低位开始，每三位一组，转成对应八进制</li>
<li>从低位开始，每四位一组，转成对应十六进制</li>
</ul>
<h3 id="3-9-4-八-x2F-十六进制转二"><a href="#3-9-4-八-x2F-十六进制转二" class="headerlink" title="3.9.4 八&#x2F;十六进制转二"></a>3.9.4 八&#x2F;十六进制转二</h3><ul>
<li>将八进制的每一位，转成对应的一个三位的二进制数</li>
<li>将十六进制的每一位，转成对应的一个四位的二进制数</li>
</ul>
<h2 id="3-10-原码-反码-补码⭐️⭐️"><a href="#3-10-原码-反码-补码⭐️⭐️" class="headerlink" title="3.10 原码  反码 补码⭐️⭐️"></a>3.10 原码  反码 补码⭐️⭐️</h2><ul>
<li><h4 id="运算规则：-1"><a href="#运算规则：-1" class="headerlink" title="运算规则："></a>运算规则：</h4><ol>
<li>二进制的最高位是符号位：<strong>0表示正数，1表示负数</strong></li>
<li><strong>正数的原码、反码、补码都一样(三码合一)</strong></li>
<li><strong>负数的反码 &#x3D; 它的原码符号位不变，其它位取反</strong></li>
<li><strong>负数的补码 &#x3D; 它的反码+1，负数的反码 &#x3D; 负数的补码 - 1</strong></li>
<li>0的反码，补码都是0</li>
<li>java中的数都是有符号的</li>
<li>计算机运算的时候，都是以补码的方式来运算的</li>
<li>看运算结果的时候，要看他的原码</li>
</ol>
</li>
</ul>
<h2 id="3-11-位运算符⭐️"><a href="#3-11-位运算符⭐️" class="headerlink" title="3.11 位运算符⭐️"></a>3.11 位运算符⭐️</h2><ul>
<li><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul>
<li>按位与  &amp;</li>
<li>按位或  | </li>
<li>按位异或  ^  </li>
<li>按位取反  ~ </li>
<li>算数右移  &gt;&gt;  低位溢出，符号位不变，并用符号位补溢出的高位(本质&#x2F;2)</li>
<li>算数左移  &lt;&lt;  符号位不变，低位补0(本质*2)</li>
<li>逻辑右移  &gt;&gt;&gt;  低位溢出，高位补0</li>
</ul>
</li>
<li><h4 id="位运算过程："><a href="#位运算过程：" class="headerlink" title="位运算过程："></a>位运算过程：</h4><ol>
<li>用原码得到补码</li>
<li>用补码进行相关逻辑运算</li>
<li>运算完毕将补码转换成原码</li>
</ol>
</li>
</ul>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2423.jpg" alt="IMG_2423"  />

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2424.jpg" alt="IMG_2424"  />

<h1 id="4-控制结构"><a href="#4-控制结构" class="headerlink" title="4 控制结构"></a>4 控制结构</h1><h2 id="4-1顺序"><a href="#4-1顺序" class="headerlink" title="4.1顺序"></a>4.1顺序</h2><ul>
<li><h4 id="基本介绍：-6"><a href="#基本介绍：-6" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序从上到下逐行地执行，中间没有任何判断和跳转</p>
</li>
<li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><p>Java中定义成员变量时采用合法的前向引用(先定义再引用)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-2-分支控制-if-else-switch"><a href="#4-2-分支控制-if-else-switch" class="headerlink" title="4.2 分支控制(if  else  switch)"></a>4.2 分支控制(if  else  switch)</h2><h3 id="4-2-1-单分支"><a href="#4-2-1-单分支" class="headerlink" title="4.2.1 单分支"></a>4.2.1 单分支</h3><ul>
<li><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式为ture 时，就会执行{}的代码。如果为false，就不执行</li>
<li>如果{}中只有一条语句，则可以不用{}，建议写上{}</li>
</ol>
</li>
</ul>
<h3 id="4-2-2-双分支"><a href="#4-2-2-双分支" class="headerlink" title="4.2.2 双分支"></a>4.2.2 双分支</h3><ul>
<li><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-5"><a href="#注意事项和细节：-5" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式成立，即执行代码块1，否则执行代码块2</li>
<li>如果执行代码块有一条语句，则{}可以省略，否则，不能省略</li>
</ol>
</li>
</ul>
<h3 id="4-2-3-多分支"><a href="#4-2-3-多分支" class="headerlink" title="4.2.3 多分支"></a>4.2.3 多分支</h3><ul>
<li><h4 id="基本语法：-3"><a href="#基本语法：-3" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">  执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  执行代码块n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-6"><a href="#注意事项和细节：-6" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式1成立时，即执行代码块1</li>
<li>如果表达式1不成立，才去判断表达式2是否成立</li>
<li>如果表达式2成立，就执行代码块2</li>
<li>以此类推，如果所有的表达式都不成立则执行else的代码块</li>
<li>多分支可以没有else</li>
</ol>
</li>
</ul>
<h3 id="4-2-4-嵌套分支"><a href="#4-2-4-嵌套分支" class="headerlink" title="4.2.4 嵌套分支"></a>4.2.4 嵌套分支</h3><ul>
<li><h4 id="基本介绍：-7"><a href="#基本介绍：-7" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在一个分支结构中又完整的嵌套了另个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支</p>
</li>
<li><h4 id="基本语法：-4"><a href="#基本语法：-4" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">  <span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-5-switch分支结构"><a href="#4-2-5-switch分支结构" class="headerlink" title="4.2.5 switch分支结构"></a>4.2.5 switch分支结构</h3><ul>
<li><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">      语句块<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">      语句块<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      语句块;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>switch 关键字，表示swtich分支</li>
<li>表达式对应一个值</li>
<li>case 常量1:当表达式的值等于常量1，就执行语句块1</li>
<li>break ：表示退出swtich</li>
<li>如果和 case 常量1匹配，就执行语句块1，如果没有匹配，就继续匹配 case 常量2</li>
<li><strong>如果一个都没有匹配上，执行default</strong></li>
</ol>
</li>
<li><h4 id="注意事项和细节：-7"><a href="#注意事项和细节：-7" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>表达式数据类型，应和case 后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是 int</li>
<li><strong>switch(表达式)中表达式的返回值必须是：(byte,short.int,char,enum,String)</strong></li>
<li>case子句中的值必须是常量,而不能是变量</li>
<li><strong>default子句是可选的，当没有匹配的case时，执行default</strong></li>
<li>break语句跳出switch语句块，如果没有break，程序会执行到结尾</li>
</ol>
</li>
</ul>
<h2 id="4-3-循环控制-for-while-do-while-⭐️"><a href="#4-3-循环控制-for-while-do-while-⭐️" class="headerlink" title="4.3 循环控制(for  while  do while)⭐️"></a>4.3 循环控制(for  while  do while)⭐️</h2><h3 id="4-3-1-for循环控制"><a href="#4-3-1-for循环控制" class="headerlink" title="4.3.1  for循环控制"></a>4.3.1  for循环控制</h3><ul>
<li><h4 id="基本语法：-5"><a href="#基本语法：-5" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环变量初始化;循环条件;循环变量迭代)&#123;</span><br><span class="line">  循环操作语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>循环操作，这里可以有多条语句，也就是我们要循环执行的代码</li>
<li>如果 循环操作(语句) 只有一条语句，可以省路{}，建议不要省略</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-8"><a href="#注意事项和细节：-8" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>循环条件是返回一个布尔值的表达式</li>
<li><strong>for(;循环判断条件;)中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</strong></li>
<li>循环初始值可以有多条初始化语句，但要求类型一样，井且中间用逗号隔开</li>
<li>循环变量迭代也司以有名条变量迭代语句，中间用逗号隔开</li>
</ol>
</li>
</ul>
<h3 id="4-3-2-while循环控制"><a href="#4-3-2-while循环控制" class="headerlink" title="4.3.2  while循环控制"></a>4.3.2  while循环控制</h3><ul>
<li><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">  循环体;</span><br><span class="line">  循环变量迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>四要素位置不同</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-9"><a href="#注意事项和细节：-9" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>循环条件是返回一个布尔值的表达式</li>
<li>while循环是先判断在执行语句</li>
</ol>
</li>
</ul>
<h3 id="4-3-3-do-while循环控制"><a href="#4-3-3-do-while循环控制" class="headerlink" title="4.3.3  do while循环控制"></a>4.3.3  do while循环控制</h3><ul>
<li><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体;</span><br><span class="line">  循环变量迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="说明：-3"><a href="#说明：-3" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>四要素位置不同</li>
<li>先执行在判断，至少执行一次</li>
<li>最后有一个;</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-10"><a href="#注意事项和细节：-10" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>循环条件是返回一个布尔值的表达式</li>
<li><strong>先执行在判断，至少执行一次</strong></li>
</ol>
</li>
</ul>
<h3 id="4-3-4-多重循环控制"><a href="#4-3-4-多重循环控制" class="headerlink" title="4.3.4 多重循环控制"></a>4.3.4 多重循环控制</h3><ul>
<li><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><ol>
<li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for,while,do.while均可以作为外层循环和内层循环</li>
<li>嵌套循环就是把内层循环当成外层循环的循环体</li>
<li><strong>当只有内层循环的循环条件为false时，才会完全跳出内层盾环，才可结束外层的当次循环，开始下一次的循环</strong></li>
<li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次</li>
</ol>
</li>
</ul>
<h2 id="4-4-跳转控制break"><a href="#4-4-跳转控制break" class="headerlink" title="4.4 跳转控制break"></a>4.4 跳转控制break</h2><ul>
<li><h4 id="基本介绍：-8"><a href="#基本介绍：-8" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>break语句用于终止某个语句块的执行，一般使用在switch或者循环[for,while,do while]</p>
</li>
<li><h4 id="注意事项和细节：-11"><a href="#注意事项和细节：-11" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p>
</li>
<li><p>标签的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label1:&#123;......</span><br><span class="line">  label2:&#123;</span><br><span class="line">  	<span class="keyword">break</span> label1;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="4-5-跳转控制continue"><a href="#4-5-跳转控制continue" class="headerlink" title="4.5 跳转控制continue"></a>4.5 跳转控制continue</h2><ul>
<li><h4 id="基本介绍：-9"><a href="#基本介绍：-9" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>continue语句用于结束本次循环，继续执行下一次循环</p>
</li>
<li><p>continue语句出现在多层嵌套的福环语句体中时，可以通过标签指明要跳过的是哪一层循环</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-12"><a href="#注意事项和细节：-12" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>continue语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p>
</li>
<li><p>标签的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label1:&#123;......</span><br><span class="line">  label2:&#123;</span><br><span class="line">  	<span class="keyword">continue</span> label1;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="4-6-跳转控制return"><a href="#4-6-跳转控制return" class="headerlink" title="4.6 跳转控制return"></a>4.6 跳转控制return</h2><ul>
<li><h4 id="基本介绍：-10"><a href="#基本介绍：-10" class="headerlink" title="基本介绍："></a>基本介绍：</h4>return使用在方法，表示跳出所在的方法</li>
</ul>
<h1 id="5-数组、排序、查找"><a href="#5-数组、排序、查找" class="headerlink" title="5 数组、排序、查找"></a>5 数组、排序、查找</h1><h2 id="5-1-数组⭐️"><a href="#5-1-数组⭐️" class="headerlink" title="5.1 数组⭐️"></a>5.1 数组⭐️</h2><h3 id="5-1-1-使用方式"><a href="#5-1-1-使用方式" class="headerlink" title="5.1.1 使用方式"></a>5.1.1 使用方式</h3><h4 id="1-动态初始化"><a href="#1-动态初始化" class="headerlink" title="1-动态初始化"></a>1-动态初始化</h4><ul>
<li><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>数据类型 数组名 [] &#x3D; new 数据类型[大小]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">//创建一个数字名字为a，存放了五个int</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数组的引用："><a href="#数组的引用：" class="headerlink" title="数组的引用："></a>数组的引用：</h4><p>数组名[下标&#x2F;索引]，下标从0开始</p>
</li>
</ul>
<h4 id="2-动态初始化"><a href="#2-动态初始化" class="headerlink" title="2-动态初始化"></a>2-动态初始化</h4><ul>
<li><h4 id="先声明数组："><a href="#先声明数组：" class="headerlink" title="先声明数组："></a>先声明数组：</h4><p>数据类型 数组名[]；也可以 数据类型[] 数组名；</p>
<p>例：int a[];或者int[] a;</p>
</li>
<li><h4 id="再创建数组："><a href="#再创建数组：" class="headerlink" title="再创建数组："></a>再创建数组：</h4><p>数组名 &#x3D; new 数据类型[大小];</p>
<p>例：a &#x3D; new int [10];</p>
</li>
</ul>
<h4 id="3-静态初始化"><a href="#3-静态初始化" class="headerlink" title="3-静态初始化"></a>3-静态初始化</h4><ul>
<li><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><p>数据类型 数组名[] &#x3D; {元素值，元素值……}</p>
</li>
<li><h4 id="注意事项和细节-2"><a href="#注意事项和细节-2" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li>
</ul>
<ol>
<li>数组是多个相同类型数据的组合</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</li>
<li><strong>数组创建后如果没有赋值，有默认值:</strong><br><strong>int0,short 0, byte 0, long 0, float 0.0,double 0.0</strong><br><strong>char \u0000,boolean false, String null</strong></li>
<li><strong>使用数组的步骤 (1)声明数组并开辟空间(2)给数组各个元素赋值(3)使用数组</strong></li>
<li>数组的下标是从0开始的</li>
<li>数组下标必须在指定范围内使用，否则报：下标越界异常</li>
<li>数组属引用类型，数组型数据是对象(object)</li>
</ol>
<h3 id="5-1-2-数组赋值机制"><a href="#5-1-2-数组赋值机制" class="headerlink" title="5.1.2 数组赋值机制"></a>5.1.2 数组赋值机制</h3><ul>
<li><p>数组在默认情況下是引用传递，赋的值是地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">arr1</span> <span class="operator">=</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">arr2</span> <span class="operator">=</span> arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">//arr1[0]=10</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-22%2010.41.10.jpg" alt="截屏2022-04-22 10.41.10"></p>
</li>
</ul>
<h3 id="5-1-3-数组拷贝"><a href="#5-1-3-数组拷贝" class="headerlink" title="5.1.3 数组拷贝"></a>5.1.3 数组拷贝</h3><ul>
<li><pre><code class="java">int[] arr1 = &#123;1,2,3&#125;;
int[] arr2 = new int[arr1.length];
for (int i = 0;i &lt; arr1.length;i++)&#123;
  arr2[i] = arr1[i];
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![IMG_2460](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2460.jpg)</span><br><span class="line"></span><br><span class="line">### 5.1.4 数组反转</span><br><span class="line"></span><br><span class="line">- #### 规律反转</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  public class ArrayReverse01 &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          int[] arr = &#123;11,22,33,44,55,66&#125;;</span><br><span class="line">          int temp = 0,len = arr.length;</span><br><span class="line">          for (int i = 0;i &lt; len/2;i++)&#123;</span><br><span class="line">              temp = arr[len-1-i];</span><br><span class="line">              arr[len-1-i] = arr[i];</span><br><span class="line">              arr[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">          for(int i = 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">              System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><h4 id="逆序赋值"><a href="#逆序赋值" class="headerlink" title="逆序赋值"></a>逆序赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr1.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            arr2[len-i-<span class="number">1</span>] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr1 = arr2;<span class="comment">//arr1指向arr2数据空间，此时arr原来的数据空间没有变量引用，会被当作垃圾销毁</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr1.length;i++) &#123;</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-1-6-数组添加"><a href="#5-1-6-数组添加" class="headerlink" title="5.1.6 数组添加"></a>5.1.6 数组添加</h3><ul>
<li><h4 id="静态添加"><a href="#静态添加" class="headerlink" title="静态添加"></a>静态添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            arr2[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr2[arr2.length-<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        arr = arr2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="动态添加"><a href="#动态添加" class="headerlink" title="动态添加"></a>动态添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                arr2[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入添加的元素&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">            arr2[arr2.length-<span class="number">1</span>] = addNum;</span><br><span class="line">            arr = arr2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续添加 y/n&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="动态删减"><a href="#动态删减" class="headerlink" title="动态删减"></a>动态删减</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReduce01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr2.length;i++)&#123;</span><br><span class="line">                arr2[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr = arr2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入是否删除最后一个数字 yes/no&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-2-二维数组"><a href="#5-2-二维数组" class="headerlink" title="5.2 二维数组"></a>5.2 二维数组</h2><ul>
<li><h4 id="基本介绍：-11"><a href="#基本介绍：-11" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>一维数组构成了二维数组</p>
</li>
<li><h4 id="二维数组遍历"><a href="#二维数组遍历" class="headerlink" title="二维数组遍历"></a>二维数组遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArrary</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="二维数组内存图"><a href="#二维数组内存图" class="headerlink" title="二维数组内存图"></a>二维数组内存图</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-22%2019.40.51.jpg" alt="截屏2022-04-22 19.40.51"></p>
</li>
<li><h4 id="注意事项和细节：-13"><a href="#注意事项和细节：-13" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>二维数组元素个数：arr.length</li>
<li>取出一维元素需要遍历两次</li>
<li>访问第(i+1)个一维数组的第(j+1)个值  arr [i] [j]</li>
</ol>
</li>
</ul>
<h3 id="5-2-1-使用方式"><a href="#5-2-1-使用方式" class="headerlink" title="5.2.1 使用方式"></a>5.2.1 使用方式</h3><h4 id="1-动态初始化-1"><a href="#1-动态初始化-1" class="headerlink" title="1-动态初始化"></a>1-动态初始化</h4><ul>
<li><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><p>类型 数组名[] [] &#x3D; new 类型 [大小] [大小]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArrary02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-动态初始化2"><a href="#2-动态初始化2" class="headerlink" title="2-动态初始化2"></a>2-动态初始化2</h4><ul>
<li><h4 id="先声明数组：-1"><a href="#先声明数组：-1" class="headerlink" title="先声明数组："></a>先声明数组：</h4><p>数据类型 数组名[] [];</p>
<p>例：int a[] [];</p>
</li>
<li><h4 id="再创建数组：-1"><a href="#再创建数组：-1" class="headerlink" title="再创建数组："></a>再创建数组：</h4><p>数组名 &#x3D; new 数据类型[大小] [大小];</p>
<p>例：a &#x3D; new int [2] [3];</p>
</li>
</ul>
<h4 id="3-动态初始化-列数不确定"><a href="#3-动态初始化-列数不确定" class="headerlink" title="3-动态初始化-列数不确定"></a>3-动态初始化-列数不确定</h4><ul>
<li><pre><code class="java">public class TwoDimensionalArrary03 &#123;
    public static void main(String[] args) &#123;
        int[][] arr = new int[3][];//创建二维数组，只确定一维数组的个数，一维数组开没有开数据空间
        for(int i = 0;i &lt; arr.length;i++)&#123;
            arr[i] = new int[i+1];//给一维数组开空间
            for (int j = 0; j &lt; arr[i].length;j++)&#123;
                arr[i][j] = i+1;//给每一个一维数组元素赋值
            &#125;
        &#125;
        for(int i = 0;i &lt; arr.length;i++)&#123;
            for (int j = 0; j &lt; arr[i].length;j++)&#123;
                System.out.print(arr[i][j]+&quot; &quot;);
            &#125;
            System.out.println(&quot; &quot;);
        &#125;
    &#125;
&#125;
//输出结果：1 22 333
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 4-静态初始化</span><br><span class="line"></span><br><span class="line">- #### 语法：</span><br><span class="line"></span><br><span class="line">  类型 数组名[] [] = &#123;&#123;值1,值2&#125;,&#123;值1,值2&#125;,&#123;值1,值2&#125;&#125;</span><br><span class="line"></span><br><span class="line">- #### 注意事项和细节：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 一维数组声明方式：int [] x 或者 int x []</span><br><span class="line">2. 二维数组声明方式：int [] [] y 或者 int[] y [] 或者 int y [] []</span><br><span class="line">3. 二维数组实际上是由多个一维数组组成的，**它的各个一维数组的长度可以相同，也可以不相同**</span><br><span class="line"></span><br><span class="line">## 5.3 排序(基础)</span><br><span class="line"></span><br><span class="line">### 5.3.1 排序分类</span><br><span class="line"></span><br><span class="line">1. 想需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择式排序法和插入式排序法)</span><br><span class="line">2. 数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)</span><br><span class="line"></span><br><span class="line">### 5.3.2 冒泡排序</span><br><span class="line"></span><br><span class="line">- #### 定义：</span><br><span class="line"></span><br><span class="line">  冒泡排序 (Bubble Sorting)的基本思想是：通过对待排序序列从后向前(从下标较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒</span><br><span class="line"></span><br><span class="line">- #### 冒泡排序特点</span><br><span class="line"></span><br><span class="line">  1. 一共有n个元素</span><br><span class="line">  2. 一共进行了n-1轮排序，可以看成是外层循</span><br><span class="line">  3. 每1轮排序可以确定一个数的位置，比如第1轮排序确定最大数,第2轮排序，确定第2大的数位置，依次类推</span><br><span class="line">  4. 当进行比较时，如果前面的数大于后面的数，就交换</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class BubbleSort &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          int temp = 0;</span><br><span class="line">          int[] arr = &#123;24,69,80,57,13,321,34,56,7,-4&#125;;</span><br><span class="line">          for (int i = 0;i &lt; arr.length-1;i++)&#123;</span><br><span class="line">              for(int j = 0;j &lt; arr.length-1-i;j++)&#123;</span><br><span class="line">                  if(arr[j] &gt; arr[j + 1])&#123;</span><br><span class="line">                      temp = arr[j];</span><br><span class="line">                      arr[j] = arr[j+1];</span><br><span class="line">                      arr[j+1] = temp;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(&quot;==排序结果==&quot;);</span><br><span class="line">          for(int i = 0;i &lt; arr.length;i++) &#123;</span><br><span class="line">              System.out.print(arr[i] + &quot;\t&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="5-4-查找-基础"><a href="#5-4-查找-基础" class="headerlink" title="5.4 查找(基础)"></a>5.4 查找(基础)</h2><h3 id="5-4-1-顺序查找"><a href="#5-4-1-顺序查找" class="headerlink" title="5.4.1 顺序查找"></a>5.4.1 顺序查找</h3><ul>
<li><pre><code class="java">import java.util.Scanner;

public class SeqSearch &#123;
    public static void main(String[] args) &#123;
        String[] names = &#123;&quot;白眉鹰王&quot;,&quot;金毛狮王&quot;,&quot;紫衫龙王&quot;,&quot;青翼蝠王&quot;&#125;;
        Scanner myScanner = new Scanner(System.in);
        System.out.println(&quot;请输入名字&quot;);
        String findName = myScanner.next();

        int index = -1;
        for(int i = 0;i &lt; names.length;i++)&#123;
            if(findName.equals(names[i]))&#123;
                System.out.println(&quot;恭喜找到&quot;+findName);
                System.out.println(&quot;序号为&quot;+(i+1));
                index = 1;
                break;
            &#125;
        &#125;
        if(index == -1)&#123;
            System.out.println(&quot;sorry,没有找到&quot;+findName);
        &#125;
    &#125;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 5.4.2 二分查找</span><br><span class="line"></span><br><span class="line"># 6 面向对象(基础)</span><br><span class="line"></span><br><span class="line">## 6.1 类与对象</span><br><span class="line"></span><br><span class="line">- #### 基本介绍：</span><br><span class="line"></span><br><span class="line">  - 类是抽象的，概念的，代表一类事物,比如人类, 猫类…即它是数据类型</span><br><span class="line">  - 对象是具体的，实际的，代表一个具体事物，即是实例</span><br><span class="line">  - 类是对象的模板，对象是类的一个个体，对应一个实例</span><br><span class="line"></span><br><span class="line">- #### 对象存在形式⭐️</span><br><span class="line"></span><br><span class="line">  ![截屏2022-04-23 15.48.52](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2015.48.52.jpg)</span><br><span class="line"></span><br><span class="line">### 6.1.1属性/成员变量</span><br><span class="line"></span><br><span class="line">- #### 基本介绍：</span><br><span class="line"></span><br><span class="line">  - 从概念或叫法上看：**成员变量 = 属性 =field(字段)**</span><br><span class="line"></span><br><span class="line">  - 属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)，比如定义猫类 的 int age 就是属性</span><br><span class="line"></span><br><span class="line">- #### 注意事项和细节：</span><br><span class="line"></span><br><span class="line">  1. 属性的定义语法同变量，示例：访问修饰符 属性类型 属性名</span><br><span class="line"></span><br><span class="line">  2. 访问修饰符：控制属性和访问范围，有四种访问修饰符 public,proctected,defaul,private</span><br><span class="line"></span><br><span class="line">  3. 属性的定义类型可以为任意类型，包含基本类型或引用类型</span><br><span class="line"></span><br><span class="line">  4. **属性如果不赋值，有默认值，规则和数组一致:**</span><br><span class="line"></span><br><span class="line">     int0,short 0, byte 0, long 0, float 0.0,double 0.0</span><br><span class="line">     char \u0000,boolean false, String null</span><br><span class="line"></span><br><span class="line">### 6.1.2如何创建对象</span><br><span class="line"></span><br><span class="line">- #### 先声明在创建</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  Cat cat;</span><br><span class="line">  cat = new Cat();</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><h4 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="对象创建流程分析⭐️⭐️"><a href="#对象创建流程分析⭐️⭐️" class="headerlink" title="对象创建流程分析⭐️⭐️"></a>对象创建流程分析⭐️⭐️</h4><ol>
<li><p>加载Person类信息(就是Person.class 且只加载一次)</p>
</li>
<li><p>在堆中分配空间(地址)</p>
</li>
<li><p><strong>完成对象初始化</strong></p>
<p>**(3.1默认初始化 age &#x3D; 0 name &#x3D;null  **</p>
<p>**3.2显示初始化 age &#x3D; 90 name &#x3D; null **</p>
<p><strong>3.3构造器初始化 age &#x3D; 20 name &#x3D; 小倩)</strong></p>
</li>
<li><p>在对象在堆中的地址返回给P(P是对象名，是对象的引用)</p>
</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-27%2011.41.50.jpg"></p>
</li>
</ul>
<h3 id="6-1-3对象分配机制"><a href="#6-1-3对象分配机制" class="headerlink" title="6.1.3对象分配机制"></a>6.1.3对象分配机制</h3><ul>
<li><pre><code class="java">Person p1 = new Person();
p1.age = 10;
p1.name = &quot;小明&quot;;
Person p2 = p1//把p1赋给了p2，或让p2指向p1
System.out.println(p2.age);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![截屏2022-04-23 16.52.38](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2016.52.38.jpg)</span><br><span class="line"></span><br><span class="line">- #### Java内存结构分析：</span><br><span class="line"></span><br><span class="line">  1. 栈：一般存放基本数据类型(局部变量)</span><br><span class="line">  2. 堆：存放对象(Cat cat，数组等)</span><br><span class="line">  3. 方法区：常量池(常量，比如字符串)，类加载信息</span><br><span class="line"></span><br><span class="line">- #### Java创建对象流程⭐️</span><br><span class="line"></span><br><span class="line">  1. 先加载Person类信息(属性和方法信息，只会加载一次)</span><br><span class="line"></span><br><span class="line">  2. 在堆中分配空间，进行默认初始化(看规则)</span><br><span class="line"></span><br><span class="line">  3. 把地址赋给 p，p就指向对象</span><br><span class="line"></span><br><span class="line">  4. 行指定初始化，比如 p.name =&quot; jack&quot;  p.age = 10</span><br><span class="line"></span><br><span class="line">     ```java</span><br><span class="line">     Person p = new Person();</span><br><span class="line">     p.name = &quot;jack&quot;;</span><br><span class="line">     p.age = 10;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="6-2-成员方法⭐️"><a href="#6-2-成员方法⭐️" class="headerlink" title="6.2 成员方法⭐️"></a>6.2 成员方法⭐️</h2><ul>
<li><h4 id="方法定义："><a href="#方法定义：" class="headerlink" title="方法定义："></a>方法定义：</h4><ol>
<li><p>访问修饰符 返回数据类型 方法名(形参列表)  {&#x2F;&#x2F;方法体</p>
<p>​            语句;</p>
<p>​            return 返回值;</p>
<p>}</p>
<ol>
<li>形参列表：表示成员方法输入 call(int n)</li>
<li>数据类型(返回类型)：表示成员方法输出，void 表示没有返回值</li>
<li>方法主体：表示为了实现某一功能代码块</li>
<li>return 语句不是必须的</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="6-2-1-调用方法"><a href="#6-2-1-调用方法" class="headerlink" title="6.2.1 调用方法"></a>6.2.1 调用方法</h3><ol>
<li><p>public 表示方法是公开</p>
</li>
<li><p>void：表示方法没有返回值</p>
</li>
<li><p>speak() ：speak是方法名，()形参列表</p>
</li>
<li><p>{}方法体，可以写我们要执行的代码</p>
</li>
<li><p>System.out.println(”我是一个好人”)；表示我们的方法就是输出一句话</p>
</li>
<li><p>p1.speak()为调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.speak();</span><br><span class="line">        p1.cal01();</span><br><span class="line">        p1.cal02(<span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">returnRes</span> <span class="operator">=</span> p1.getSum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(returnRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你是一个呆猪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            res += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal02</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            res += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-2-2-调用的内存机制"><a href="#6-2-2-调用的内存机制" class="headerlink" title="6.2.2 调用的内存机制"></a>6.2.2 调用的内存机制</h3><ul>
<li><h4 id="调用的内存机制："><a href="#调用的内存机制：" class="headerlink" title="调用的内存机制："></a>调用的内存机制：</h4></li>
</ul>
<ol>
<li><p>public 表示方法是公开的</p>
</li>
<li><p>int：表示方法执行后，返回一个 int 值</p>
</li>
<li><p>getsum 方法名</p>
</li>
<li><p>(int num1， int num2) 形参列表，2个形参，可以接收用户传入的两个数</p>
</li>
<li><p>return res；表示把res 的值，返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2020.16.51.jpg" alt="截屏2022-04-23 20.16.51"></p>
</li>
</ol>
<h3 id="6-2-3-注意事项和细节"><a href="#6-2-3-注意事项和细节" class="headerlink" title="6.2.3 注意事项和细节"></a>6.2.3 注意事项和细节</h3><ul>
<li><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><ol>
<li>作用是控制方法使用的适用范围，若果不写则默认访问</li>
</ol>
</li>
<li><h4 id="返回类型："><a href="#返回类型：" class="headerlink" title="返回类型："></a>返回类型：</h4><ol>
<li>一个方法最多有一个返回值</li>
<li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li>
<li><strong>方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值;要求返回值类型必须和return的值类型一致或兼容</strong></li>
<li>如果方法是void，则方法体中可以没有return语句，或者 只写 return</li>
</ol>
</li>
<li><h4 id="方法名："><a href="#方法名：" class="headerlink" title="方法名："></a>方法名：</h4><ol>
<li>方法名遵循驼峰法则</li>
</ol>
</li>
<li><h4 id="参数列表："><a href="#参数列表：" class="headerlink" title="参数列表："></a>参数列表：</h4><ol>
<li><p>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如 getSum(int n1,int n2)</p>
</li>
<li><p>参数类型可以为任意类型，包含基本类型或引用类型，比如 printArr(intlIl map)</p>
</li>
<li><p>调用参数的方法时，一定对应着参数列表传入相同类型或莱容类型 的参数</p>
</li>
<li><p>方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</p>
</li>
</ol>
</li>
<li><h4 id="方法体："><a href="#方法体：" class="headerlink" title="方法体："></a>方法体：</h4><ol>
<li>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用</li>
<li>里面不能再定义方法！即：<strong>方法不能嵌套定义</strong></li>
</ol>
</li>
<li><h4 id="方法调用细节："><a href="#方法调用细节：" class="headerlink" title="方法调用细节："></a>方法调用细节：</h4><ol>
<li>同一个类中的方法调用：直接调用即可</li>
<li>跨类中的方法A类调用B类方法：需要通过对象名调用</li>
<li>跨类的方法调用和方法的访问修饰符相关</li>
</ol>
</li>
</ul>
<h2 id="6-3-成员方传法参机制⭐️⭐️"><a href="#6-3-成员方传法参机制⭐️⭐️" class="headerlink" title="6.3 成员方传法参机制⭐️⭐️"></a>6.3 成员方传法参机制⭐️⭐️</h2><h3 id="6-3-1-基本数据类型的传参数机制"><a href="#6-3-1-基本数据类型的传参数机制" class="headerlink" title="6.3.1 基本数据类型的传参数机制"></a>6.3.1 基本数据类型的传参数机制</h3><ul>
<li><p><strong>传递的是值(拷贝)，形参的认何改变不影响实参</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.10.50.jpg" alt="截屏2022-04-28 20.10.50"></p>
</li>
</ul>
<h3 id="6-3-2-引用数据类型的传参数机制"><a href="#6-3-2-引用数据类型的传参数机制" class="headerlink" title="6.3.2 引用数据类型的传参数机制"></a>6.3.2 引用数据类型的传参数机制</h3><ul>
<li><p><strong>引用类型传递的是地址(传递也是值，但是值是地址)，可以通过形参影响实参</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.11.16.jpg" alt="截屏2022-04-28 20.11.16"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.11.56.jpg" alt="截屏2022-04-28 20.11.56"></p>
</li>
</ul>
<h2 id="6-4-递归"><a href="#6-4-递归" class="headerlink" title="6.4 递归"></a>6.4 递归</h2><ul>
<li><h4 id="基本介绍：-12"><a href="#基本介绍：-12" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>递归就是方法自己调用自己,每次调用时传入不同的变量</p>
</li>
<li><h4 id="递归调用内存机制"><a href="#递归调用内存机制" class="headerlink" title="递归调用内存机制"></a>递归调用内存机制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion01</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">         t1.test(<span class="number">5</span>);</span><br><span class="line">         <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> t1.factorial(<span class="number">5</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;res = &quot;</span>+ res);</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            test(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factorial(n - <span class="number">1</span>)*n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-25%2011.39.43.jpg"></p>
</li>
<li><h4 id="注意事项和细节：-14"><a href="#注意事项和细节：-14" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li>
<li><strong>方法的局部变量是独立的，不会相互影响，比如n变量</strong></li>
<li><strong>如果方法中使用的是引用类型变量(比如数组、对象)，就会共享该引用类型的数据</strong></li>
<li>递归必须向退出递归的条件逼近，否则就是无限递归</li>
<li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕，栈空间回收</li>
</ol>
</li>
</ul>
<h2 id="6-5-方法重载-overload"><a href="#6-5-方法重载-overload" class="headerlink" title="6.5 方法重载 (overload)"></a>6.5 方法重载 (overload)</h2><ul>
<li><h4 id="基本介绍：-13"><a href="#基本介绍：-13" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java中允许同一个类中，多个同名方法的存在，但要求<strong>形参列表不一致</strong></p>
</li>
<li><h4 id="注意事项和细节-3"><a href="#注意事项和细节-3" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol>
<li>方法名：必须相同</li>
<li>形参列表：必须不同(参数类型、个数、顺序)</li>
<li>返回类型：无要求</li>
</ol>
</li>
</ul>
<h2 id="6-6-可变参数"><a href="#6-6-可变参数" class="headerlink" title="6.6 可变参数"></a>6.6 可变参数</h2><ul>
<li><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p>java允许将同一个类中多个同名同功能<strong>但参数个数不同</strong>的方法，封装成一个方法，通过可变参数实现</p>
</li>
<li><h4 id="基本语法：-6"><a href="#基本语法：-6" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(**数据类型...** 形参名)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-15"><a href="#注意事项和细节：-15" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>可变参数的实参可以为0个或任意多个</li>
<li>可变参数的实参可以为数组</li>
<li><strong>可变参数的本质就是数组</strong></li>
<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li>
<li>一个形参列表中只能出现一个可变参数</li>
</ol>
</li>
</ul>
<h2 id="6-7-变量作用域⭐️"><a href="#6-7-变量作用域⭐️" class="headerlink" title="6.7 变量作用域⭐️"></a>6.7 变量作用域⭐️</h2><ul>
<li><h4 id="全局变量和局部变量："><a href="#全局变量和局部变量：" class="headerlink" title="全局变量和局部变量："></a>全局变量和局部变量：</h4><ol>
<li>主要的变量就是属性(成员变量)和局部变量</li>
<li>局部变量一般是指在成员方法中定义的变量</li>
<li>全局变量：也就是属性，作用域为整个类体</li>
<li>局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中</li>
<li>全局变量(属性)可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-16"><a href="#注意事项和细节：-16" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><strong>全局变量和局部变量可以重名，访问时遵循就近原则</strong></li>
<li>在同一个作用域中，两个局部变量，不能重名</li>
<li>全局变量生命周期长，伴随着对象的创建而创建，伴随着对象的销毁而销毁</li>
<li>局部变量生命周期短，伴随着它的代码块的执行而创建，伴随着代码块的结束而结束：即在一次方法调用过程中</li>
<li>作用域范围不同<br>全局变量&#x2F;属性：可以被本类使用，或其他类使用(通过对象调用)<br>局部变量：只能在本类中对应的方法中使用</li>
<li>修饰符不同<br>全局变量&#x2F;属性可以加修饰符<br>局部变量不可以加修饰符</li>
</ol>
</li>
<li><h4 id="两种调用方式"><a href="#两种调用方式" class="headerlink" title="两种调用方式"></a>两种调用方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarScopeDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E</span>();</span><br><span class="line">        e1.test();</span><br><span class="line"></span><br><span class="line">        <span class="type">Per</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Per</span>();</span><br><span class="line">        e1.test2(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Per</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Per</span>();</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Per p)</span>&#123;<span class="comment">//接收一个类</span></span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Per</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-8-构造器⭐️"><a href="#6-8-构造器⭐️" class="headerlink" title="6.8 构造器⭐️"></a>6.8 构造器⭐️</h2><ul>
<li><h4 id="基本介绍：-14"><a href="#基本介绍：-14" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对<strong>新对象的初始化</strong></p>
</li>
<li><h4 id="基本语法：-7"><a href="#基本语法：-7" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 方法名 (行参列表)&#123;</span><br><span class="line">  方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-17"><a href="#注意事项和细节：-17" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>修饰符可以默认</p>
</li>
<li><p>一个类可以定义多个不同的构造器，即构造器重载</p>
</li>
<li><p>构造器名和类名要相同</p>
</li>
<li><p>构造器没有返回值</p>
</li>
<li><p>构造器是完成对象的初始化，井不是创建对象</p>
</li>
<li><p>在创建对象时,系统自动的调用该类的构造方法</p>
</li>
<li><p><strong>如果没有定义构造器，系统会自动给类生成一个默认无参构造器(默认构造器)</strong></p>
</li>
<li><p><strong>定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Pers</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pers</span>();</span><br><span class="line">        <span class="type">Pers</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pers</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">80</span>);</span><br><span class="line">        System.out.println(p1.name+p1.age);</span><br><span class="line">        System.out.println(p2.name+p2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pers</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pers</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器1被调用&quot;</span>);</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pers</span><span class="params">(String pName,<span class="type">int</span> pAge)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器2被调用&quot;</span>);</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="6-9-this"><a href="#6-9-this" class="headerlink" title="6.9  this"></a>6.9  this</h2><ul>
<li><h4 id="基本介绍：-15"><a href="#基本介绍：-15" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java虚拟机会给每个对象分配this，代表当前对象</p>
</li>
<li><h4 id="内存分析："><a href="#内存分析：" class="headerlink" title="内存分析："></a>内存分析：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-27%2015.38.13.jpg" alt="截屏2022-04-27 15.38.13"></p>
</li>
<li><h4 id="注意事项和细节：-18"><a href="#注意事项和细节：-18" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>this关键字可以用来访问本类的属性、方法、构造器</li>
<li>this用于区分当前类的属性和局部变量</li>
<li>访问成员方法的语法：this.方法名(参数列表);</li>
<li><strong>访问构造器语法：this(参数列表)：注意只能在构造器中使用(在构造器中访问另外一个构造器，必须放在第一条语句)</strong></li>
<li>this不能在类定义的外部使用，只能在类定义的方法中使用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;marry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;marry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(p1.compareTo(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(person p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="7-面向对象-中级"><a href="#7-面向对象-中级" class="headerlink" title="7 面向对象(中级)"></a>7 面向对象(中级)</h1><h2 id="7-0-IDEA"><a href="#7-0-IDEA" class="headerlink" title="7.0  IDEA"></a>7.0  IDEA</h2><ul>
<li><h4 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h4><ol>
<li>command + d  删除当前行</li>
<li>command + option + 向下光标  向下复制当前行</li>
<li>option + &#x2F;  补全代码</li>
<li>command + &#x2F;  注释</li>
<li>option + enter  导入该行的类</li>
<li>command + option + L  格式化代码</li>
<li>control + R  运行</li>
<li>optio + A  构造器</li>
<li>control + H 查看继承关系</li>
<li>command + B  定位方法</li>
<li>.var  自动变量名</li>
<li>Command + option + T 环绕方式</li>
</ol>
</li>
<li><h4 id="常用模版快捷键"><a href="#常用模版快捷键" class="headerlink" title="常用模版快捷键"></a>常用模版快捷键</h4><ol>
<li>fori  遍历</li>
<li>itar  遍历数组</li>
<li>iter  增强遍历</li>
<li>sout  打印换行</li>
</ol>
</li>
</ul>
<h2 id="7-1-包"><a href="#7-1-包" class="headerlink" title="7.1 包"></a>7.1 包</h2><ul>
<li><h4 id="基本语法：-8"><a href="#基本语法：-8" class="headerlink" title="基本语法："></a>基本语法：</h4><p>Package 包名</p>
</li>
<li><h4 id="包的命名："><a href="#包的命名：" class="headerlink" title="包的命名："></a>包的命名：</h4><ul>
<li>只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字</li>
</ul>
</li>
<li><h4 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h4><ul>
<li>小写字母＋小圆点一般是  com.公司名.项目名.业务模块名</li>
</ul>
</li>
<li><h4 id="引入包："><a href="#引入包：" class="headerlink" title="引入包："></a>引入包：</h4><ol>
<li>import java.uti Scanner；就只是引入一个类Scanner</li>
<li>import java.util*：1&#x2F; 表示将java.util 包所有都引入</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-19"><a href="#注意事项和细节：-19" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>package 的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一个package</li>
<li>import指令 位置放在package的下面，在类定义前面,可以有多句目没有顺序要求</li>
</ol>
</li>
</ul>
<h2 id="7-2-访问修饰符"><a href="#7-2-访问修饰符" class="headerlink" title="7.2 访问修饰符"></a>7.2 访问修饰符</h2><ul>
<li><h4 id="基本介绍：-16"><a href="#基本介绍：-16" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限(范围)</p>
</li>
<li><h4 id="访问权限⭐️⭐️："><a href="#访问权限⭐️⭐️：" class="headerlink" title="访问权限⭐️⭐️："></a>访问权限⭐️⭐️：</h4><ol>
<li><p>公开级别：用public修饰,对外公开</p>
</li>
<li><p>受保护级别：用protected修饰，对子类和同一个包中的类公开</p>
</li>
<li><p>默认级别：没有修饰符号，向同一个包的类公开</p>
</li>
<li><p>私有级别：用private修饰,只有类本身可以访问，不对外公开</p>
<table>
<thead>
<tr>
<th>访问级别</th>
<th>访问修饰符</th>
<th>同类</th>
<th>同包</th>
<th>子类</th>
<th>不同包</th>
</tr>
</thead>
<tbody><tr>
<td>公开</td>
<td>public</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>受保护</td>
<td>protected</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>默认</td>
<td>无</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>私有</td>
<td>private</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-20"><a href="#注意事项和细节：-20" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>修饰符可以用来修饰类中的属性，成员方法以及类</li>
<li><strong>只有默认的和public才能修饰类</strong>，并目遵循上述访问权限的特点</li>
<li>子类待定</li>
<li>成员方法的访问规则和属性完全样</li>
</ol>
</li>
</ul>
<h2 id="7-3-封装⭐️"><a href="#7-3-封装⭐️" class="headerlink" title="7.3 封装⭐️"></a>7.3 封装⭐️</h2><ul>
<li><h4 id="基本介绍：-17"><a href="#基本介绍：-17" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作方法封装在一起数据被保护在内部，程序的其它部分只有通过被授权的操作（方法），才能对数据进行操作</p>
</li>
<li><h4 id="封装步骤："><a href="#封装步骤：" class="headerlink" title="封装步骤："></a>封装步骤：</h4><ol>
<li>将属性进行私有化private[不能直接修改属性]</li>
<li>提供一个公共的(public)set方法，用于对属性判断井赋值<br>public void setxxx(类型 参数名){<br>加入数据验证的业务逻辑;<br>    属性 &#x3D; 参数名;}</li>
<li>提供个公共的(public)get方法，用于获取属性的值<br>public 数据类型 getXxxx(){<br>    return XX;}</li>
</ol>
</li>
</ul>
<h2 id="7-4-继承⭐️"><a href="#7-4-继承⭐️" class="headerlink" title="7.4 继承⭐️"></a>7.4 继承⭐️</h2><ul>
<li><h4 id="基本介绍：-18"><a href="#基本介绍：-18" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>继承可以解决代码复用，当多个类存在相同的属性(变量)和方法时,可以以这些类中抽象出交类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可</p>
</li>
<li><h4 id="基本语法：-9"><a href="#基本语法：-9" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 子类 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-30%2011.21.14.jpg" alt="截屏2022-04-30 11.21.14"></p>
</li>
<li><h4 id="注意事项和细节：-21"><a href="#注意事项和细节：-21" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>子类继承了所有的属性和方法，<strong>非私有的属性和方法可以在子类直接访问</strong>，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p>
</li>
<li><p>子类必须调用父类的构造器，完成父类的初始化</p>
</li>
<li><p>当创建子类对象时，不管使用子类的哪个构造器，<strong>默认情况下总会去调用父类的无参构造器</strong>，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</p>
</li>
<li><p>指定去调用父类的某个构造器，则显式的调用一下：super(参数列表)</p>
</li>
<li><p><strong>super在使用时，必须放在构造器第一行(super只能在构造器中使用)</strong></p>
</li>
<li><p><strong>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</strong></p>
</li>
<li><p>java所有类都是Object类的子类</p>
</li>
<li><p>父类构造器的调用不限于直接父类！将一直往上追潮直到Object类</p>
</li>
<li><p>子类最多只能继承一个父类(指直接继承)，即java中是单继承机制</p>
</li>
<li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopBase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); Object的无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造器TopBase() 被调用...&quot;</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123; <span class="comment">//无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        <span class="comment">//默认super()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类提供一个public的方法,返回了n4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test200&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test300&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test400&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//call</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callTest400</span><span class="params">()</span> &#123;</span><br><span class="line">        test400();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/输入ctrl + H 可以看到类的继承关系</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123; <span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用父类的无参构造器, 如下或者 什么都不写,默认就是调用super()</span></span><br><span class="line">        <span class="comment">//super();//父类的无参构造器</span></span><br><span class="line">        <span class="comment">//2. 调用父类的 Base(String name) 构造器</span></span><br><span class="line">        <span class="comment">//super(&quot;hsp&quot;);</span></span><br><span class="line">        <span class="comment">//3. 调用父类的 Base(String name, int age) 构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;king&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//细节：super在使用时，必须放在构造器第一行</span></span><br><span class="line">        <span class="comment">//细节: super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span></span><br><span class="line">        <span class="comment">//this() 不能再使用了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;<span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//super(); //默认调用父类的无参构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//do nothing...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span> &#123;<span class="comment">//子类方法</span></span><br><span class="line">        <span class="comment">//非私有的属性和方法可以在子类直接访问</span></span><br><span class="line">        <span class="comment">//但是私有属性和方法不能在子类直接访问</span></span><br><span class="line">        System.out.println(n1 + <span class="string">&quot; &quot;</span> + n2 + <span class="string">&quot; &quot;</span> + n3);</span><br><span class="line">        test100();</span><br><span class="line">        test200();</span><br><span class="line">        test300();</span><br><span class="line">        <span class="comment">//test400();错误</span></span><br><span class="line">        <span class="comment">//要通过父类提供公共的方法去访问</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n4=&quot;</span> + getN4());</span><br><span class="line">        callTest400();<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="继承本质："><a href="#继承本质：" class="headerlink" title="继承本质："></a>继承本质：</h4><p>子对象创建完成，建立查找关系</p>
</li>
<li><h4 id="继承内存图⭐️："><a href="#继承内存图⭐️：" class="headerlink" title="继承内存图⭐️："></a>继承内存图⭐️：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-30%2017.13.52.jpg" alt="截屏2022-04-30 17.13.52"></p>
</li>
</ul>
<h2 id="7-5-多态⭐️⭐️"><a href="#7-5-多态⭐️⭐️" class="headerlink" title="7.5 多态⭐️⭐️"></a>7.5 多态⭐️⭐️</h2><h3 id="7-5-1多态"><a href="#7-5-1多态" class="headerlink" title="7.5.1多态"></a>7.5.1多态</h3><ul>
<li><h4 id="基本介绍：-19"><a href="#基本介绍：-19" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>方法或对象具有多种形态，是面向对象的第三大特征，多态是建立在封装和继承基础之上的</p>
</li>
<li><h4 id="多态具体体现"><a href="#多态具体体现" class="headerlink" title="多态具体体现"></a>多态具体体现</h4><ul>
<li>方法的多态<ol>
<li>重写和重载就是体现多态</li>
</ol>
</li>
<li><strong>对象的多态</strong><ol>
<li>一个对象的编译类型和运行类型可以不一致</li>
<li>编译类型在定义对象时，就确定了，不能改变</li>
<li>运行类型是可以变化的</li>
<li><strong>编译类型看定义时 &#x3D; 号 的左边，运行类型看 &#x3D; 号的 右边</strong></li>
</ol>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-22"><a href="#注意事项和细节：-22" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ul>
<li><p>向上转型</p>
<ol>
<li><strong>本质：父类的引用指向了子类的对象</strong></li>
<li>语法：父类类型 引用名 &#x3D; new 子类类型();</li>
<li>特点：编译类型看左边，运行类型看右边</li>
<li>可以调用父类中的所有成员(需遵守访问权限)</li>
<li><strong>不能调用子类特有成员</strong></li>
<li>最终运行效果看子类的具体实现</li>
</ol>
</li>
<li><p>向下转型</p>
<ol>
<li><strong>本质：把指向子类对象的父类引用，转成子类对象的子类引用</strong></li>
<li>语法：子类类型 引用名 &#x3D; (子类类型) 父类引用;</li>
<li>只能强转父类引用，不能强转父类对象</li>
<li><strong>父类的引用必须指向的是当前目标类型的对象</strong></li>
<li>当向下转型后，可以调用子类类型中所有的成员</li>
</ol>
</li>
<li><p>属性</p>
<ol>
<li><p>属性没有重写，属性的值看编译类型</p>
</li>
<li><p><strong>instance of 比较较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型: 父类的引用指向了子类的对象</span></span><br><span class="line">        <span class="comment">//语法：父类类型引用名 = new 子类类型();</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//可以吗? 可以 Object 也是 Cat的父类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型调用方法的规则如下:</span></span><br><span class="line">        <span class="comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span></span><br><span class="line">        <span class="comment">//(2)但是不能调用子类的特有的成员</span></span><br><span class="line">        <span class="comment">//(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        <span class="comment">//animal.catchMouse();错误</span></span><br><span class="line">        <span class="comment">//(4)最终运行效果看子类(运行类型)的具体实现, 即调用方法时，按照从子类(运行类型)开始查找方法</span></span><br><span class="line">        <span class="comment">//，然后调用，规则我前面我们讲的方法调用规则一致。</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼..</span></span><br><span class="line">        animal.run();<span class="comment">//跑</span></span><br><span class="line">        animal.show();<span class="comment">//hello,你好</span></span><br><span class="line">        animal.sleep();<span class="comment">//睡</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师希望，可以调用Cat的 catchMouse方法</span></span><br><span class="line">        <span class="comment">//多态的向下转型</span></span><br><span class="line">        <span class="comment">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span></span><br><span class="line">        <span class="comment">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">        cat.catchMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        <span class="comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">//可以吗？</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//属性没有重写之说！属性的值看编译类型</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(base.count);<span class="comment">// ？ 看编译类型 10</span></span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(sub.count);<span class="comment">//?  20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BB</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  BB);<span class="comment">// true</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  AA);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//aa 编译类型 AA, 运行类型是BB</span></span><br><span class="line">        <span class="comment">//BB是AA子类</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> AA);</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> BB);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> AA);<span class="comment">//false</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(str instanceof AA);</span></span><br><span class="line">        System.out.println(str <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;&#125; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;&#125;<span class="comment">//子类</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="7-5-2-动态绑定机制⭐️⭐️"><a href="#7-5-2-动态绑定机制⭐️⭐️" class="headerlink" title="7.5.2 动态绑定机制⭐️⭐️"></a>7.5.2 动态绑定机制⭐️⭐️</h3><ul>
<li><p>当调用对象方法的时候，该方法会和该对象的内存地址&#x2F;<strong>运行类型</strong>绑定</p>
</li>
<li><p>当调用对象属性时，没有动态綁定机制，哪里声明，哪里使用()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(a.sum());</span><br><span class="line">        System.out.println(a.sum1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;<span class="comment">//当子类不存在sum方法时，会从父类找到sum方法，但动态绑定机制会找到子类的getI返回i值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-5-3-多态的应用"><a href="#7-5-3-多态的应用" class="headerlink" title="7.5.3 多态的应用"></a>7.5.3 多态的应用</h3><ul>
<li><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><ol>
<li>多态数组：定义类型为父类类型，里面保存的实际元素类型为子类类型</li>
<li>多态参数：方法定义的形参类型为父类类型，实参类型允许为子类类型</li>
</ol>
</li>
</ul>
<h2 id="7-6-Super"><a href="#7-6-Super" class="headerlink" title="7.6  Super"></a>7.6  Super</h2><ul>
<li><h4 id="基本介绍：-20"><a href="#基本介绍：-20" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>super代表父类的引用，用于访问父类的属性、方法、构造器</p>
</li>
<li><h4 id="基本语法：-10"><a href="#基本语法：-10" class="headerlink" title="基本语法："></a>基本语法：</h4><ol>
<li>访问父类的属性，但不能访问父类的private属性<br>super.属性名;</li>
<li>访问父类的方法，不能访问父类的private方法<br>super.方法名(参数列表);</li>
<li>访问父类的构造器(只能放在构造器的第一句，只能出现一句)<br>super(参数列表);</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-23"><a href="#注意事项和细节：-23" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>调用父类的构造器的好处 (分工明确，父类属性由父类初始化，子类的属性由子类初始化)</li>
<li>当子类中有和父类中的成员(属性和方法) 重名时，为了访问父类的成员，必须通过super，如果没有重名，使用super、this、 直接访问效果相同</li>
<li>super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则</li>
</ol>
</li>
<li><h4 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a>super和this</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-01%2014.30.49.jpg" alt="截屏2022-05-01 14.30.49"></p>
</li>
<li><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的eat().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="comment">//public int n1 = 100;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void cal() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;A类的cal() 方法...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；</span></span><br><span class="line">        <span class="comment">// 如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则。A-&gt;B-&gt;C</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;super.n1=&quot;</span> + <span class="built_in">super</span>.n1);</span><br><span class="line">        <span class="built_in">super</span>.cal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类的属性 , 但不能访问父类的private属性 [案例]super.属性名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n2 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n3 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的sum()&quot;</span>);</span><br><span class="line">        <span class="comment">//希望调用父类-A 的cal方法</span></span><br><span class="line">        <span class="comment">//这时，因为子类B没有cal方法，因此我可以使用下面三种方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法时(cal() 和 this.cal())，顺序是:</span></span><br><span class="line">        <span class="comment">// (1)先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">// (3)如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找方法的过程中，没有找到，则提示方法不存在</span></span><br><span class="line">        <span class="comment">//cal();</span></span><br><span class="line">        <span class="built_in">this</span>.cal(); <span class="comment">//等价 cal</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法(super.call()) 的顺序是直接查找父类，其他的规则一样</span></span><br><span class="line">        <span class="comment">//super.cal();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示访问属性的规则</span></span><br><span class="line">        <span class="comment">//n1 和 this.n1 查找的规则是</span></span><br><span class="line">        <span class="comment">//(1) 先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">//(2) 如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">//(3) 如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找属性的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找属性的过程中，没有找到，则提示属性不存在</span></span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找n1 (super.n1) 的顺序是直接查找父类属性，其他的规则一样</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的方法，不能访问父类的private方法 super.方法名(参数列表);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.test100();</span><br><span class="line">        <span class="built_in">super</span>.test200();</span><br><span class="line">        <span class="built_in">super</span>.test300();</span><br><span class="line">        <span class="comment">//super.test400();//不能访问父类private方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的构造器(这点前面用过)：super(参数列表);只能放在构造器的第一句，只能出现一句！</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        <span class="comment">//super(&quot;jack&quot;, 10);</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7-7方法重写-overwrite"><a href="#7-7方法重写-overwrite" class="headerlink" title="7.7方法重写(overwrite)"></a>7.7方法重写(overwrite)</h2><ul>
<li><h4 id="基本介绍：-21"><a href="#基本介绍：-21" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>子类的方法和父类方法一致，那么子类的方法覆盖了父类的方法</p>
</li>
<li><h4 id="注意事项和细节：-24"><a href="#注意事项和细节：-24" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>子类的方法的形参列表,方法名称，要和父类方法的形参列表,方法名称完全一样</li>
<li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类</li>
<li>子类方法大于等于父类方法的访问权限</li>
</ol>
</li>
</ul>
<h2 id="7-8-Object类"><a href="#7-8-Object类" class="headerlink" title="7.8  Object类"></a>7.8  Object类</h2><ul>
<li><h4 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h4><ol>
<li><p>既可以判断基本类型，又可以判断引用类型</p>
</li>
<li><p>如果判断基本类型，判断的是值是否相等</p>
</li>
<li><p>如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> b;</span><br><span class="line">        System.out.println(a == c);</span><br><span class="line">        <span class="type">B</span> <span class="variable">bObj</span> <span class="operator">=</span> a;</span><br><span class="line">        System.out.println(bObj == c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><ol>
<li>equals:是Object类中的方法，只能判断引用类型</li>
<li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断<strong>内容</strong>是否相等</li>
</ol>
</li>
<li><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><ol>
<li>提高具有哈希结构的容器的效率</li>
<li><strong>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</strong></li>
<li><strong>两个引用，如果指向的是不同对象，则哈希值是不一样的</strong></li>
<li>哈希值主要根据地址号来的，<a href="">不能完全将哈希值等价地址</a></li>
<li>后面在集合中hashCode 如果需要的话，也会重写</li>
</ol>
</li>
<li><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><ol>
<li>默认返回：全类名＋@+哈希值的十六进制</li>
<li>子类往往重写to String方法，用于返回对象的属性信息</li>
<li>重写toString方法，打印对象或拼接对象时，都会自动调用该对象的toString形式</li>
<li>当直接输出一个对象时，toString 方法会被默认的调用</li>
</ol>
</li>
<li><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h4><ol>
<li>当对象被回收时，系统自动调用该对象的finalize方法</li>
<li>子类可以重写该方法，做一些释放资源的操作</li>
<li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，<strong>在销毁该对象前，会先调用finalize方法</strong></li>
<li>垃圾回收机制的调用，是由系统来決定(即有自己的GC算法)，也可以通过System.gc() 主动触发垃圾回收机制</li>
</ol>
</li>
</ul>
<h2 id="7-9断点调试"><a href="#7-9断点调试" class="headerlink" title="7.9断点调试"></a>7.9断点调试</h2><ul>
<li><h4 id="基本介绍：-22"><a href="#基本介绍：-22" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</p>
</li>
<li><h4 id="注意事项和细节：-25"><a href="#注意事项和细节：-25" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>在断点调试 过程中，是运行状态，是以对象的运行类型来执行的</li>
<li>F7：跳入方法内</li>
<li>F8：逐行执行代码<br>shift+F8:跳出方法</li>
<li>F9：resume，执行到下一个断点</li>
</ol>
</li>
</ul>
<h1 id="8-面向对象-高级"><a href="#8-面向对象-高级" class="headerlink" title="8 面向对象(高级)"></a>8 面向对象(高级)</h1><h2 id="8-1-类变量和类方法⭐️"><a href="#8-1-类变量和类方法⭐️" class="headerlink" title="8.1 类变量和类方法⭐️"></a>8.1 类变量和类方法⭐️</h2><h3 id="8-1-1-类变量"><a href="#8-1-1-类变量" class="headerlink" title="8.1.1 类变量"></a>8.1.1 类变量</h3><ul>
<li><h4 id="基本介绍：-23"><a href="#基本介绍：-23" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量,任何一个该类的对象去访问它时,取到的都是相同的值,同样任何一个该类的对象去修改它时,修改的也是同一个变量</p>
</li>
<li><h4 id="基本语法：-11"><a href="#基本语法：-11" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="如何访问类变量："><a href="#如何访问类变量：" class="headerlink" title="如何访问类变量："></a>如何访问类变量：</h4><ol>
<li>类名.类变量名</li>
<li>对象名.类变量名</li>
<li>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</li>
</ol>
</li>
<li><h4 id="内存布局："><a href="#内存布局：" class="headerlink" title="内存布局："></a>内存布局：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-10%2015.37.17.jpg" alt="截屏2022-05-10 15.37.17"></p>
</li>
<li><h4 id="注意事项和细节：-26"><a href="#注意事项和细节：-26" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</li>
<li>加上static称为类变量或静态变量，否则称为实例变量&#x2F;普通变量&#x2F;非静态变量</li>
<li>类变量可以通过 类名.类变量名 或者 对象名.类变量名来访问</li>
<li>实例变量不能通过类名.类变量名方式访问</li>
<li><strong>类变量是在类加载时就初始化</strong></li>
<li><strong>类变量的生命周期是随类的加载开始，随着类消亡而销毁</strong></li>
</ol>
</li>
</ul>
<h3 id="8-1-2-类方法"><a href="#8-1-2-类方法" class="headerlink" title="8.1.2 类方法"></a>8.1.2 类方法</h3><ul>
<li><h4 id="基本介绍：-24"><a href="#基本介绍：-24" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类方法也叫静态方法</p>
</li>
<li><h4 id="基本语法：-12"><a href="#基本语法：-12" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据返回类型 方法名()&#123;&#125;;</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据返回类型 方法名()&#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="类方法调用："><a href="#类方法调用：" class="headerlink" title="类方法调用："></a>类方法调用：</h4><ol>
<li>类名.类方法名</li>
<li>对象名.类方法名</li>
<li>满足访问修饰符的访向权限和范围</li>
</ol>
</li>
<li><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ol>
<li>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法,提高开发效率</li>
<li>程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-27"><a href="#注意事项和细节：-27" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区：<br>类方法中无this的参数，普通方法中隐含着this的参数</li>
<li>类方法可以通过类名调用，也可以通过对象名调用</li>
<li>音通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)，不能通过类名调用</li>
<li>类方法中不允许使用和对象有关的关键字，比如this和super</li>
<li><strong>静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员</strong></li>
</ol>
</li>
</ul>
<h2 id="8-2-main方法"><a href="#8-2-main方法" class="headerlink" title="8.2  main方法"></a>8.2  main方法</h2><ul>
<li><h4 id="深入理解main方法："><a href="#深入理解main方法：" class="headerlink" title="深入理解main方法："></a>深入理解main方法：</h4><ol>
<li>java虛拟机需要调用类的main0方法，所以该方法的访问权限化须是public</li>
<li>java虚拟机在执行main0方法时不必创建对象，所以该方法心须是static</li>
<li>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li>
<li>java 执行的程序 参数1 参数2 参数3</li>
</ol>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-10%2016.50.41.jpg" alt="截屏2022-05-10 16.50.41"></p>
<ul>
<li><h4 id="注意事项和细节：-28"><a href="#注意事项和细节：-28" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性</li>
<li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的目静态成员</li>
</ol>
</li>
</ul>
<h2 id="8-3-代码块"><a href="#8-3-代码块" class="headerlink" title="8.3 代码块"></a>8.3 代码块</h2><ul>
<li><h4 id="基本介绍：-25"><a href="#基本介绍：-25" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>代码化块又称为初始化块,属于类中的成员，类似于方法，将逻辑语句封装在方法体中，通过们包围起来。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用</p>
</li>
<li><h4 id="基本语法：-13"><a href="#基本语法：-13" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">  代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><ol>
<li>修饰符 可选，要写的话，也只能写 static</li>
<li>代码块分为两类，使用static 修饰的叫静态代码块，没有static修饰的，叫普通代码块</li>
<li>逻辑语句可以为任何逻辑语句</li>
<li>：号可以写上，也可以省略</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-29"><a href="#注意事项和细节：-29" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>static代码块是类加载时执行，且只会执行一次</li>
<li>普通代码块是在创建对象的调用的，创建一次，调用一次</li>
<li>类什么时候被加载⭐️⭐️：<ul>
<li>创建对象实例时</li>
<li>创建子类对象实例时，父类也会被加载</li>
<li>使用类的静态成员时</li>
</ul>
</li>
<li>创建一个<strong>对象</strong>时，在一个类的调用<strong>顺序</strong>：<ul>
<li>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静<br>态变量初始化，则按他们定义的顺序调</li>
<li>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和stat多个普通属性初始化，则按定义顺序调用)</li>
<li>调用构造器</li>
</ul>
</li>
<li>构造方法(构造器)的最前面其实隐含了 super()和调用普通代码块</li>
<li><strong>创建子类时顺序</strong>⭐️⭐️：<ul>
<li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>父类构造方法</li>
<li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>子类构造方法</li>
</ul>
</li>
<li>静态代码块只能直接调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员</li>
</ol>
</li>
</ul>
<h2 id="8-4-单例设计模式"><a href="#8-4-单例设计模式" class="headerlink" title="8.4 单例设计模式"></a>8.4 单例设计模式</h2><ul>
<li><h4 id="基本介绍：-26"><a href="#基本介绍：-26" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p>
<p>单例模式有两种方式：1. 饿汉式  2.懒汉式</p>
</li>
<li><h4 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h4><ol>
<li><p>构造器私有化</p>
</li>
<li><p>类的内部创建静态对象</p>
</li>
<li><p>向外暴露一个静态公共方法</p>
</li>
<li><p>特点：在类加载的时候就创建对象实例，可能存在资源浪费</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">Instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h4><ol>
<li><p>构造器私有化</p>
</li>
<li><p>定义一个static静态属性对象</p>
</li>
<li><p>提供一个public的static方法，返回一个对象</p>
</li>
<li><p>只有当使用(3)的方法时，才返回对象，再次调用时，返回上次创建的对象</p>
</li>
<li><p>特点：线程安全问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cat == <span class="literal">null</span>)&#123;</span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><ol>
<li>最主要的区别在于创建对象的时机不同：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建</li>
<li>饿汉式不存在线程安全问题，徽汉式存在线程安全问题</li>
<li>饿汉式存在浪费姿源的可能，对象实例都没有使用，那么饿汉式创建的对象就浪费，懒汉式是使用时才创建，就不存在这个问题</li>
</ol>
</li>
</ul>
<h2 id="8-5-final"><a href="#8-5-final" class="headerlink" title="8.5  final"></a>8.5  final</h2><ul>
<li><h4 id="基本介绍：-27"><a href="#基本介绍：-27" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>final可以修饰类、属性、方法、局部变量</p>
</li>
<li><p>final 类，类不能被继承</p>
</li>
<li><p>final 方法，子类无法重写方法</p>
</li>
<li><p>final 属性，属性无法被修改</p>
</li>
<li><p>final 局部变量，局部变量无法被修改</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-30"><a href="#注意事项和细节：-30" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>final修饰的属性又叫常量，一般用XX_XX_XX 来命名</li>
<li>final<strong>修饰的属性在定义时</strong>,必须赋初值,并且以后不能再修改，赋值可以在如下位置：<br><strong>定义时、构造器、代码块</strong></li>
<li>final修饰的属性是<strong>静态的</strong>，则初始化的位置只能是：定义时、静态代码块</li>
<li>final类不能继承，但可以实例化对象</li>
<li><strong>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</strong></li>
<li>如果一个类已经是final类了，就没有必要再将方法修饰成final方法</li>
<li>final不能修饰构造器本身</li>
<li>final 和static 往往搭配使用，效率更高，不会导致类加载-底层编译器做了优化处理</li>
<li>包装类(Integer, Double,Float,Boolean等都是final)，String也是final类</li>
</ol>
</li>
</ul>
<h2 id="8-6-抽象类"><a href="#8-6-抽象类" class="headerlink" title="8.6 抽象类"></a>8.6 抽象类</h2><ul>
<li><h4 id="基本介绍：-28"><a href="#基本介绍：-28" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>用abstract 关键字来修饰一个类时,这个类就叫抽象类</p>
</li>
<li><p>用abstract 关键字来修饰一个方法时,这个方法就是抽象方法，没有方法体</p>
</li>
<li><p>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-31"><a href="#注意事项和细节：-31" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>抽象类不能被实例化</li>
<li><strong>抽象类可以没有abstract方法</strong></li>
<li>一旦类包含了abstract方法,则这个类必须声明为abstract</li>
<li>abstract 只能修饰类和方法</li>
<li>抽象类可以有任意成员，抽象类本质还是类</li>
<li><strong>抽象方法不能有主体</strong></li>
<li><strong>如果一个类继承了抽象类，则它必须实现抽象类的所有的抽象方法，除非它自己也声明为abstract类</strong></li>
<li>抽象方法不能使用private、final 和static来修饰，因为这些关键字都是和重写相违背的</li>
</ol>
</li>
<li><h4 id="抽象类模版设计模式："><a href="#抽象类模版设计模式：" class="headerlink" title="抽象类模版设计模式："></a>抽象类模版设计模式：</h4><ol>
<li>编写方法cal()，可以计算某段代码的耗时时间</li>
<li>编写抽象方法job()</li>
<li>编写一个子类A,继承抽象类Template，井实现job方法</li>
<li>编写一个测试类TestTemplate,看看是否好用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.cal();</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.cal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            job();</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;时间&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            num *= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-7-接口⭐️"><a href="#8-7-接口⭐️" class="headerlink" title="8.7 接口⭐️"></a>8.7 接口⭐️</h2><ul>
<li><h4 id="基本介绍：-29"><a href="#基本介绍：-29" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来</p>
</li>
<li><h4 id="基本语法：-14"><a href="#基本语法：-14" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 类名 implements 接口 &#123;</span><br><span class="line">  自己属性;</span><br><span class="line">  自己方法;</span><br><span class="line">  <span class="comment">//必须实现接口的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Jdk7.0前 接口里的所有方法都没有方法体(只能<strong>抽象方法</strong>)</li>
<li>Jdk8.0后接口类可以有<strong>静态方法，defaut实现方法</strong>，也就是说接口中可以有方法的具体实现</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-32"><a href="#注意事项和细节：-32" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>接口不能被实例化</li>
<li>接口中所有的方法是 public 和 abstrac 方法，接口中抽象方法，可以不用 abstract 修饰</li>
<li>普通类实现接口，就必须将该接口的所有方法实现</li>
<li><strong>抽象类实现接口，可以不用实现接口的方法</strong></li>
<li>一个类同时可以实现多个接口</li>
<li>接口中的属性,只能是 final 的，而且是 public static final 修饰符</li>
<li>接口中属性的访问形式：接口名.属性名</li>
<li>一个接口不能继承其它的类，但是可以继承多个别的接口</li>
<li>接口的修饰符 只能是 public 和默认，这点和类的修饰符是一样的</li>
</ol>
</li>
<li><h4 id="实现接口VS继承类："><a href="#实现接口VS继承类：" class="headerlink" title="实现接口VS继承类："></a>实现接口VS继承类：</h4><ol>
<li>继承的价值主要在于：解决代码的复用性和可维护性</li>
<li>接口的价值主要在于：设计，设计好各种规范(方法)，让其它类去实现这些方法</li>
<li>接口比继承更加灵活，继承是满足 is -a的关系，而接口只需满足 like-a的关系</li>
<li>接口在一定程度上实现代码解耦</li>
</ol>
</li>
<li><h4 id="接口类型数组："><a href="#接口类型数组：" class="headerlink" title="接口类型数组："></a>接口类型数组：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyArr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多态数组 -&gt; 接口类型数组</span></span><br><span class="line">        Usb[] usbs = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>];</span><br><span class="line">        usbs[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Phone_</span>();</span><br><span class="line">        usbs[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Camera_</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给Usb数组中，存放 Phone 和 相机对象，Phone类还有一个特有的方法call（），</span></span><br><span class="line"><span class="comment">        请遍历Usb数组，如果是Phone对象，除了调用Usb 接口定义的方法外，</span></span><br><span class="line"><span class="comment">        还需要调用Phone 特有方法 call</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usbs.length; i++) &#123;</span><br><span class="line">            usbs[i].work();<span class="comment">//动态绑定..</span></span><br><span class="line">            <span class="comment">//和前面一样，我们仍然需要进行类型的向下转型</span></span><br><span class="line">            <span class="keyword">if</span>(usbs[i] <span class="keyword">instanceof</span> Phone_) &#123;<span class="comment">//判断他的运行类型是 Phone_</span></span><br><span class="line">                ((Phone_) usbs[i]).call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机可以打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-8内部类⭐️"><a href="#8-8内部类⭐️" class="headerlink" title="8.8内部类⭐️"></a>8.8内部类⭐️</h2><ul>
<li><h4 id="基本介绍：-30"><a href="#基本介绍：-30" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类(inner class)，嵌套其他类的类称为外部类(outer class)</li>
<li>内部类最大的特点就是可以直接访问私有属性，井且可以体现类与类之间的包含关系</li>
</ul>
</li>
<li><h4 id="基本语法：-15"><a href="#基本语法：-15" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;<span class="comment">//外部其他类</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="内部类分类："><a href="#内部类分类：" class="headerlink" title="内部类分类："></a>内部类分类：</h4><ol>
<li>定义在外部类局部位置上：1局部类内部(有类名) 2.匿名局部类(没有类名⭐️)</li>
<li>定义在外部类的成员位置上：1.成员内部类(无static修饰) 2.静态内部类(static修饰)</li>
</ol>
</li>
</ul>
<h3 id="8-8-1-局部内部类"><a href="#8-8-1-局部内部类" class="headerlink" title="8.8.1 局部内部类"></a>8.8.1 局部内部类</h3><ul>
<li><h4 id="基本介绍：-31"><a href="#基本介绍：-31" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>局部内部类是定义在外部类的局部位置，在方法中、代码块中，并且有类名</p>
</li>
<li><h4 id="注意事项和细节：-33"><a href="#注意事项和细节：-33" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p><strong>不能添加访问修饰符，但是可以使用final修饰</strong></p>
</li>
<li><p>作用域：仅仅在定义它的方法或代码块中</p>
</li>
<li><p>内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问内部类：创建对象再访问</p>
</li>
<li><p>外部其他类访问局部内部类：不能访问</p>
</li>
<li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果访问外部类的成员使用”外部类名.this.成员”去访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示一遍</span></span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;outer02的hashcode=&quot;</span> + outer02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer02 m2()&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//私有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//1.局部内部类是定义在外部类的局部位置,通常在方法</span></span><br><span class="line">        <span class="comment">//3.不能添加访问修饰符,但是可以使用final 修饰</span></span><br><span class="line">        <span class="comment">//4.作用域 : 仅仅在定义它的方法或代码块中</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner02</span> &#123;<span class="comment">//局部内部类(本质仍然是一个类)</span></span><br><span class="line">            <span class="comment">//2.可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//5. 局部内部类可以直接访问外部类的成员，比如下面 外部类n1 和 m2()</span></span><br><span class="line">                <span class="comment">//7. 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，</span></span><br><span class="line">                <span class="comment">//   使用 外部类名.this.成员)去访问</span></span><br><span class="line">                <span class="comment">//    Outer02.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer02.this就是哪个对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1 + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer02.<span class="built_in">this</span>.n1);</span><br><span class="line">                System.out.println(<span class="string">&quot;Outer02.this hashcode=&quot;</span> + Outer02.<span class="built_in">this</span>);</span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 外部类在方法中，可以创建Inner02对象，然后调用方法即可</span></span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="8-8-2-匿名内部类⭐️⭐️"><a href="#8-8-2-匿名内部类⭐️⭐️" class="headerlink" title="8.8.2 匿名内部类⭐️⭐️"></a>8.8.2 匿名内部类⭐️⭐️</h3><ul>
<li><h4 id="基本介绍：-32"><a href="#基本介绍：-32" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>匿名内部类是定义在外部类的局部位置，比如方法中，并目没有类名，同时还是一个对象</p>
</li>
<li><h4 id="基本语法：-16"><a href="#基本语法：-16" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">  类体;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="底层："><a href="#底层：" class="headerlink" title="底层："></a>底层：</h4><ol>
<li>本质： <strong>IA tiger</strong> &#x3D; class Xxxx$1      class Xxxx$1 &#x3D; <strong>new IA</strong> </li>
<li>接口的底层：class Xxxx$1 <strong>implement</strong> IA{@Overide}</li>
<li>本质： <strong>Father father</strong> &#x3D; class Xxxx$2      class Xxxx$2 &#x3D; <strong>new Father</strong> </li>
<li>类的底层：class Xxxx$2 <strong>extends</strong> Father{@Overide}</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-34"><a href="#注意事项和细节：-34" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>匿名内部类既是一个类的定义同时本身也是一个对象，因此从语法上看，<strong>它既有定义类的特征，也有创建对象的特征</strong></p>
</li>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>不能添加访问修饰符,因为它的地位就是一个局部变量</p>
</li>
<li><p>作用域：仅仅在定义它的方法或代码块中</p>
</li>
<li><p>匿名内部类方位外部类成员：直接访问</p>
</li>
<li><p>外部其他类访问匿名内部类：不能访问</p>
</li>
<li><p>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer04</span> <span class="variable">outer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer04</span>();</span><br><span class="line">        outer04.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer04</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1.需求： 想使用IA接口,并创建对象</span></span><br><span class="line">        <span class="comment">//2.传统方式，是写一个类，实现该接口，并创建对象</span></span><br><span class="line">        <span class="comment">//3.需求是 Tiger/Dog 类只是使用一次，后面再不使用</span></span><br><span class="line">        <span class="comment">//4. 可以使用匿名内部类来简化开发</span></span><br><span class="line">        <span class="comment">//5. tiger的编译类型 ? IA</span></span><br><span class="line">        <span class="comment">//6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们看底层 会分配 类名 Outer04$1</span></span><br><span class="line"><span class="comment">            class Outer04$1 implements IA &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void cry() &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span></span><br><span class="line">        <span class="comment">//   返回给 tiger</span></span><br><span class="line">        <span class="comment">//8. 匿名内部类使用一次，就不能再使用</span></span><br><span class="line">        <span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎叫唤...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;tiger的运行类型=&quot;</span> + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        IA tiger = new Tiger();</span></span><br><span class="line"><span class="comment">//        tiger.cry();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//分析</span></span><br><span class="line">        <span class="comment">//1. father编译类型 Father</span></span><br><span class="line">        <span class="comment">//2. father运行类型 Outer04$2</span></span><br><span class="line">        <span class="comment">//3. 底层会创建匿名内部类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            class Outer04$2 extends Father&#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void test() &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span></span><br><span class="line">        <span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写了test方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;father对象的运行类型=&quot;</span> + father.getClass());<span class="comment">//Outer04$2</span></span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于抽象类的匿名内部类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小狗吃骨头...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;<span class="comment">//接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Tiger implements IA &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class Dog implements  IA&#123;</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;小狗汪汪...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClassDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer03</span> <span class="variable">outer03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer03</span>();</span><br><span class="line">        outer03.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer03</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写hi方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        person.hi();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写ok方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.ok(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.ok(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person ok()&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CellPhone</span> <span class="variable">cellPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellPhone</span>();</span><br><span class="line">        cellPhone.alarmclock(<span class="keyword">new</span> <span class="title class_">Bell</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                System.out.println(<span class="string">&quot;懒猪起床&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span>&#123;</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="8-8-3-成员内部类"><a href="#8-8-3-成员内部类" class="headerlink" title="8.8.3 成员内部类"></a>8.8.3 成员内部类</h3><ul>
<li><h4 id="基本介绍：-33"><a href="#基本介绍：-33" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p>
</li>
<li><h4 id="注意事项和细节：-35"><a href="#注意事项和细节：-35" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>可以添加任意访问修饰符</p>
</li>
<li><p>作用域：为整个外部类类体</p>
</li>
<li><p>成员内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问成员内部类；创建对象，再访问</p>
</li>
<li><p>外部其他类访问成员内部类：</p>
<ul>
<li><p>外部类.内部类  引用名 &#x3D; 外部对象.new 内部类();</p>
</li>
<li><p>外部类.内部类  引用名 &#x3D; <strong>外部对象</strong>.get();</p>
<!--需要创建外部类对象实例，get()为内部类返回对象的方法--></li>
</ul>
</li>
<li><p>如果外部类和成员内部类的成员重名时，成员内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        outer08.t1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类，使用成员内部类的三种方式</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 第一种方式</span></span><br><span class="line">        <span class="comment">// outer08.new Inner08(); 相当于把 new Inner08()当做是outer08成员</span></span><br><span class="line">        <span class="comment">// 这就是一个语法，不要特别的纠结.</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        <span class="comment">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08对象</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08Instance</span> <span class="operator">=</span> outer08.getInner08Instance();</span><br><span class="line">        inner08Instance.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi()方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注意: 成员内部类，是定义在外部内的成员位置上</span></span><br><span class="line">    <span class="comment">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner08</span> &#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> <span class="number">99.8</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="comment">//如果成员内部类的成员和外部类的成员重名，会遵守就近原则.</span></span><br><span class="line">            <span class="comment">//，可以通过  外部类名.this.属性 来访问外部类的成员</span></span><br><span class="line">            System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1 + <span class="string">&quot; name = &quot;</span> + name + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer08.<span class="built_in">this</span>.n1);</span><br><span class="line">            hi();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法，返回一个Inner08实例</span></span><br><span class="line">    <span class="keyword">public</span> Inner08 <span class="title function_">getInner08Instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用成员内部类</span></span><br><span class="line">        <span class="comment">//创建成员内部类的对象，然后使用相关的方法</span></span><br><span class="line">        <span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        System.out.println(inner08.sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="8-8-4-静态内部类"><a href="#8-8-4-静态内部类" class="headerlink" title="8.8.4 静态内部类"></a>8.8.4 静态内部类</h3><ul>
<li><h4 id="基本介绍：-34"><a href="#基本介绍：-34" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>静态内部类是定义在外部类的成员位置，并且有static修饰</p>
</li>
<li><h4 id="注意事项和细节：-36"><a href="#注意事项和细节：-36" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p>
</li>
<li><p>可以添加任意访问修饰符</p>
</li>
<li><p>作用域：整个外部类类体</p>
</li>
<li><p>静态内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问静态内部类：创建对象，再访问</p>
</li>
<li><p>外部其他类访问静态内部类：</p>
<ul>
<li><p>外部类.内部类  引用名 &#x3D; new 外部类.内部类();</p>
</li>
<li><p>外部类.内部类  引用名 &#x3D; <strong>外部对象</strong>.get();</p>
<!--需要创建外部类对象实例，get()为内部类返回对象的方法-->
</li>
<li><p>外部类.内部类  引用名 &#x3D; <strong>外部类</strong>.get();</p>
<!--不需要创建外部类对象实例--></li>
</ul>
</li>
<li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer10</span> <span class="variable">outer10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>();</span><br><span class="line">        outer10.m1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类 使用静态内部类</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="comment">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>.Inner10();</span><br><span class="line">        inner10.say();</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//编写一个方法，可以返回静态内部类的对象实例.</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner101</span> <span class="operator">=</span> outer10.getInner10();</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        inner101.say();</span><br><span class="line"></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10_</span> <span class="operator">=</span> Outer10.getInner10_();</span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        inner10_.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer10</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//Inner10就是静态内部类</span></span><br><span class="line">    <span class="comment">//1. 放在外部类的成员位置</span></span><br><span class="line">    <span class="comment">//2. 使用static 修饰</span></span><br><span class="line">    <span class="comment">//3. 可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</span></span><br><span class="line">    <span class="comment">//4. 可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="comment">//5. 作用域 ：同其他的成员，为整个类体</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner10</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;韩顺平教育&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//如果外部类和静态内部类的成员重名时，静态内部类访问的时，</span></span><br><span class="line">            <span class="comment">//默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.成员)</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot; 外部类name= &quot;</span> + Outer10.name);</span><br><span class="line">            cry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123; <span class="comment">//外部类---访问------&gt;静态内部类 访问方式：创建对象，再访问</span></span><br><span class="line">        <span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">        inner10.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner10 <span class="title function_">getInner10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inner10 <span class="title function_">getInner10_</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="8-9-类加载顺序⭐️⭐️"><a href="#8-9-类加载顺序⭐️⭐️" class="headerlink" title="8.9 类加载顺序⭐️⭐️"></a>8.9 类加载顺序⭐️⭐️</h2><ul>
<li><h4 id="类什么时候被加载："><a href="#类什么时候被加载：" class="headerlink" title="类什么时候被加载："></a>类什么时候被加载：</h4><ul>
<li>创建对象实例时</li>
<li>创建子类对象实例时，父类也会被加载</li>
<li>使用类的静态成员时</li>
</ul>
</li>
<li><h4 id="创建一个对象时，在一个类的调用顺序："><a href="#创建一个对象时，在一个类的调用顺序：" class="headerlink" title="创建一个对象时，在一个类的调用顺序："></a>创建一个对象时，在一个类的调用<strong>顺序</strong>：</h4><ol>
<li><p>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静</p>
<p>态变量初始化，则按他们定义的顺序调</p>
</li>
<li><p>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</p>
</li>
<li><p>调用构造方法</p>
</li>
</ol>
</li>
<li><h4 id="创建子类时顺序："><a href="#创建子类时顺序：" class="headerlink" title="创建子类时顺序："></a>创建子类时顺序：</h4><ol>
<li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>父类构造方法</li>
<li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>子类构造方法</li>
</ol>
</li>
</ul>
<h1 id="9-枚举和注解"><a href="#9-枚举和注解" class="headerlink" title="9 枚举和注解"></a>9 枚举和注解</h1><ul>
<li><h4 id="基本介绍：-35"><a href="#基本介绍：-35" class="headerlink" title="基本介绍："></a>基本介绍：</h4>枚举是一组常量的集合，属于一种特殊的类，里面只包含一组有限的特定的对象</li>
</ul>
<h2 id="9-1-自定义类实现枚举"><a href="#9-1-自定义类实现枚举" class="headerlink" title="9.1 自定义类实现枚举"></a>9.1 自定义类实现枚举</h2><ul>
<li><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>构造器私有化</li>
<li>本类内部创建一组对象</li>
<li>对外暴露对象(通过为对象添加public final static修饰符)</li>
<li>提供get方法，但是不提供set方法</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-37"><a href="#注意事项和细节：-37" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>不需要提供setxxx 方法，因为枚举对象值通常为只读</li>
<li>枚举对象&#x2F;属性使用 final + static 共同修饰，实现底层优化</li>
<li>枚举对象名通常使用全部大写，常量的命名规范</li>
<li>枚举对象根据需要，也可以有多个属性</li>
</ol>
</li>
</ul>
<h2 id="9-2-enum关键字实现枚举"><a href="#9-2-enum关键字实现枚举" class="headerlink" title="9.2 enum关键字实现枚举"></a>9.2 enum关键字实现枚举</h2><ul>
<li><h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li><p>关键字 enum 代替 class</p>
</li>
<li><p>行首：常量名(实参列表)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>),WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="注意事项和细节：-38"><a href="#注意事项和细节：-38" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>使用enum 关键字开发一个枚举类时，默认会继承Enum类</p>
</li>
<li><p>传统的 public static final Season SPRING &#x3D; new Season(“春天””温暖”)；</p>
<p>简化成 SPRING(“春天”，”温暖”)，我们必须知道它调用的是哪个构造器</p>
</li>
<li><p>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略</p>
</li>
<li><p>多个枚举对象，使用,间隔，最后;结尾</p>
</li>
<li><p>枚举对象必须放在枚举类行首</p>
</li>
</ol>
</li>
<li><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>toString：Enum类己经重写过了，返回的是当前对象名子类可以重写该方法，用于返回对象的属性信息</p>
</li>
<li><p>name：返回当前对象名(常量名)，子类中不能重写</p>
</li>
<li><p>ordinal：返回当前对象的位置号，默认从0开始</p>
</li>
<li><p>values：返回当前枚举类中所有的常量</p>
</li>
<li><p>valueof：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</p>
</li>
<li><p>compareTo：比较两个枚举常量的编号，做差</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用Season2 枚举类，来演示各种方法</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn</span> <span class="operator">=</span> Season2.AUTUMN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出枚举对象的名字</span></span><br><span class="line">        System.out.println(autumn.name());</span><br><span class="line">        <span class="comment">//ordinal() 输出的是该枚举对象的次序/编号，从0开始编号</span></span><br><span class="line">        <span class="comment">//AUTUMN 枚举对象是第三个，因此输出 2</span></span><br><span class="line">        System.out.println(autumn.ordinal());</span><br><span class="line">        <span class="comment">//从反编译可以看出 values方法，返回 Season2[]</span></span><br><span class="line">        <span class="comment">//含有定义的所有枚举对象</span></span><br><span class="line">        Season2[] values = Season2.values();</span><br><span class="line">        System.out.println(<span class="string">&quot;===遍历取出枚举对象(增强for)====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Season2 season: values) &#123;<span class="comment">//增强for循环</span></span><br><span class="line">            System.out.println(season);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</span></span><br><span class="line">        <span class="comment">//执行流程</span></span><br><span class="line">        <span class="comment">//1. 根据你输入的 &quot;AUTUMN&quot; 到 Season2的枚举对象去查找</span></span><br><span class="line">        <span class="comment">//2. 如果找到了，就返回，如果没有找到，就报错</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season2.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;autumn1=&quot;</span> + autumn1);</span><br><span class="line">        System.out.println(autumn == autumn1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compareTo：比较两个枚举常量，比较的就是编号</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1. 就是把 Season2.AUTUMN 枚举对象的编号 和 Season2.SUMMER枚举对象的编号比较</span></span><br><span class="line">        <span class="comment">//2. 看看结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public final int compareTo(E o) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            return self.ordinal - other.ordinal;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        Season2.AUTUMN的编号[2] - Season2.SUMMER的编号[3]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充了一个增强for</span></span><br><span class="line"><span class="comment">//        int[] nums = &#123;1, 2, 9&#125;;</span></span><br><span class="line"><span class="comment">//        //普通的for循环</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;=====普通的for=====&quot;);</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(nums[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;=====增强的for=====&quot;);</span></span><br><span class="line"><span class="comment">//        //执行流程是 依次从nums数组中取出数据，赋给i, 如果取出完毕，则退出for</span></span><br><span class="line"><span class="comment">//        for(int i : nums) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;i=&quot; + i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="实现接口："><a href="#实现接口：" class="headerlink" title="实现接口："></a>实现接口：</h4><ol>
<li>使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</li>
<li>枚举类和普通类一样，可以实现接口：enum 类名 implements 接口1，接口2{}</li>
</ol>
</li>
</ul>
<h2 id="9-3-JDk内置的基本注解类型"><a href="#9-3-JDk内置的基本注解类型" class="headerlink" title="9.3 JDk内置的基本注解类型"></a>9.3 JDk内置的基本注解类型</h2><ul>
<li><h4 id="基本介绍：-36"><a href="#基本介绍：-36" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释包,类、方法、属性、构造器、局部变量等数据信息</p>
</li>
<li><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p>
</li>
<li><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替java EE旧版本中所有遗留的繁冗代码和XML配置</p>
</li>
</ul>
</li>
<li><h4 id="基本Annotation介绍："><a href="#基本Annotation介绍：" class="headerlink" title="基本Annotation介绍："></a>基本Annotation介绍：</h4><ul>
<li><p>@Override： 限定某个方法，是重写父类方法，该注解只能用于方法</p>
</li>
<li><p>@Deprecated：用于表示某个程序元素(类，方法等)己过时</p>
</li>
<li><p>@SuppressWarnings：抑制编译器警告</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-1-Override"><a href="#9-3-1-Override" class="headerlink" title="9.3.1 @Override"></a>9.3.1 @Override</h3><ul>
<li><h4 id="基本介绍：-37"><a href="#基本介绍：-37" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>@Override 表示指定重写父类的方法(从编译层面验证)，如果父类没有方法，则会报错</p>
</li>
<li><p>如果没写 @Override 还是会重写父类</p>
</li>
<li><p>@Override 只能修饰方法，不能修饰其它类，包，属性等等</p>
</li>
<li><p>如果写了@Override 注解，编译器就会去检查该方法是否真的重写了父类的方法，若果没有构成重写则编译错误</p>
</li>
<li><p>查看@Override注解源码@Target(ElementType.MRTHOD)，说明只能修饰方法</p>
</li>
<li><p>@Target 是修饰注解的注解，称为元注解</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-2-Deprecated"><a href="#9-3-2-Deprecated" class="headerlink" title="9.3.2 @Deprecated"></a>9.3.2 @Deprecated</h3><ul>
<li><h4 id="基本介绍：-38"><a href="#基本介绍：-38" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>用于表示某个程序元素(类，方法等)己过时</p>
</li>
<li><p>可以修饰方法，类，字段，包，参数 等等</p>
</li>
<li><p>@Target (value&#x3D;(CONSTRUCTOR,FIELD,LOCAL_ VARIABLE, METHOD,PACKAGE, PARAMETER, TYPE})</p>
</li>
<li><p>@Deprecated 的作用可以做到新旧版本的兼容和过渡</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-3-SuppressWarnings"><a href="#9-3-3-SuppressWarnings" class="headerlink" title="9.3.3 @SuppressWarnings"></a>9.3.3 @SuppressWarnings</h3><ul>
<li><h4 id="基本介绍：-39"><a href="#基本介绍：-39" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>抑制编译器警告信息</p>
</li>
<li><p>unchecked 是忽略没有检查的警告</p>
</li>
<li><p>rawtypes 是忽略没有指定泛型的警告</p>
</li>
<li><p>unused 是忽略没有使用某个变量的警告错误</p>
</li>
<li><p>@SuppressWarnings可以修饰的程序元素为，查看@Target</p>
</li>
<li><p>生成@SupperssWarnings 时，不用背，直接点击左侧的黄色提示，就可以选择(注意可以指定生成的位置)</p>
</li>
</ul>
</li>
</ul>
<h2 id="9-4-元注解：对注解进行注解"><a href="#9-4-元注解：对注解进行注解" class="headerlink" title="9.4 元注解：对注解进行注解"></a>9.4 元注解：对注解进行注解</h2><ul>
<li><h4 id="基本介绍：-40"><a href="#基本介绍：-40" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>JDK 的元 Annotation 用于修饰其他 Annotation</p>
</li>
<li><h4 id="四种元注解："><a href="#四种元注解：" class="headerlink" title="四种元注解："></a>四种元注解：</h4><ol>
<li>Retention：指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME</li>
<li>Target：指定注解可以在哪些地方使用</li>
<li>Documented：指定该注解是否会在javadoc体现</li>
<li>lnherited：子类会继承父类注解</li>
</ol>
</li>
</ul>
<h1 id="10-异常"><a href="#10-异常" class="headerlink" title="10 异常"></a>10 异常</h1><ul>
<li><h4 id="基本介绍：-41"><a href="#基本介绍：-41" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Java语言中，将程序执行中发生的不正常情况称为 “异常”</p>
</li>
<li><h4 id="执行中异常事件分类："><a href="#执行中异常事件分类：" class="headerlink" title="执行中异常事件分类："></a>执行中异常事件分类：</h4><ol>
<li>Error(错误)：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情況。比如：StackoverflowError[栈溢出]和OOM(out ofmemory)，Error 是严重错误，程序会崩溃</li>
<li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。，例如空指针访问，<br>试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常口和编译时异常口。</li>
</ol>
</li>
</ul>
<h2 id="10-1-异常体系图⭐️"><a href="#10-1-异常体系图⭐️" class="headerlink" title="10.1 异常体系图⭐️"></a>10.1 异常体系图⭐️</h2><ul>
<li><h4 id="异常体系图："><a href="#异常体系图：" class="headerlink" title="异常体系图："></a>异常体系图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-17%2019.55.21.jpg" alt="截屏2022-05-17 19.55.21"></p>
</li>
<li><h4 id="注意事项和细节：-39"><a href="#注意事项和细节：-39" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>异常分为两大类，运行时异常和编译时异常</li>
<li>运行时异常，编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常java.lang.RuntimeException类及它的子类都是运行时异常</li>
<li>运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li>
<li>编译时异常，是编译器要求必须处置的异常</li>
</ol>
</li>
</ul>
<h2 id="10-2-常见的异常"><a href="#10-2-常见的异常" class="headerlink" title="10.2 常见的异常"></a>10.2 常见的异常</h2><ul>
<li><h4 id="运行时异常："><a href="#运行时异常：" class="headerlink" title="运行时异常："></a>运行时异常：</h4><ul>
<li><p>NullPointerException：空指针异常</p>
</li>
<li><p>ArithmeticException：数学运算异常</p>
</li>
<li><p>ArrayIndexOutOfBoundsException：数组下标越界异常</p>
</li>
<li><p>ClassCastException：类型转换异常</p>
</li>
<li><p>NumberFormatException：数字格式不正确异常</p>
</li>
</ul>
</li>
<li><h4 id="编译时异常："><a href="#编译时异常：" class="headerlink" title="编译时异常："></a>编译时异常：</h4><ul>
<li><p>SQLException：操作数据库时，查询表可能发生异常</p>
</li>
<li><p>lOException：操作文供时，发生的异常</p>
</li>
<li><p>FileNotFoundException：当操作一个不存在的文件时，发生异常</p>
</li>
<li><p>ClassNotFoundException：加载类，而该类不存在时异常</p>
</li>
<li><p>EOFException：操作文件，到文件末尾，发生异常</p>
</li>
<li><p>illegalArguementException：参数异常</p>
</li>
</ul>
</li>
</ul>
<h2 id="10-3-异常处理⭐️"><a href="#10-3-异常处理⭐️" class="headerlink" title="10.3 异常处理⭐️"></a>10.3 异常处理⭐️</h2><ul>
<li><h4 id="基本介绍：-42"><a href="#基本介绍：-42" class="headerlink" title="基本介绍："></a>基本介绍：</h4>异常处理就是当异常发生时，对异常处理的方式</li>
</ul>
<h3 id="10-3-1-try-catch-finally"><a href="#10-3-1-try-catch-finally" class="headerlink" title="10.3.1  try-catch-finally"></a>10.3.1  try-catch-finally</h3><ul>
<li><h4 id="基本介绍：-43"><a href="#基本介绍：-43" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序员在代码中捕获发生的异常，自行处理</p>
</li>
<li><h4 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2010.53.38.jpg"></p>
</li>
<li><h4 id="注意事项和细节：-40"><a href="#注意事项和细节：-40" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块</li>
<li>如果异常没有发生，则顺序执行try的代码块，不会进入到catch块</li>
<li>如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)，则使用如下代码finally{}</li>
<li>可以有多个catch语句，捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception 在后，NullPointer Exception 在前)，如果发生异常，只会匹配一个catch</li>
<li>try-finally配合，相当于没有捕获异常，程序直接崩溃但执行finally</li>
</ol>
</li>
</ul>
<h3 id="10-3-2-throws"><a href="#10-3-2-throws" class="headerlink" title="10.3.2  throws"></a>10.3.2  throws</h3><ul>
<li><h4 id="基本介绍：-44"><a href="#基本介绍：-44" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>将发生的异常抛出，交给调用者(方法)来处理，最顶级的处理者就是JVM，默认抛出运行异常</p>
</li>
<li><h4 id="流程图：-1"><a href="#流程图：-1" class="headerlink" title="流程图："></a>流程图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2010.57.46-20220518111448342.jpg"></p>
</li>
<li><h4 id="注意事项和细节：-41"><a href="#注意事项和细节：-41" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>对于编译异常，程序中必须处理，比如try-catch 或者 throws</li>
<li>对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</li>
<li>子类重写父类的方法时，对抛出异常的规定：子类重与的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类拋出的异常的类型的子类型</li>
<li>在throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必throws</li>
<li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li>
</ol>
</li>
</ul>
<h2 id="10-4-自定义异常"><a href="#10-4-自定义异常" class="headerlink" title="10.4 自定义异常"></a>10.4 自定义异常</h2><ul>
<li><h4 id="基本介绍：-45"><a href="#基本介绍：-45" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>当程序中出现了某些 “错误〞，但该错误信息并没有在Throwable子类中描述处理，这时可以设计异常类，用于描达该错误信息</p>
</li>
<li><h4 id="自定义异常步骤："><a href="#自定义异常步骤：" class="headerlink" title="自定义异常步骤："></a>自定义异常步骤：</h4><ol>
<li>定义类：自定义异常类名(程序员自己写)继承Exception或Runtime Exception</li>
<li>如果继承Exception，属于编译异常</li>
<li>如果继承RuntimeException，属子运行异常(一般来说，继承RuntimeException)</li>
</ol>
</li>
</ul>
<h2 id="10-5-throw和throws"><a href="#10-5-throw和throws" class="headerlink" title="10.5  throw和throws"></a>10.5  throw和throws</h2><ul>
<li><h4 id="对比：-1"><a href="#对比：-1" class="headerlink" title="对比："></a>对比：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2023.10.05.jpg" alt="截屏2022-05-18 23.10.05"></li>
</ul>
<h1 id="11-包装类"><a href="#11-包装类" class="headerlink" title="11 包装类"></a>11 包装类</h1><h2 id="11-0-包装类-Integer例"><a href="#11-0-包装类-Integer例" class="headerlink" title="11.0 包装类(Integer例)"></a>11.0 包装类(Integer例)</h2><ul>
<li><h4 id="基本介绍：-46"><a href="#基本介绍：-46" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>八种基本数据类型相应的引用类型——包装类</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.13.21.jpg" alt="截屏2022-05-19 15.13.21"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.18.44.jpg" alt="截屏2022-05-19 15.18.44"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.19.00.jpg" alt="截屏2022-05-19 15.19.00"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.19.22.jpg" alt="截屏2022-05-19 15.19.22"></p>
</li>
<li><h4 id="装箱和拆箱："><a href="#装箱和拆箱：" class="headerlink" title="装箱和拆箱："></a>装箱和拆箱：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Integer01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示int &lt;--&gt; Integer 的装箱和拆箱</span></span><br><span class="line">        <span class="comment">//jdk5前是手动装箱和拆箱</span></span><br><span class="line">        <span class="comment">//手动装箱 int-&gt;Integer</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="comment">//Integer -&gt; int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk5后，就可以自动装箱和自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="comment">//自动装箱 int-&gt;Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> n2; <span class="comment">//底层使用的是 Integer.valueOf(n2)</span></span><br><span class="line">        <span class="comment">//自动拆箱 Integer-&gt;int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> integer2; <span class="comment">//底层仍然使用的是 intValue()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="包装类方法："><a href="#包装类方法：" class="headerlink" title="包装类方法："></a>包装类方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperVSString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//包装类(Integer)-&gt;String</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();</span><br><span class="line">        <span class="comment">//方式3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String -&gt; 包装类(Integer)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(str4);<span class="comment">//使用到自动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4);<span class="comment">//构造器</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Integer创建机制："><a href="#Integer创建机制：" class="headerlink" title="Integer创建机制："></a>Integer创建机制：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//示例一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例二</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例三</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//底层Integer.valueOf(127)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//-128~127</span></span><br><span class="line">        System.out.println(i5 == i6); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例四</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(i7 == i8);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例五</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="number">127</span>; <span class="comment">//Integer.valueOf(127)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        System.out.println(i9 == i10);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//示例六</span></span><br><span class="line">        Integer i11=<span class="number">127</span>;</span><br><span class="line">        <span class="type">int</span> i12=<span class="number">127</span>;</span><br><span class="line"><span class="comment">//只有有基本数据类型，判断的是</span></span><br><span class="line"><span class="comment">//值是否相同</span></span><br><span class="line">        System.out.println(i11==i12); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例七</span></span><br><span class="line">        Integer i13=<span class="number">128</span>;</span><br><span class="line">        <span class="type">int</span> i14=<span class="number">128</span>;</span><br><span class="line">        System.out.println(i13==i14);<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="11-1-String⭐️"><a href="#11-1-String⭐️" class="headerlink" title="11.1  String⭐️"></a>11.1  String⭐️</h2><ul>
<li><h4 id="基本介绍：-47"><a href="#基本介绍：-47" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>String 对象用于保存字符串，也就是一组字符序列</p>
</li>
<li><p>字符串常量对象是用双引号括起的字符序列</p>
</li>
<li><p>字符串的字符使用Unicode宇符编码，一个字符(不区分字母还是汉字)占两个字节</p>
<p>![截屏2022-05-19 16.36.03](<a href="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19">https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/截屏2022-05-19</a> 16.36.03.jpg)</p>
</li>
</ul>
</li>
<li><h4 id="创建String对象方式："><a href="#创建String对象方式：" class="headerlink" title="创建String对象方式："></a>创建String对象方式：</h4><ol>
<li>直接赋值 String s &#x3D; “hsp”;</li>
<li>调用构造器 String s2 &#x3D; new String(“hsp”);</li>
</ol>
</li>
<li><h4 id="两种方式对比："><a href="#两种方式对比：" class="headerlink" title="两种方式对比："></a>两种方式对比：</h4><ul>
<li><p>方式一：先从常量池查看是否有”hsp”数据空间，如果有，直接指向；</p>
<p>如果沒有则重新创建，然后指向。s最终指向的是常量池的空间地址</p>
</li>
<li><p>方式二：先在堆中创建空间，里面维护了value属性，指向常量池的hsp空间。如果常量池没有”hsp“，重新创建，如果有，直接通过value指向，最终指向的是堆中的空间地址</p>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2016.54.53.jpg" alt="截屏2022-05-19 16.54.53"></p>
</li>
<li><h4 id="常用构造方法："><a href="#常用构造方法：" class="headerlink" title="常用构造方法："></a>常用构造方法：</h4><ul>
<li><p>String s1 &#x3D; new String();</p>
</li>
<li><p>String s2 &#x3D; new String (String original);</p>
</li>
<li><p>String s3 &#x3D; new String (char[] a);</p>
</li>
<li><p>String s4 &#x3D; new String (char[] a,int startIndex,int count);</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-42"><a href="#注意事项和细节：-42" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>String 是 final类，不能被继承</li>
<li>string 有属性 private final char valve []; 用于存放字符串内容</li>
<li><strong>value 是一个final类型，不可以修改(值可以修改，地址不可修改)</strong></li>
<li>intern方法：返回常量池的地址对象</li>
</ol>
</li>
<li><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul>
<li><h4 id="相等特性："><a href="#相等特性：" class="headerlink" title="相等特性："></a>相等特性：</h4><ol>
<li><p>equals判断内容</p>
</li>
<li><p>&#x3D;&#x3D;判断地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>; <span class="comment">//a 指向 常量池的 “hsp”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);<span class="comment">//b 指向堆中对象</span></span><br><span class="line">        System.out.println(a.equals(b)); <span class="comment">//T</span></span><br><span class="line">        System.out.println(a==b); <span class="comment">//F</span></span><br><span class="line">        <span class="comment">//b.intern() 方法返回常量池地址</span></span><br><span class="line">        System.out.println(a==b.intern()); <span class="comment">//T //ntern方法：返回常量池的地址对象</span></span><br><span class="line">        System.out.println(b==b.intern()); <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-09-14%2014.26.46.jpg" alt="截屏2022-09-14 14.26.46"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hspedu&quot;</span>; <span class="comment">//指向常量池”hspedu”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>; <span class="comment">//指向常量池”java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;<span class="comment">//指向常量池”java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);<span class="comment">//指向堆中对象</span></span><br><span class="line">        System.out.println(s2 == s3); <span class="comment">// F</span></span><br><span class="line">        System.out.println(s2 == s4);  <span class="comment">//T</span></span><br><span class="line">        System.out.println(s2.equals(s3));<span class="comment">//T</span></span><br><span class="line">        System.out.println(s1 == s2);  <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-09-14%2014.44.03.jpg" alt="截屏2022-09-14 14.44.03"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.name.equals(p2.name));<span class="comment">//比较内容: True</span></span><br><span class="line">        System.out.println(p1.name == p2.name);  <span class="comment">//T</span></span><br><span class="line">        System.out.println(p1.name == <span class="string">&quot;hspedu&quot;</span>);   <span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bcde&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bcde&quot;</span>);</span><br><span class="line">        System.out.println(s1==s2); <span class="comment">//False</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2023.06.01.jpg" alt="截屏2022-05-19 23.06.01"></p>
<ul>
<li><h4 id="字符串特性："><a href="#字符串特性：" class="headerlink" title="字符串特性："></a>字符串特性：</h4><ol>
<li><p>String c1 &#x3D;“ab”+”cd”;常量在池中相加</p>
</li>
<li><p>String c1 &#x3D; a + b;变量在堆中相加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了两个对象，s1指向“hello”，</span></span><br><span class="line"><span class="comment">//再在常量池中创建“haha”，s1指向&quot;haha“</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于 String a = &quot;helloabc&quot;</span></span><br><span class="line"><span class="comment">//判断创建的常量池对象，是否有引用指向</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">//创建 a对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//创建 b对象</span></span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//1. 先 创建一个 StringBuilder sb = StringBuilder()</span></span><br><span class="line">        <span class="comment">//2. 执行  sb.append(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">//3. sb.append(&quot;abc&quot;);</span></span><br><span class="line">        <span class="comment">//4. String c= sb.toString()</span></span><br><span class="line">        <span class="comment">//最后其实是 c 指向堆中的对象(String) value[] -&gt; 池中 &quot;helloabc&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;helloabc&quot;</span>;</span><br><span class="line">        System.out.println(c == d);<span class="comment">//F c在堆中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;<span class="comment">//直接看池，e指向常量池</span></span><br><span class="line">        System.out.println(d == e);<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*底层：String Builder sb = new String Builder();</span></span><br><span class="line"><span class="comment">sb.append(a);sb.append(b);</span></span><br><span class="line"><span class="comment">sb是在堆中，井且append是在原来字符串的基础上追加的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重要规则：String c1 =“ab”+&quot;cd”;常量在池中相加</span></span><br><span class="line"><span class="comment">        String c1 = a + b;变量在堆中相加</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2022.58.20-20220914143425014.jpg" alt="截屏2022-05-19 22.58.20"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hspedu&quot;</span>;  <span class="comment">//s1 指向池中的 “hspedu”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>; <span class="comment">// s2 指向池中的 “java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;hspedujava&quot;</span>; <span class="comment">//s5 指向池中的 “hspedujava”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> (s1 + s2).intern();<span class="comment">//s6 指向池中的   “hspedujava”</span></span><br><span class="line">        System.out.println(s5 == s6); <span class="comment">//T</span></span><br><span class="line">        System.out.println(s5.equals(s6));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="综合训练"><a href="#综合训练" class="headerlink" title="综合训练"></a>综合训练</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str, <span class="type">char</span> ch[])</span> &#123;</span><br><span class="line">        str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.print(ex.str + <span class="string">&quot; and &quot;</span>);</span><br><span class="line">        System.out.println(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2023.21.28-20220525113711262.jpg" alt="截屏2022-05-19 23.21.28"></p>
</li>
<li><h4 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>equals：区分大小写，判断内容是否相等</p>
</li>
<li><p>equalslgnoreCase：忽略大小写的判断内容是否相等</p>
</li>
<li><p>length：获取字符的个数，字符串的长度</p>
</li>
<li><p>indexOf：获取字符在字符串中第1次出现的索引,索引从0开始，如果找不到,返回-1</p>
</li>
<li><p>lastlndexOf：获取宇符在字符串中最后1次出现的索引,索引从0开始，如找不到,返回-1</p>
</li>
<li><p>substring： 截取指定范围的子串</p>
</li>
<li><p>trim：去前后空格</p>
</li>
<li><p>charAt：获取某索引处的字符，注意不能使用Str[index]这种方式</p>
</li>
<li><p>toUpperCase：大写字母</p>
</li>
<li><p>toLowerCase：小写字母</p>
</li>
<li><p>concat：拼接</p>
</li>
<li><p>replace：替换字符串中的字符</p>
</li>
<li><p>split：分割字符串</p>
</li>
<li><p>compareTo：比较两个字符串的大小</p>
</li>
<li><p>toCharArray：转换成字符数组</p>
</li>
<li><p>format：格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. equals 前面已经讲过了. 比较内容是否相同，区分大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.equalsIgnoreCase 忽略大小写的判断内容是否相等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;johN&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;john&quot;</span>.equalsIgnoreCase(username)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failure!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.length 获取字符的个数，字符串的长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;韩顺平&quot;</span>.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.indexOf 获取字符在字符串对象中第一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;wer@terwe@g&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s1.indexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">// 3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;weIndex=&quot;</span> + s1.indexOf(<span class="string">&quot;we&quot;</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.lastIndexOf 获取字符在字符串中最后一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        s1 = <span class="string">&quot;wer@terwe@g@&quot;</span>;</span><br><span class="line">        index = s1.lastIndexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">//11</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ter的位置=&quot;</span> + s1.lastIndexOf(<span class="string">&quot;ter&quot;</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.substring 截取指定范围的子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello,张三&quot;</span>;</span><br><span class="line">        <span class="comment">//下面name.substring(6) 从索引6开始截取后面所有的内容</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">6</span>));<span class="comment">//截取后面的字符</span></span><br><span class="line">        <span class="comment">//name.substring(0,5)表示从索引0开始截取，截取到索引 5-1=4位置</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">2</span>,<span class="number">5</span>));<span class="comment">//llo</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.toUpperCase转换成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;heLLo&quot;</span>;</span><br><span class="line">        System.out.println(s.toUpperCase());<span class="comment">//HELLO</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.toLowerCase</span></span><br><span class="line">        System.out.println(s.toLowerCase());<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.concat拼接字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;宝玉&quot;</span>;</span><br><span class="line">        s1 = s1.concat(<span class="string">&quot;林黛玉&quot;</span>).concat(<span class="string">&quot;薛宝钗&quot;</span>).concat(<span class="string">&quot;together&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉林黛玉薛宝钗together</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.replace 替换字符串中的字符</span></span><br><span class="line">        s1 = <span class="string">&quot;宝玉 and 林黛玉 林黛玉 林黛玉&quot;</span>;</span><br><span class="line">        <span class="comment">//在s1中，将 所有的 林黛玉 替换成薛宝钗</span></span><br><span class="line">        <span class="comment">// : s1.replace() 方法执行后，返回的结果才是替换过的.</span></span><br><span class="line">        <span class="comment">// 注意对 s1没有任何影响</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s11</span> <span class="operator">=</span> s1.replace(<span class="string">&quot;宝玉&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉 and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line">        System.out.println(s11);<span class="comment">//jack and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.split 分割字符串, 对于某些分割字符，我们需要 转义比如 | \\等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">poem</span> <span class="operator">=</span> <span class="string">&quot;锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//：</span></span><br><span class="line">        <span class="comment">// 1. 以 , 为标准对 poem 进行分割 , 返回一个数组</span></span><br><span class="line">        <span class="comment">// 2. 在对字符串进行分割时，如果有特殊字符，需要加入 转义符 \</span></span><br><span class="line">        String[] split = poem.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        poem = <span class="string">&quot;E:\\aaa\\bbb&quot;</span>;</span><br><span class="line">        split = poem.split(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==分割后内容===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            System.out.println(split[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.toCharArray 转换成字符数组</span></span><br><span class="line">        s = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">            System.out.println(chs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.compareTo 比较两个字符串的大小，如果前者大，</span></span><br><span class="line">        <span class="comment">// 则返回正数，后者大，则返回负数，如果相等，返回0</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// (1) 如果长度相同，并且每个字符也相同，就返回 0</span></span><br><span class="line">        <span class="comment">// (2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小</span></span><br><span class="line">        <span class="comment">//     就返回 if (c1 != c2) &#123;</span></span><br><span class="line">        <span class="comment">//                return c1 - c2;</span></span><br><span class="line">        <span class="comment">//            &#125;</span></span><br><span class="line">        <span class="comment">// (3) 如果前面的部分都相同，就返回 str1.len - str2.len</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;jcck&quot;</span>;<span class="comment">// len = 3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;<span class="comment">// len = 4</span></span><br><span class="line">        System.out.println(a.compareTo(b)); <span class="comment">// 返回值是 &#x27;c&#x27; - &#x27;a&#x27; = 2的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8.format 格式字符串</span></span><br><span class="line">        <span class="comment">/* 占位符有:</span></span><br><span class="line"><span class="comment">         * %s 字符串 %c 字符 %d 整型 %.2f 浮点型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;john&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">56.857</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="comment">//将所有的信息都拼接在一个字符串.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;我的姓名是&quot;</span> + name + <span class="string">&quot;年龄是&quot;</span> + age + <span class="string">&quot;,成绩是&quot;</span> + score + </span><br><span class="line">                <span class="string">&quot;性别是&quot;</span> + gender + <span class="string">&quot;。希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. %s , %d , %.2f %c 称为占位符,这些占位符由后面变量来替换</span></span><br><span class="line">        <span class="comment">//2. %s 由 字符串来替换</span></span><br><span class="line">        <span class="comment">//3. %d 由 整数来替换</span></span><br><span class="line">        <span class="comment">//4. %.2f 表示使用小数来替换，替换后，只会保留小数点两位, 并且进行四舍五入的处理</span></span><br><span class="line">        <span class="comment">//5. %c 使用char 类型来替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatStr</span> <span class="operator">=</span> <span class="string">&quot;我的姓名是%s 年龄是%d，成绩是%.2f 性别是%c.希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">info2</span> <span class="operator">=</span> String.format(formatStr, name, age, score, gender);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;info2=&quot;</span> + info2);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="11-2-StringBuffer⭐️"><a href="#11-2-StringBuffer⭐️" class="headerlink" title="11.2  StringBuffer⭐️"></a>11.2  StringBuffer⭐️</h2><ul>
<li><h4 id="基本介绍：-48"><a href="#基本介绍：-48" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删。</li>
<li>很多方法与String相同，但StringBuffer是可变长度的。</li>
<li>String Buffer是一个容器。</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-43"><a href="#注意事项和细节：-43" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>StringBuffer 的直接父类是 AbstractstringBuilder</li>
<li>StringBuffer 实现了 Serializable，即StringBuffer的对象可以串行化</li>
<li>在父类中 AbstractstringBuilder 有属性 char[] valve,不是final，该 valve 数组存放 宁符串内容，引出存放在堆中的</li>
<li>StringBuffer 是一个final类，不能被继承</li>
<li>StringBuffer 字符内容存在 char[] value，所以在变化〔增加&#x2F;删除)不用每次都更换地址(即不是每次创建新对象)</li>
</ol>
</li>
<li><h4 id="String和StringBuffer对比："><a href="#String和StringBuffer对比：" class="headerlink" title="String和StringBuffer对比："></a>String和StringBuffer对比：</h4><ol>
<li>String保存的是宇符串常量，里面的值不能更改，每次String类的更新实际上就是更改地址</li>
<li>StringBuffer保存的是字符串变量，里面的值可以更改，不用更新地址，效率高</li>
</ol>
</li>
<li><h4 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个 大小为 16的 char[] ,用于存放字符内容</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 通过构造器指定 char[] 大小</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 通过 给一个String 创建 StringBuffer, char[] 大小就是 str.length() + 16</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="String和StringBuffer转换："><a href="#String和StringBuffer转换：" class="headerlink" title="String和StringBuffer转换："></a>String和StringBuffer转换：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String——&gt;StringBuffer</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello tom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1 使用构造器</span></span><br><span class="line"><span class="comment">//注意： 返回的才是StringBuffer对象，对str 本身没有影响</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"><span class="comment">//方式2 使用的是append方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer1 = stringBuffer1.append(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer -&gt;String</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line"><span class="comment">//方式1 使用StringBuffer提供的 toString方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//方式2: 使用构造器来搞定</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3);</span><br></pre></td></tr></table></figure>

</li>
<li><h4 id="常用方法：-2"><a href="#常用方法：-2" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>增：append</p>
</li>
<li><p>删：delete(start,end)</p>
</li>
<li><p>改：replace (start,end,string)</p>
</li>
<li><p>查：indexOf</p>
</li>
<li><p>插：insert</p>
</li>
<li><p>获取长度：length</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">s.append(<span class="string">&#x27;,&#x27;</span>);<span class="comment">// &quot;hello,&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;张三丰&quot;</span>);<span class="comment">//&quot;hello,张三丰&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;赵敏&quot;</span>).append(<span class="number">100</span>).append(<span class="literal">true</span>).append(<span class="number">10.5</span>);<span class="comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span></span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删除索引为&gt;=start &amp;&amp; &lt;end 处的字符</span></span><br><span class="line"><span class="comment">* : 删除 11~14的字符 [11, 14)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s.delete(<span class="number">11</span>, <span class="number">14</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line"><span class="comment">//，使用 周芷若 替换 索引9-11的字符 [9,11)</span></span><br><span class="line">s.replace(<span class="number">9</span>, <span class="number">11</span>, <span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰周芷若true10.5&quot;</span></span><br><span class="line"><span class="comment">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">System.out.println(indexOf);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插</span></span><br><span class="line"><span class="comment">//，在索引为9的位置插入 &quot;赵敏&quot;,原来索引为9的内容自动后移</span></span><br><span class="line">s.insert(<span class="number">9</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏周芷若true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">System.out.println(s.length());<span class="comment">//22</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="11-3-StringBulider⭐️"><a href="#11-3-StringBulider⭐️" class="headerlink" title="11.3  StringBulider⭐️"></a>11.3  StringBulider⭐️</h2><ul>
<li><h4 id="基本介绍：-49"><a href="#基本介绍：-49" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步，</li>
<li>该类被设计用作 String Buffer 的个简易替换，用在字符串缓冲区被单个线程使用的时候</li>
<li>如果可能，建议优先采用该类，因为在大多数实现中，它比StringBuffer 快</li>
<li>在 StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-44"><a href="#注意事项和细节：-44" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>StringBuilder 继承 AbstractstringBuilder 类</li>
<li>实现了 Serializable，说明StringBuilder对象是可以串行化(对象可以网络传输，可以保存到文件)</li>
<li>StringBuilder 是final类，不能被继承</li>
<li>StringBuitder对象字符序列仍然足存放在其父类 AbstractstringBuilder的 char [I valve;因此，字符序列是堆中</li>
<li>StringBoilder 的方法，没有做互斥的处理，即没有synchronized 关键字，网此在单线程的情況下使用</li>
</ol>
</li>
<li><h4 id="常用方法：-3"><a href="#常用方法：-3" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>和StringBuffer相同</li>
</ul>
</li>
<li><h4 id="三类对比："><a href="#三类对比：" class="headerlink" title="三类对比："></a>三类对比：</h4><ol>
<li>String：不可变字符序列，效率低,但是复用率高</li>
<li>StringBuffer：可变字符序列，效率较高(增删)，线程安全</li>
<li>String Builder：可变字符序列、效率最高、线程不安全</li>
<li>StringBuilder 和  StringBuffer 非常类似，均代表可变的字符序列，且方法相同</li>
<li>String使用注意说明：string s&#x3D;”a”;&#x2F;&#x2F;创建了一个字符串s+&#x3D;”b”;1&#x2F;实际上原来的”a”字符串对象已经丢奔了，现在又产生了一个字符串S+”b”(也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能</li>
</ol>
</li>
<li><h4 id="三类选择："><a href="#三类选择：" class="headerlink" title="三类选择："></a>三类选择：</h4><ol>
<li>如果宇符串存在大量的修改操作，一般使用 StringBuffer 或StringBuilder</li>
<li>如果字符串存在大量的修改操作，并在单线程的情況，使用 StringBuilder</li>
<li>如果字符串存在大量的修改操作，并在多线程的情况，使用 String Buffer</li>
<li>如果我们字符串很少修改，被多个对象引用，使用String</li>
</ol>
</li>
</ul>
<h2 id="11-4-Math"><a href="#11-4-Math" class="headerlink" title="11.4  Math"></a>11.4  Math</h2><ul>
<li><h4 id="基本介绍：-50"><a href="#基本介绍：-50" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数，均为静态方法</p>
</li>
<li><h4 id="常用方法：-4"><a href="#常用方法：-4" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>abs：绝对值</li>
<li>pow：求幂</li>
<li>ceil：向上取整</li>
<li>floor：向下取整</li>
<li>round：四舍五入</li>
<li>sqrt：求开方</li>
<li>random：求随机数</li>
<li>max：求两个数的最大值</li>
<li>min：求两个数的最小值</li>
</ul>
</li>
</ul>
<h2 id="11-5-Date、Calenda、LocalDate"><a href="#11-5-Date、Calenda、LocalDate" class="headerlink" title="11.5  Date、Calenda、LocalDate"></a>11.5  Date、Calenda、LocalDate</h2><h3 id="11-5-1-Date"><a href="#11-5-1-Date" class="headerlink" title="11.5.1  Date"></a>11.5.1  Date</h3><ul>
<li><h4 id="常用方法：-5"><a href="#常用方法：-5" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>Date：精确到毫秒，代表特定时间</p>
</li>
<li><p>Simple Date Format：格式和解析日期的类SimpleDateFormat 格式化和解析日期的具体类</p>
<p>它允许进行格式化（日期一＞文本）解析（文本-＞日期）和规范化</p>
</li>
</ul>
</li>
</ul>
<h3 id="11-5-2-Calenda"><a href="#11-5-2-Calenda" class="headerlink" title="11.5.2  Calenda"></a>11.5.2  Calenda</h3><ul>
<li><h4 id="基本介绍：-51"><a href="#基本介绍：-51" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>是一个抽象类，并且构造器是private，可以通过 getInstance()来获得实例，提供大量的方法和字段</p>
</li>
<li><h4 id="常用方法：-6"><a href="#常用方法：-6" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>getInstance()：获取实例</li>
<li>get.XXXX：获取字段</li>
</ul>
</li>
</ul>
<h3 id="11-5-3-LocalDate"><a href="#11-5-3-LocalDate" class="headerlink" title="11.5.3  LocalDate"></a>11.5.3  LocalDate</h3><ul>
<li><h4 id="常用方法：-7"><a href="#常用方法：-7" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>LocalDateTime ldt &#x3D; LocalDateTime.now()：获取时间</p>
</li>
<li><p>get.Xxxx()：获取字段</p>
</li>
<li><p>DateTimeFormatter.format()：格式化</p>
</li>
<li><p>DateTimeFormatter.ofPattern()：定制格式化</p>
</li>
<li><p>Date date &#x3D; Date.from(instant);：Instant转换Date</p>
</li>
<li><p>Instant instant &#x3D; date.tolnstant();：Date转换Instant</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用now() 返回表示当前日期时间的 对象</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(); <span class="comment">//LocalDate.now();//LocalTime.now()</span></span><br><span class="line">System.out.println(ldt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 使用DateTimeFormatter 对象来进行格式化</span></span><br><span class="line"><span class="comment">// 创建 DateTimeFormatter对象</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(ldt);</span><br><span class="line">System.out.println(<span class="string">&quot;格式化的日期=&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;年=&quot;</span> + ldt.getYear());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonthValue());</span><br><span class="line">System.out.println(<span class="string">&quot;日=&quot;</span> + ldt.getDayOfMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;时=&quot;</span> + ldt.getHour());</span><br><span class="line">System.out.println(<span class="string">&quot;分=&quot;</span> + ldt.getMinute());</span><br><span class="line">System.out.println(<span class="string">&quot;秒=&quot;</span> + ldt.getSecond());</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now(); <span class="comment">//可以获取年月日</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalTime.now();<span class="comment">//获取到时分秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供 plus 和 minus方法可以对当前时间进行加或者减</span></span><br><span class="line"><span class="comment">//看看890天后，是什么时候 把 年月日-时分秒</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> ldt.plusDays(<span class="number">890</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;890天后=&quot;</span> + dateTimeFormatter.format(localDateTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//看看在 3456分钟前是什么时候，把 年月日-时分秒输出</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> ldt.minusMinutes(<span class="number">3456</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3456分钟前 日期=&quot;</span> + dateTimeFormatter.format(localDateTime2));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="11-6-System"><a href="#11-6-System" class="headerlink" title="11.6  System"></a>11.6  System</h2><ul>
<li><h4 id="常用方法：-8"><a href="#常用方法：-8" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>exit：退出当前程序</li>
<li>arraycopy：复制数组元素，比较适合底层调用，一般使用Arrays.copyOf完成复制数组<br>int[] src&#x3D;{1,2.3}:<br>int[] dest &#x3D; new int[3];<br>System.arraycopy (src, 0, dest, 0, 3);</li>
<li>currentTimeMillens：返回当前时间距离1970-1-1的毫秒数</li>
<li>gc()：运行垃圾回收机制</li>
</ul>
</li>
</ul>
<h2 id="11-7-Arrays"><a href="#11-7-Arrays" class="headerlink" title="11.7  Arrays"></a>11.7  Arrays</h2><ul>
<li><h4 id="基本介绍：-52"><a href="#基本介绍：-52" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Arrays里面包含了一系列静态方法，用于管理或操作数组(比如排序和搜索)</p>
</li>
<li><h4 id="常用方法：-9"><a href="#常用方法：-9" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>toString：返回数组的字符串形式：</p>
<p>Arrays.toString (arr)</p>
</li>
<li><p>sort：排序(自然排序和定制排序)：</p>
<p>Arrays.sout(arr)</p>
</li>
<li><p>binarySearch：通过二分搜索法进行查找，必须是有排序的数组：</p>
<p>int index &#x3D; Arrays.binarySearch (arr, 需要查找的数)</p>
</li>
<li><p>copyOf：数组元素的复制：</p>
<p>Integer[] newArr &#x3D; Arrays.copyOf(arr, arr.length)</p>
</li>
<li><p>fill：数组元素的填充<br>Integer[] num &#x3D; new Integer[]{9,3,2}<br>Arrays.fill (num, 99);</p>
</li>
<li><p>equals：比较两个数组元素内容是否完全一<br>boolean equals &#x3D; Arrays.equals(arr. arr2)</p>
</li>
<li><p>aslist：将一组值，转换成list<br>List<Integer> asList &#x3D; Arrays.asList(2,3,4,5,6,1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>, <span class="number">567</span>&#125;;</span><br><span class="line"><span class="comment">// binarySearch 通过二分搜索法进行查找，要求必须排好</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//1. 使用 binarySearch 二叉查找</span></span><br><span class="line"><span class="comment">//2. 要求该数组是有序的. 如果该数组是无序的，不能使用binarySearch</span></span><br><span class="line"><span class="comment">//3. 如果数组中不存在该元素，就返回 return -(low + 1);  // key not found.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">567</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copyOf 数组元素的复制</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//1. 从 arr 数组中，拷贝 arr.length个元素到 newArr数组中</span></span><br><span class="line"><span class="comment">//2. 如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加 null</span></span><br><span class="line"><span class="comment">//3. 如果拷贝长度 &lt; 0 就抛出异常NegativeArraySizeException</span></span><br><span class="line"><span class="comment">//4. 该方法的底层使用的是 System.arraycopy()</span></span><br><span class="line">Integer[] newArr = Arrays.copyOf(arr, arr.length);</span><br><span class="line">System.out.println(<span class="string">&quot;==拷贝执行完毕后==&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ill 数组元素的填充</span></span><br><span class="line">Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. 使用 99 去填充 num数组，可以理解成是替换原理的元素</span></span><br><span class="line">Arrays.fill(num, <span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;==num数组填充后==&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(num));</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals 比较两个数组元素内容是否完全一致</span></span><br><span class="line">Integer[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. 如果arr 和 arr2 数组的元素一样，则方法true;</span></span><br><span class="line"><span class="comment">//2. 如果不是完全一样，就返回 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> Arrays.equals(arr, arr2);</span><br><span class="line">System.out.println(<span class="string">&quot;equals=&quot;</span> + equals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//asList 将一组值，转换成list</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. asList方法，会将 (2,3,4,5,6,1)数据转成一个List集合</span></span><br><span class="line"><span class="comment">//2. 返回的 asList 编译类型 List(接口)</span></span><br><span class="line"><span class="comment">//3. asList 运行类型 java.util.Arrays#ArrayList, 是Arrays类的</span></span><br><span class="line"><span class="comment">//   静态内部类 private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span></span><br><span class="line"><span class="comment">//              implements RandomAccess, java.io.Serializable</span></span><br><span class="line"><span class="type">List</span> <span class="variable">asList</span> <span class="operator">=</span> Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;asList=&quot;</span> + asList);</span><br><span class="line">System.out.println(<span class="string">&quot;asList的运行类型&quot;</span> + asList.getClass());</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="11-8-BigInteger-BigDecimal"><a href="#11-8-BigInteger-BigDecimal" class="headerlink" title="11.8  BigInteger BigDecimal"></a>11.8  BigInteger BigDecimal</h2><ul>
<li><h4 id="基本介绍：-53"><a href="#基本介绍：-53" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>Biglnteger适合保存比较大的整型</p>
</li>
<li><p>BigDecimal适合保存精度更高的浮点型（小数）</p>
</li>
</ul>
</li>
<li><h4 id="常用方法：-10"><a href="#常用方法：-10" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>add：加</li>
<li>subtract：减</li>
<li>multiply：乘</li>
<li>divide：除</li>
</ul>
</li>
</ul>
<h1 id="12-集合"><a href="#12-集合" class="headerlink" title="12 集合"></a>12 集合</h1><ul>
<li><h4 id="基本介绍：-54"><a href="#基本介绍：-54" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>可以动态保存任意多个对象</li>
<li>提供了一系列方便的操作对象的方法</li>
<li>使用集合添加、删除新元素的示意代码更简洁</li>
</ul>
</li>
</ul>
<h2 id="12-1-集合框架体系⭐️"><a href="#12-1-集合框架体系⭐️" class="headerlink" title="12.1 集合框架体系⭐️"></a>12.1 集合框架体系⭐️</h2><ul>
<li><h4 id="框架图："><a href="#框架图：" class="headerlink" title="框架图："></a>框架图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-23%2020.29.58.jpg" alt="截屏2022-05-23 20.29.58"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-23%2020.31.21.jpg" alt="截屏2022-05-23 20.31.21"></p>
</li>
</ul>
<h2 id="12-2-Collection"><a href="#12-2-Collection" class="headerlink" title="12.2  Collection"></a>12.2  Collection</h2><ul>
<li><h4 id="基本介绍：-55"><a href="#基本介绍：-55" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>Collection实现子类可以存放多个元素，每个元素可以是Object</li>
<li>Collection的实现类，有些可以存放重复的元素，有些不可以</li>
<li>Collection的实现类，有些是有序的(List)，有些不是有序(Set)</li>
<li>Collection接口没有直接的实现子类，是通过它的子接口Set 和 List 来实现的</li>
</ul>
</li>
<li><h4 id="接口常用方法："><a href="#接口常用方法：" class="headerlink" title="接口常用方法："></a>接口常用方法：</h4><ul>
<li><p>add：添加单个元素</p>
</li>
<li><p>remove：删除指定元素</p>
</li>
<li><p>contains：查找元素是否存在</p>
</li>
<li><p>size：获取元素个数</p>
</li>
<li><p>isEmpty：判断是否为空</p>
</li>
<li><p>clear：清空</p>
</li>
<li><p>addAll：添加多个元素</p>
</li>
<li><p>containsAll：查找多个元素是否都存在</p>
</li>
<li><p>removeAll：删除多个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//        add:添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        remove:删除指定元素</span></span><br><span class="line">        <span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">        list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        contains:查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        size:获取元素个数</span></span><br><span class="line">        System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//        isEmpty:判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//        clear:清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        addAll:添加多个元素</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        containsAll:查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        removeAll：删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br><span class="line"><span class="comment">//        说明：以ArrayList实现类来演示.</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="12-2-1-List"><a href="#12-2-1-List" class="headerlink" title="12.2.1  List"></a>12.2.1  List</h3><ul>
<li><h4 id="基本介绍：-56"><a href="#基本介绍：-56" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>List集合类中元素有序（即添加顺序和取出顺序一致）、且可重复</li>
<li>List集合中的每个元素都有其对应的顺序索引，即支持索引</li>
<li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器元素</li>
<li>常用： ArrayList、LinkedList、Vector</li>
</ul>
</li>
<li><h4 id="常用方法：-11"><a href="#常用方法：-11" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>void add(int index, Object ele)：在index位置插入ele元素</p>
</li>
<li><p>boolean addAll(int index, Collection eles)：从index位置开始将eles中的所有元素添加进来</p>
</li>
<li><p>Object get(int index)：获取指定index位置的元素</p>
</li>
<li><p>int indexOf(Object obj)：返回obj在集合中首次出现的位置</p>
</li>
<li><p>int lastindexOf(Object obj)：返回obj在当前集合中末次出现的位置</p>
</li>
<li><p>Object remove(int index)：移除指定index位置的元素，井返回此元素</p>
</li>
<li><p>Object set(int index, Object ele)：设置指定index位置的元素为ele，相当于是替换</p>
</li>
<li><p>List sublist(int fromlndex, int tolndex)：返回从fromlndex到tolndex位置的子集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;贾宝玉&quot;</span>);</span><br><span class="line"><span class="comment">//        void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line">        <span class="comment">//在index = 1的位置插入一个对象</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.addAll(<span class="number">1</span>, list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object get(int index):获取指定index位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        list.add(<span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;韩顺平&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object set(int index, Object ele):设置指定index位置的元素为ele , 相当于是替换.</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">&quot;玛丽&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line">        <span class="comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;returnlist=&quot;</span> + returnlist);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="12-2-1-1-迭代器"><a href="#12-2-1-1-迭代器" class="headerlink" title="12.2.1.1 迭代器"></a>12.2.1.1 迭代器</h4><ul>
<li><h4 id="基本介绍：-57"><a href="#基本介绍：-57" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>lterator对象称为迭代器，主要用于遍历 Collection 集合中的元素</p>
</li>
<li><p>实现了Collection接口的集合都有一个iterator()方法，用以返回一个实现了lterator接口的对象，即可以返回一个迭代器</p>
</li>
<li><p>lterator 仅用于遍历集合，lterator 本身并不存放对象</p>
</li>
<li><p>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-24%2017.23.58.jpg" alt="截屏2022-05-24 17.23.58"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionIterator</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(&quot;col=&quot; + col);</span></span><br><span class="line">        <span class="comment">//现在老师希望能够遍历 col集合</span></span><br><span class="line">        <span class="comment">//1. 先得到 col 对应的 迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">        <span class="comment">//2. 使用while循环遍历</span></span><br><span class="line"><span class="comment">//        while (iterator.hasNext()) &#123;//判断是否还有数据</span></span><br><span class="line"><span class="comment">//            //返回下一个元素，类型是Object</span></span><br><span class="line"><span class="comment">//            Object obj = iterator.next();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;obj=&quot; + obj);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//老师教大家一个快捷键，快速生成 while =&gt; itit</span></span><br><span class="line">        <span class="comment">//显示所有的快捷键的的快捷键 ctrl + j</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 当退出while循环后 , 这时iterator迭代器，指向最后的元素</span></span><br><span class="line">        <span class="comment">//   iterator.next();//NoSuchElementException</span></span><br><span class="line">        <span class="comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span></span><br><span class="line">        iterator = col.iterator();</span><br><span class="line">        System.out.println(<span class="string">&quot;===第二次遍历===&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, String author, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="12-2-1-2-for增强循环"><a href="#12-2-1-2-for增强循环" class="headerlink" title="12.2.1.2  for增强循环"></a>12.2.1.2  for增强循环</h4><ul>
<li><h4 id="基本介绍：-58"><a href="#基本介绍：-58" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>增强for循环，可以代替iterator迭代器，特点：增强for就是简化版的iterator，本质一样，只能用于遍历集合或数组</p>
</li>
<li><h4 id="基本语法：-17"><a href="#基本语法：-17" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型 元素名: 集合名或数组名)&#123;</span><br><span class="line">  访问元素;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="12-2-1-3-普通遍历循环"><a href="#12-2-1-3-普通遍历循环" class="headerlink" title="12.2.1.3 普通遍历循环"></a>12.2.1.3 普通遍历循环</h4><h4 id="12-2-1-4-ArrayList⭐️"><a href="#12-2-1-4-ArrayList⭐️" class="headerlink" title="12.2.1.4  ArrayList⭐️"></a>12.2.1.4  ArrayList⭐️</h4><ul>
<li><h4 id="注意事项和细节：-45"><a href="#注意事项和细节：-45" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>允许所有元素包括null加入</li>
<li>ArrayList 是由数组来实现数据存储的</li>
<li>ArrayList 基本等同于Vector，除了 ArrayList是线程不安全（执行效率高），在多线程情况下，不建议使用ArrayList</li>
</ol>
</li>
<li><h4 id="底层结构和源码分析："><a href="#底层结构和源码分析：" class="headerlink" title="底层结构和源码分析："></a>底层结构和源码分析：</h4><ol>
<li><p>ArrayList中维护了一个Object类型的数组elementData，transient Object[] elementData; </p>
<p>transient 表示瞬间,短暂的，表示该属性不会被序列化</p>
</li>
<li><p>创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData 为1.5倍</p>
</li>
<li><p>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-25%2011.38.41.jpg" alt="截屏2022-05-25 11.38.41"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-25%2011.40.06.jpg" alt="截屏2022-05-25 11.40.06"></p>
</li>
</ol>
</li>
</ul>
<h4 id="12-2-1-5-Vector⭐️"><a href="#12-2-1-5-Vector⭐️" class="headerlink" title="12.2.1.5  Vector⭐️"></a>12.2.1.5  Vector⭐️</h4><ul>
<li><h4 id="注意事项和细节：-46"><a href="#注意事项和细节：-46" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>Vector底层是一个对象数组， protected Object[] elementData;</li>
<li>Vector 是线程同步的，即线程安全，Vector类的操作方法带有synchronized</li>
</ol>
</li>
<li><h4 id="底层机制和源码分析："><a href="#底层机制和源码分析：" class="headerlink" title="底层机制和源码分析："></a>底层机制和源码分析：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//有参数的构造</span></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector.add(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;vector=&quot;</span> + vector);</span><br><span class="line">        <span class="comment">//老韩解读源码</span></span><br><span class="line">        <span class="comment">//1. new Vector() 底层</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public Vector() &#123;</span></span><br><span class="line"><span class="comment">                this(10);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         补充：如果是  Vector vector = new Vector(8);</span></span><br><span class="line"><span class="comment">            走的方法:</span></span><br><span class="line"><span class="comment">            public Vector(int initialCapacity) &#123;</span></span><br><span class="line"><span class="comment">                this(initialCapacity, 0);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. vector.add(i)</span></span><br><span class="line"><span class="comment">         2.1  //下面这个方法就添加数据到vector集合</span></span><br><span class="line"><span class="comment">            public synchronized boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                ensureCapacityHelper(elementCount + 1);</span></span><br><span class="line"><span class="comment">                elementData[elementCount++] = e;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.2  //确定是否需要扩容 条件 ： minCapacity - elementData.length&gt;0</span></span><br><span class="line"><span class="comment">            private void ensureCapacityHelper(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                if (minCapacity - elementData.length &gt; 0)</span></span><br><span class="line"><span class="comment">                    grow(minCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span></span><br><span class="line"><span class="comment">              //newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">              //                             capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">              //就是扩容两倍.</span></span><br><span class="line"><span class="comment">            private void grow(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">                int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">                                                 capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">                if (newCapacity - minCapacity &lt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">                if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">                elementData = Arrays.copyOf(elementData, newCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="ArrayList和Vector："><a href="#ArrayList和Vector：" class="headerlink" title="ArrayList和Vector："></a>ArrayList和Vector：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2011.43.18.jpg" alt="截屏2022-05-26 11.43.18"></p>
</li>
</ul>
<h4 id="12-2-1-6-LinkedList"><a href="#12-2-1-6-LinkedList" class="headerlink" title="12.2.1.6  LinkedList"></a>12.2.1.6  LinkedList</h4><ul>
<li><h4 id="注意事项和细节：-47"><a href="#注意事项和细节：-47" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>LinkedList底层实现了双向链表和双端队列特点</li>
<li>可以添加任意元素包括null</li>
<li>线程不安全，没有实现同步</li>
</ol>
</li>
<li><h4 id="底层机制："><a href="#底层机制：" class="headerlink" title="底层机制："></a>底层机制：</h4><ol>
<li><p>Linkedlist底层维护了一个<strong>双向链表</strong></p>
</li>
<li><p>Linkedlist中维护了两个属性first和last分别指向首节点和尾节点</p>
</li>
<li><p>每个节点（Node对象），里面又维护了prev、next.item三个属性，其中通过<br>prev指向前一个，通过next指向后一个节点。最终实现双向链表</p>
</li>
<li><p>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.18.01.jpg" alt="截屏2022-05-26 19.18.01"></p>
</li>
</ol>
</li>
<li><h4 id="ArrayList和LinkedList："><a href="#ArrayList和LinkedList：" class="headerlink" title="ArrayList和LinkedList："></a>ArrayList和LinkedList：</h4><ol>
<li><p>如果我们改查的操作多，选择ArrayList</p>
</li>
<li><p>如果我们增删的操作多，选择LinkedList</p>
</li>
<li><p>一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.20.03.jpg" alt="截屏2022-05-26 19.20.03"></p>
</li>
</ol>
</li>
</ul>
<h3 id="12-2-2-Set"><a href="#12-2-2-Set" class="headerlink" title="12.2.2  Set"></a>12.2.2  Set</h3><ul>
<li><h4 id="基本介绍：-59"><a href="#基本介绍：-59" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>无序（添加和取出的顺序不一致），没有索引</li>
<li>不允许重复元素，所以最多包含一个null</li>
<li>JDK API中Set接口的实现类有：<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.21.30.jpg" alt="截屏2022-05-26 19.21.30"></li>
</ul>
</li>
<li><h4 id="常用方法：-12"><a href="#常用方法：-12" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>add：添加单个元素</p>
</li>
<li><p>remove：删除指定元素</p>
</li>
<li><p>contains：查找元素是否存在</p>
</li>
<li><p>size：获取元素个数</p>
</li>
<li><p>isEmpty：判断是否为空</p>
</li>
<li><p>clear：清空</p>
</li>
<li><p>addAll：添加多个元素</p>
</li>
<li><p>containsAll：查找多个元素是否都存在</p>
</li>
<li><p>removeAll：删除多个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//1. 以Set 接口的实现类 HashSet 来讲解Set 接口的方法</span></span><br><span class="line">        <span class="comment">//2. set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</span></span><br><span class="line">        <span class="comment">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span></span><br><span class="line">        <span class="comment">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定.</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);<span class="comment">//重复</span></span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);<span class="comment">//</span></span><br><span class="line">        set.add(<span class="literal">null</span>);<span class="comment">//再次添加null</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span>;i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//方式1： 使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====使用迭代器====&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2: 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====增强for====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//set 接口对象，不能通过索引来获取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="遍历方式："><a href="#遍历方式：" class="headerlink" title="遍历方式："></a>遍历方式：</h4><ol>
<li>迭代器</li>
<li>增强for</li>
<li><strong>不能使用索引方式获取</strong>（普通遍历循环）</li>
</ol>
</li>
</ul>
<h4 id="12-2-2-1-HashSet⭐️"><a href="#12-2-2-1-HashSet⭐️" class="headerlink" title="12.2.2.1  HashSet⭐️"></a>12.2.2.1  HashSet⭐️</h4><ul>
<li><h4 id="注意事项和细节：-48"><a href="#注意事项和细节：-48" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>Hashset实现了Set接口</li>
<li>Hashset实际上是HashMap</li>
<li><strong>可以存放null值，但是只能有一个null</strong></li>
<li>Hashset不保证元素是有序的,取决于hash后，再确定索引的结果</li>
<li><strong>不能有重复元素&#x2F;对象</strong></li>
</ol>
</li>
<li><h4 id="底层机制和源码分析：-1"><a href="#底层机制和源码分析：-1" class="headerlink" title="底层机制和源码分析："></a>底层机制和源码分析：</h4><ol>
<li><p>HashSet 底层是 HashMap</p>
</li>
<li><p>添加一个元素时，先得到hash值会转成索引值</p>
</li>
<li><p>找到存储数据表table，看这个素引位置是否己经存放的有元素如果没有，直接加入</p>
</li>
<li><p>如果有调用equals 比较，如果相同，就放奔添加，如果不相同，则添加到最后</p>
</li>
<li><p>在Java8中，如果一条链表的元素个数超过 TREEIFY THRESHOLD（默认是8），井且table的大小＞&#x3D;MIN TREEIFY CAPACITY（默认64)就会进行树化(红黑树）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-27%2011.48.11.jpg" alt="截屏2022-05-27 11.48.11"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//到此位置，第1次add分析完毕.</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;php&quot;</span>);<span class="comment">//到此位置，第2次add分析完毕</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + hashSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashSet 的源码解读</span></span><br><span class="line"><span class="comment">        1. 执行 HashSet()</span></span><br><span class="line"><span class="comment">            public HashSet() &#123;</span></span><br><span class="line"><span class="comment">                map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        2. 执行 add()</span></span><br><span class="line"><span class="comment">           public boolean add(E e) &#123;//e = &quot;java&quot;</span></span><br><span class="line"><span class="comment">                return map.put(e, PRESENT)==null;//(static) PRESENT = new Object();</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">         3.执行 put() , 该方法会执行 hash(key) 得到key对应的hash值 算法h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line"><span class="comment">             public V put(K key, V value) &#123;//key = &quot;java&quot; value = PRESENT 共享</span></span><br><span class="line"><span class="comment">                return putVal(hash(key), key, value, false, true);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         4.执行 putVal</span></span><br><span class="line"><span class="comment">         final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="comment">                   boolean evict) &#123;</span></span><br><span class="line"><span class="comment">                Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; //定义了辅助变量</span></span><br><span class="line"><span class="comment">                //table 就是 HashMap 的一个数组，类型是 Node[]</span></span><br><span class="line"><span class="comment">                //if 语句表示如果当前table 是null, 或者 大小=0</span></span><br><span class="line"><span class="comment">                //就是第一次扩容，到16个空间.</span></span><br><span class="line"><span class="comment">                if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="comment">                    n = (tab = resize()).length;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                //(1)根据key，得到hash 去计算该key应该存放到table表的哪个索引位置</span></span><br><span class="line"><span class="comment">                //并把这个位置的对象，赋给 p</span></span><br><span class="line"><span class="comment">                //(2)判断p 是否为null</span></span><br><span class="line"><span class="comment">                //(2.1) 如果p 为null, 表示还没有存放元素, 就创建一个Node (key=&quot;java&quot;,value=PRESENT)</span></span><br><span class="line"><span class="comment">                //(2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                else &#123;</span></span><br><span class="line"><span class="comment">                    //一个开发技巧提示： 在需要局部变量(辅助变量)时候，在创建</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; e; K k; //</span></span><br><span class="line"><span class="comment">                    //如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样</span></span><br><span class="line"><span class="comment">                    //并且满足 下面两个条件之一:</span></span><br><span class="line"><span class="comment">                    //(1) 准备加入的key 和 p 指向的Node 结点的 key 是同一个对象</span></span><br><span class="line"><span class="comment">                    //(2)  p 指向的Node 结点的 key 的equals() 和准备加入的key比较后相同</span></span><br><span class="line"><span class="comment">                    //就不能加入</span></span><br><span class="line"><span class="comment">                    if (p.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                        e = p;</span></span><br><span class="line"><span class="comment">                    //再判断 p 是不是一颗红黑树,</span></span><br><span class="line"><span class="comment">                    //如果是一颗红黑树，就调用 putTreeVal , 来进行添加</span></span><br><span class="line"><span class="comment">                    else if (p instanceof TreeNode)</span></span><br><span class="line"><span class="comment">                        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></span><br><span class="line"><span class="comment">                    else &#123;//如果table对应索引位置，已经是一个链表, 就使用for循环比较</span></span><br><span class="line"><span class="comment">                    </span></span><br><span class="line"><span class="comment">                          //(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后</span></span><br><span class="line"><span class="comment">                          //    注意在把元素添加到链表后，立即判断 该链表是否已经达到8个结点</span></span><br><span class="line"><span class="comment">                          //    , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)</span></span><br><span class="line"><span class="comment">                          //    注意，在转成红黑树时，要进行判断, 判断条件</span></span><br><span class="line"><span class="comment">                          //    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))</span></span><br><span class="line"><span class="comment">                          //            resize();</span></span><br><span class="line"><span class="comment">                          //    如果上面条件成立，先table扩容.</span></span><br><span class="line"><span class="comment">                          //    只有上面条件不成立时，才进行转成红黑树</span></span><br><span class="line"><span class="comment">                          //(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接break</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        for (int binCount = 0; ; ++binCount) &#123;</span></span><br><span class="line"><span class="comment">                            if ((e = p.next) == null) &#123;</span></span><br><span class="line"><span class="comment">                                p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                                if (binCount &gt;= TREEIFY_THRESHOLD(8) - 1) // -1 for 1st</span></span><br><span class="line"><span class="comment">                                    treeifyBin(tab, hash);</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            if (e.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            p = e;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    if (e != null) &#123; // existing mapping for key</span></span><br><span class="line"><span class="comment">                        V oldValue = e.value;</span></span><br><span class="line"><span class="comment">                        if (!onlyIfAbsent || oldValue == null)</span></span><br><span class="line"><span class="comment">                            e.value = value;</span></span><br><span class="line"><span class="comment">                        afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">                        return oldValue;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                ++modCount;</span></span><br><span class="line"><span class="comment">                //size 就是我们每加入一个结点Node(k,v,h,next), size++</span></span><br><span class="line"><span class="comment">                if (++size &gt; threshold)</span></span><br><span class="line"><span class="comment">                    resize();//扩容</span></span><br><span class="line"><span class="comment">                afterNodeInsertion(evict);</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="扩容和红黑树机制："><a href="#扩容和红黑树机制：" class="headerlink" title="扩容和红黑树机制："></a>扩容和红黑树机制：</h4><ol>
<li>HashSet底层是HashMap</li>
<li>第一次添加时，table 数组扩容到 16，临界值(threshold)是 16*加载因子(loadFactor)是0.75&#x3D; 12</li>
<li>每加入一个节点，size就会++，到达临界值就会扩容</li>
<li>如果table 数组使用到了临界值 12,就会扩容到16*2&#x3D;32,新的临界值就是32*0.75&#x3D;24，依次类推</li>
<li>在Java8中，如果一条链表的元素个数到达 TREEIFY_ THRESHOLD(默认是 8）井且table的大小＞&#x3D;MIN TREEIFY CAPACITY (默认64),就会进行树化(红黑树），否则仍然采用数组扩容机制</li>
</ol>
</li>
<li><h4 id="去重机制对比："><a href="#去重机制对比：" class="headerlink" title="去重机制对比："></a>去重机制对比：</h4><ul>
<li>HashSet去重机制: hashCode() + equals()，底层先通过存入对象，通过运算hash值得到对应的索引，如果table索引所在的位置没有数据就直接存放；如果有数据就进行<strong>equals</strong>（注意重写情况）比较[遍历比较]，如果比较后，不相同就加入，否则就不加入</li>
<li>TreeSet的去重机制：如果你传入了一个Comparator匿名对象，就使用实现的compare去重，如果方法返回0,就是相同的元素&#x2F;数据，就不添加，如果你没有传入一个Comparator匿名对象，则以你添加的对象实现的Compareable接口的compareTo去重</li>
</ul>
</li>
<li><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        set.add(p1);<span class="comment">//ok</span></span><br><span class="line">        set.add(p2);<span class="comment">//ok</span></span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        System.out.println(set);<span class="comment">//2</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//3</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> id == person.id &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-30%2011.03.03.jpg" alt="截屏2022-05-30 11.03.03"></p>
</li>
</ul>
<h4 id="12-2-2-2-LinkedHashSet"><a href="#12-2-2-2-LinkedHashSet" class="headerlink" title="12.2.2.2  LinkedHashSet"></a>12.2.2.2  LinkedHashSet</h4><ul>
<li><h4 id="注意事项和细节：-49"><a href="#注意事项和细节：-49" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>LinkedHashset 是Hashset 的子类</p>
</li>
<li><p>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个 数组＋<strong>双向链表</strong></p>
</li>
<li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序(图)，这使得元素看起来是以插入顺序保存的</p>
</li>
<li><p>LinkedHashSet 不允许添重复元素</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.49.06.jpg" alt="截屏2022-05-29 16.49.06"></p>
</li>
</ol>
</li>
<li><h4 id="底层机制和源代码分析："><a href="#底层机制和源代码分析：" class="headerlink" title="底层机制和源代码分析："></a>底层机制和源代码分析：</h4><ol>
<li>LinkedHashSet 加入顺序和取出元素&#x2F;数据的顺序一致</li>
<li>LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)</li>
<li>LinkedHashSet 底层结构 (数组table+双向链表)</li>
<li>添加第一次时，直接将 数组table 扩容到 16 ,存放的结点类型是 LinkedHashMap$Entry</li>
<li>数组是 HashMap$Node[] 存放的元素&#x2F;数据是 LinkedHashMap$Entry类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分析一下LinkedHashSet的底层机制</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;刘&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. LinkedHashSet 加入顺序和取出元素/数据的顺序一致</span></span><br><span class="line">        <span class="comment">//2. LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)</span></span><br><span class="line">        <span class="comment">//3. LinkedHashSet 底层结构 (数组table+双向链表)</span></span><br><span class="line">        <span class="comment">//4. 添加第一次时，直接将 数组table 扩容到 16 ,存放的结点类型是 LinkedHashMap$Entry</span></span><br><span class="line">        <span class="comment">//5. 数组是 HashMap$Node[] 存放的元素/数据是 LinkedHashMap$Entry类型</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                //继承关系是在内部类完成.</span></span><br><span class="line"><span class="comment">                static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment">                    Entry&lt;K,V&gt; before, after;</span></span><br><span class="line"><span class="comment">                    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">                        super(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, <span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="12-2-2-3-TreeSet"><a href="#12-2-2-3-TreeSet" class="headerlink" title="12.2.2.3  TreeSet"></a>12.2.2.3  TreeSet</h4><ul>
<li><h4 id="底层机制：-1"><a href="#底层机制：-1" class="headerlink" title="底层机制："></a>底层机制：</h4><ol>
<li><p>TreeSet()构造器需传入Comparator接口的匿名内部类，因为底层 Comparable&lt;? super K&gt; k &#x3D; (Comparator&lt;? super K&gt;) key;</p>
<p>若没有传入，则需要把传入的类实现Comparable接口</p>
</li>
<li><p>若按照compare方法比较value相同则无法加入value</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 当我们使用无参构造器，创建TreeSet时，默认按字母排序</span></span><br><span class="line">        <span class="comment">//2. 老师希望添加的元素，按照字符串大小来排序</span></span><br><span class="line">        <span class="comment">//3. 使用TreeSet 提供的一个构造器，可以传入一个比较器(匿名内部类)</span></span><br><span class="line">        <span class="comment">//   并指定排序规则</span></span><br><span class="line">        <span class="comment">//4. 简单看看源码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 构造器把传入的比较器对象，赋给了 TreeSet的底层的 TreeMap的属性this.comparator</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span></span><br><span class="line"><span class="comment">                this.comparator = comparator;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. 在 调用 treeSet.add(&quot;tom&quot;), 在底层会执行到</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             if (cpr != null) &#123;//cpr 就是我们的匿名内部类(对象)</span></span><br><span class="line"><span class="comment">                do &#123;</span></span><br><span class="line"><span class="comment">                    parent = t;</span></span><br><span class="line"><span class="comment">                    //动态绑定到我们的匿名内部类(对象)compare</span></span><br><span class="line"><span class="comment">                    cmp = cpr.compare(key, t.key);</span></span><br><span class="line"><span class="comment">                    if (cmp &lt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.left;</span></span><br><span class="line"><span class="comment">                    else if (cmp &gt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.right;</span></span><br><span class="line"><span class="comment">                    else //如果相等，即返回0,这个Key就没有加入</span></span><br><span class="line"><span class="comment">                        return t.setValue(value);</span></span><br><span class="line"><span class="comment">                &#125; while (t != null);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        TreeSet treeSet = new TreeSet();</span></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//下面 调用String的 compareTo方法进行字符串大小比较</span></span><br><span class="line">                <span class="comment">//如果老韩要求加入的元素，按照长度大小排序</span></span><br><span class="line">                <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//添加数据.</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);<span class="comment">//3</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;abc&quot;</span>);<span class="comment">//3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;treeSet=&quot;</span> + treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="12-3-Map"><a href="#12-3-Map" class="headerlink" title="12.3  Map"></a>12.3  Map</h2><ul>
<li><h4 id="注意事项和细节：-50"><a href="#注意事项和细节：-50" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>Map与Collection井列存在，用于保存具有映射关系的数据</p>
</li>
<li><p><strong>Map 中的key 和 value 可以是任何引用类型的数据，会封装到HashMap$Node对象中</strong></p>
</li>
<li><p>Map 中的key 不允许重复，原因和HashSet 一样</p>
</li>
<li><p>Map 中的value 可以重复</p>
</li>
<li><p>Map 的key可以为null，value也可以为null，key为null只有能有一个，value为null可以为多个</p>
</li>
<li><p>常用String类作为Map的key</p>
</li>
<li><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</p>
</li>
<li><p>Map存放数据的key-value示意图，一对 k-y是放在一个Node中的，有因为Node 实现了 Entry 接口</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-27%2023.07.17.jpg" alt="截屏2022-05-27 23.07.17"></p>
</li>
</ol>
</li>
<li><h4 id="常用方法：-13"><a href="#常用方法：-13" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>put：添加</p>
</li>
<li><p>remove：根据键删除映射关系</p>
</li>
<li><p>get：根据键获取值</p>
</li>
<li><p>size：获取元素个数</p>
</li>
<li><p>isEmpty：判断个数是否为0</p>
</li>
<li><p>clear：清除</p>
</li>
<li><p>containskey：查找键是否存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示map接口常用方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;&quot;</span>, <span class="number">100</span>));<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);<span class="comment">//替换-&gt; 一会分析源码</span></span><br><span class="line">        map.put(<span class="string">&quot;王宝强&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;宋喆&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;刘令博&quot;</span>, <span class="literal">null</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;刘亦菲&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;鹿晗&quot;</span>, <span class="string">&quot;关晓彤&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;hsp&quot;</span>, <span class="string">&quot;hsp的老婆&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        remove:根据键删除映射关系</span></span><br><span class="line">        map.remove(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"><span class="comment">//        get：根据键获取值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> map.get(<span class="string">&quot;鹿晗&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;val=&quot;</span> + val);</span><br><span class="line"><span class="comment">//        size:获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;k-v=&quot;</span> + map.size());</span><br><span class="line"><span class="comment">//        isEmpty:判断个数是否为0</span></span><br><span class="line">        System.out.println(map.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//        clear:清除k-v</span></span><br><span class="line">        <span class="comment">//map.clear();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"><span class="comment">//        containsKey:查找键是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;结果=&quot;</span> + map.containsKey(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="遍历方式：-1"><a href="#遍历方式：-1" class="headerlink" title="遍历方式："></a>遍历方式：</h4><ol>
<li><p>先取出 所有的Key , 通过Key 取出对应的Value</p>
</li>
<li><p>把所有的values取出</p>
</li>
<li><p>通过 EntrySet 来获取 k-v</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王宝强&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;宋喆&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘令博&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;鹿晗&quot;</span>, <span class="string">&quot;关晓彤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一组: 先取出 所有的Key , 通过Key 取出对应的Value</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---第一种方式-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keyset) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----第二种方式--------&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keyset.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二组: 把所有的values取出</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        <span class="comment">//这里可以使用所有的Collections使用的遍历方法</span></span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的value 增强for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的value 迭代器----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span>  iterator2.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三组: 通过EntrySet 来获取 k-v</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用EntrySet 的 for增强(第3种)----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">            <span class="comment">//将entry 转成 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用EntrySet 的 迭代器(第4种)----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span>  iterator3.next();</span><br><span class="line">            <span class="comment">//System.out.println(next.getClass());//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)</span></span><br><span class="line">            <span class="comment">//向下转型 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="12-3-1-HashMap⭐️"><a href="#12-3-1-HashMap⭐️" class="headerlink" title="12.3.1  HashMap⭐️"></a>12.3.1  HashMap⭐️</h3><ul>
<li><h4 id="注意事项和细节：-51"><a href="#注意事项和细节：-51" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>HashMap是Map 接口使用频率最高的实现类</li>
<li>Hashap 是以 key-val 对的方式来存储数据(HashMap$Node类型）</li>
<li><strong>key 不能重复，但是值可以重复，允许使用null和null值</strong></li>
<li><strong>如果添加相同的key，则会覆盖原来的key-val ，等同于修改（key不会替换，val会替换）</strong></li>
<li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的(jdk8的hashMap 底层 数组＋链表＋红黑树）</li>
<li>HashMap没有实现同步，因此是线程不安全的，方法没有做同步互斥的操作，没有synchronized</li>
</ol>
</li>
<li><h4 id="底层机制和源码剖析："><a href="#底层机制和源码剖析：" class="headerlink" title="底层机制和源码剖析："></a>底层机制和源码剖析：</h4><ol>
<li><p>扩容机制和Hashset相同</p>
</li>
<li><p>HashMap底层维护了Node类型的数组table，默认为null</p>
</li>
<li><p>当创建对象时，将加载因子(loadfactor)初始化为0.75</p>
</li>
<li><p>当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key是否和准备加入的key相等，如果相等，则直接替换val：如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容</p>
</li>
<li><p>第1次添加，则需要扩容table容量为16，临界值(threshold)为12</p>
</li>
<li><p>以后再扩容，则需要扩容table容量为原来的2倍，临界值为原来的2倍,即24，依次类推</p>
</li>
<li><p>在Java8中，如果一条链表的元素个数超过 TREEIFY THRESHOLD（默认是8），并且<br>table的大小＞&#x3D;MIN TREEIFY CAPACITY（默认64),就会进行树化（红黑树）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.13.53.jpg" alt="截屏2022-05-29 16.13.53"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapSource1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;php&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>);<span class="comment">//替换value</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*老韩解读HashMap的源码+图解</span></span><br><span class="line"><span class="comment">        1. 执行构造器 new HashMap()</span></span><br><span class="line"><span class="comment">           初始化加载因子 loadfactor = 0.75</span></span><br><span class="line"><span class="comment">           HashMap$Node[] table = null</span></span><br><span class="line"><span class="comment">        2. 执行put 调用 hash方法，计算 key的 hash值 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line"><span class="comment">            public V put(K key, V value) &#123;//K = &quot;java&quot; value = 10</span></span><br><span class="line"><span class="comment">                return putVal(hash(key), key, value, false, true);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        3. 执行 putVal</span></span><br><span class="line"><span class="comment">         final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="comment">                   boolean evict) &#123;</span></span><br><span class="line"><span class="comment">                Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;//辅助变量</span></span><br><span class="line"><span class="comment">                //如果底层的table 数组为null, 或者 length =0 , 就扩容到16</span></span><br><span class="line"><span class="comment">                if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="comment">                    n = (tab = resize()).length;</span></span><br><span class="line"><span class="comment">                //取出hash值对应的table的索引位置的Node, 如果为null, 就直接把加入的k-v</span></span><br><span class="line"><span class="comment">                //, 创建成一个 Node ,加入该位置即可</span></span><br><span class="line"><span class="comment">                if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                else &#123;</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; e; K k;//辅助变量</span></span><br><span class="line"><span class="comment">                // 如果table的索引位置的key的hash相同和新的key的hash值相同，</span></span><br><span class="line"><span class="comment">                 // 并 满足(table现有的结点的key和准备添加的key是同一个对象  || equals返回真)</span></span><br><span class="line"><span class="comment">                 // 就认为不能加入新的k-v</span></span><br><span class="line"><span class="comment">                    if (p.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                        e = p;</span></span><br><span class="line"><span class="comment">                    else if (p instanceof TreeNode)//如果当前的table的已有的Node 是红黑树，就按照红黑树的方式处理</span></span><br><span class="line"><span class="comment">                        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></span><br><span class="line"><span class="comment">                    else &#123;</span></span><br><span class="line"><span class="comment">                        //如果找到的结点，后面是链表，就循环比较</span></span><br><span class="line"><span class="comment">                        for (int binCount = 0; ; ++binCount) &#123;//死循环</span></span><br><span class="line"><span class="comment">                            if ((e = p.next) == null) &#123;//如果整个链表，没有和他相同,就加到该链表的最后</span></span><br><span class="line"><span class="comment">                                p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                                //加入后，判断当前链表的个数，是否已经到8个，到8个，后</span></span><br><span class="line"><span class="comment">                                //就调用 treeifyBin 方法进行红黑树的转换</span></span><br><span class="line"><span class="comment">                                if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span></span><br><span class="line"><span class="comment">                                    treeifyBin(tab, hash);</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            if (e.hash == hash &amp;&amp; //如果在循环比较过程中，发现有相同,就break,就只是替换value</span></span><br><span class="line"><span class="comment">                                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            p = e;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    if (e != null) &#123; // existing mapping for key</span></span><br><span class="line"><span class="comment">                        V oldValue = e.value;</span></span><br><span class="line"><span class="comment">                        if (!onlyIfAbsent || oldValue == null)</span></span><br><span class="line"><span class="comment">                            e.value = value; //替换，key对应value</span></span><br><span class="line"><span class="comment">                        afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">                        return oldValue;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                ++modCount;//每增加一个Node ,就size++</span></span><br><span class="line"><span class="comment">                if (++size &gt; threshold[12-24-48])//如size &gt; 临界值，就扩容</span></span><br><span class="line"><span class="comment">                    resize();</span></span><br><span class="line"><span class="comment">                afterNodeInsertion(evict);</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              5. 关于树化(转成红黑树)</span></span><br><span class="line"><span class="comment">              //如果table 为null ,或者大小还没有到 64，暂时不树化，而是进行扩容.</span></span><br><span class="line"><span class="comment">              //否则才会真正的树化 -&gt; 剪枝</span></span><br><span class="line"><span class="comment">              final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span></span><br><span class="line"><span class="comment">                int n, index; Node&lt;K,V&gt; e;</span></span><br><span class="line"><span class="comment">                if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span></span><br><span class="line"><span class="comment">                    resize();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="12-3-2-Hashtable"><a href="#12-3-2-Hashtable" class="headerlink" title="12.3.2  Hashtable"></a>12.3.2  Hashtable</h3><ul>
<li><h4 id="注意事项和细节：-52"><a href="#注意事项和细节：-52" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>存放的元素是键值对：即K-V</li>
<li><strong>hashtable的键和值都不能为null， 否则会抛出NulPointerException</strong></li>
<li>hashTable 使用方法基本上和HashMap一样</li>
<li>hashTable 是线程安全的(synchronized)，hashMap 是线程不安全的</li>
</ol>
</li>
<li><h4 id="底层机制：-2"><a href="#底层机制：-2" class="headerlink" title="底层机制："></a>底层机制：</h4><ol>
<li>底层有数组 Hashtable$Entry[] 初始化大小为 11</li>
<li>临界值 threshold 8 &#x3D; 11 * 0.75</li>
<li>扩容: 按照自己的扩容机制来进行即可</li>
<li>执行方法 addEntry(hash, key, value, index); 添加K-V 封装到Entry</li>
<li>当 if (count &gt;&#x3D; threshold) 满足时，就进行扩容</li>
<li>按照 int newCapacity &#x3D; (oldCapacity &lt;&lt; 1) + 1;的大小扩容</li>
</ol>
</li>
<li><h4 id="Hashtable和HashMapd"><a href="#Hashtable和HashMapd" class="headerlink" title="Hashtable和HashMapd:"></a>Hashtable和HashMapd:</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.14.26.jpg" alt="截屏2022-05-29 16.14.26"></p>
</li>
</ul>
<h3 id="12-3-3-LinkedHashMap"><a href="#12-3-3-LinkedHashMap" class="headerlink" title="12.3.3  LinkedHashMap"></a>12.3.3  LinkedHashMap</h3><h3 id="12-3-4-TreeMap"><a href="#12-3-4-TreeMap" class="headerlink" title="12.3.4. TreeMap"></a>12.3.4. TreeMap</h3><ul>
<li><h4 id="底层机制和源码剖析：-1"><a href="#底层机制和源码剖析：-1" class="headerlink" title="底层机制和源码剖析："></a>底层机制和源码剖析：</h4><ol>
<li><p>若按照compare方法比较key相同则无法加入value值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用默认的构造器，创建TreeMap, 是字母排序</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            要求：按照传入的 k(String) 的大小进行排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        TreeMap treeMap = new TreeMap();</span></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//按照传入的 k(String) 的大小进行排序</span></span><br><span class="line">                <span class="comment">//按照K(String) 的长度大小排序</span></span><br><span class="line">                <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeMap.put(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;kristina&quot;</span>, <span class="string">&quot;克瑞斯提诺&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;smith&quot;</span>, <span class="string">&quot;斯密斯&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;hsp&quot;</span>, <span class="string">&quot;韩顺平&quot;</span>);<span class="comment">//加入不了</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;treemap=&quot;</span> + treeMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            解读源码：</span></span><br><span class="line"><span class="comment">            1. 构造器. 把传入的实现了 Comparator接口的匿名内部类(对象)，传给给TreeMap的comparator</span></span><br><span class="line"><span class="comment">             public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span></span><br><span class="line"><span class="comment">                this.comparator = comparator;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            2. 调用put方法</span></span><br><span class="line"><span class="comment">            2.1 第一次添加, 把k-v 封装到 Entry对象，放入root</span></span><br><span class="line"><span class="comment">            Entry&lt;K,V&gt; t = root;</span></span><br><span class="line"><span class="comment">            if (t == null) &#123;</span></span><br><span class="line"><span class="comment">                compare(key, key); // type (and possibly null) check</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                root = new Entry&lt;&gt;(key, value, null);</span></span><br><span class="line"><span class="comment">                size = 1;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            2.2 以后添加</span></span><br><span class="line"><span class="comment">            Comparator&lt;? super K&gt; cpr = comparator;</span></span><br><span class="line"><span class="comment">            if (cpr != null) &#123;</span></span><br><span class="line"><span class="comment">                do &#123; //遍历所有的key , 给当前key找到适当位置</span></span><br><span class="line"><span class="comment">                    parent = t;</span></span><br><span class="line"><span class="comment">                    cmp = cpr.compare(key, t.key);//动态绑定到我们的匿名内部类的compare</span></span><br><span class="line"><span class="comment">                    if (cmp &lt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.left;</span></span><br><span class="line"><span class="comment">                    else if (cmp &gt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.right;</span></span><br><span class="line"><span class="comment">                    else  //如果遍历过程中，发现准备添加Key 和当前已有的Key 相等，就不添加</span></span><br><span class="line"><span class="comment">                        return t.setValue(value);</span></span><br><span class="line"><span class="comment">                &#125; while (t != null);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="12-3-5-Properties"><a href="#12-3-5-Properties" class="headerlink" title="12.3.5. Properties"></a>12.3.5. Properties</h3><ul>
<li><h4 id="注意事项和细节：-53"><a href="#注意事项和细节：-53" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>Properties类继承Hashtable类，实现了Map接口，也是使用一种简直对的形式保存数据</p>
</li>
<li><p>使用特点和Hashtable类似</p>
</li>
<li><p>Properties 还可以用于 从xxx.properties 文件中，加载数据到Properties类对象井进行读取和修改</p>
</li>
<li><p>xxx.properties 文件通常作为配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//1. Properties 继承  Hashtable</span></span><br><span class="line">        <span class="comment">//2. 可以通过 k-v 存放数据，当然key 和 value 不能为 null</span></span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常</span></span><br><span class="line">        <span class="comment">//properties.put(&quot;abc&quot;, null); //抛出 空指针异常</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="number">100</span>);<span class="comment">//k-v</span></span><br><span class="line">        properties.put(<span class="string">&quot;lucy&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">88</span>);<span class="comment">//如果有相同的key ， value被替换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过k 获取对应值</span></span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;lic&quot;</span>));<span class="comment">//88</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="string">&quot;约翰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="12-4-Collections"><a href="#12-4-Collections" class="headerlink" title="12.4  Collections"></a>12.4  Collections</h2><ul>
<li><h4 id="基本介绍：-60"><a href="#基本介绍：-60" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>Collections 是一个操作 Set.List 和 Map 等集合的工具类</li>
<li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li>
</ul>
</li>
<li><h4 id="常用方法：-14"><a href="#常用方法：-14" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>排序操作：</p>
<ul>
<li>reverse (List)：反转List中元素顺序</li>
<li>shuffle(List)：对 List 集合元素进行随机排序</li>
<li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li>
<li>sort(List, Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li>
<li>swap (List, int,int)：将指定 list 集合中的 i处元素和j处元素进行交换</li>
</ul>
</li>
<li><p>查找替换：</p>
<ul>
<li><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</p>
</li>
<li><p>Object max(Collection, Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</p>
</li>
<li><p>Object min(Collection)</p>
</li>
<li><p>Object min(Collection, Comparator)</p>
</li>
<li><p>int frequency(Collection, Object)：返回指定集合中指定元素的出现次数</p>
</li>
<li><p>void copy(List dest, List src)：将src中的内容复制到dest中</p>
</li>
<li><p>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换 List 对象的所有旧值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList 集合，用于测试.</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//            Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;list=&quot; + list);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序后&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line">        <span class="comment">//我们希望按照 字符串的长度大小排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//可以加入校验代码.</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度大小排序=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如</span></span><br><span class="line">        Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后的情况&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));</span><br><span class="line">        <span class="comment">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line">        <span class="comment">//比如，我们要返回长度最大的元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">maxObject</span> <span class="operator">=</span> Collections.max(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((String)o1).length() - ((String)o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度最大的元素=&quot;</span> + maxObject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object min(Collection)</span></span><br><span class="line">        <span class="comment">//Object min(Collection，Comparator)</span></span><br><span class="line">        <span class="comment">//上面的两个方法，参考max即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tom出现的次数=&quot;</span> + Collections.frequency(list, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//为了完成一个完整拷贝，我们需要先给dest 赋值，大小和list.size()一样</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            dest.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;dest=&quot;</span> + dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line">        <span class="comment">//如果list中，有tom 就替换成 汤姆</span></span><br><span class="line">        Collections.replaceAll(list, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list替换后=&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="12-5-总结⭐️⭐️"><a href="#12-5-总结⭐️⭐️" class="headerlink" title="12.5 总结⭐️⭐️"></a>12.5 总结⭐️⭐️</h2><ul>
<li><h4 id="选择集合："><a href="#选择集合：" class="headerlink" title="选择集合："></a>选择集合：</h4><ul>
<li><p>先判断存储的类型（一组对象[单列]或一组键值对[双列]）</p>
</li>
<li><p>一组对象[单列]： Collection接口</p>
<ul>
<li><p>允许重复：List</p>
<p>增删多：LinkedList  [底层维护双向链表]</p>
<p>改查多：ArrayList  [底层維护 Object类型的可变数组]</p>
</li>
<li><p>不允许重复：Set</p>
<p>无序：HashSet  [底层是HashMap，维护了一个哈希表，即(数组＋链表＋红黑树)]</p>
<p>排序：Treeset  []</p>
<p>插入和取出顺序一致：LinkedHashSet  [底层维护数组＋双向链表]</p>
</li>
</ul>
</li>
<li><p>一组键[值对双列]：Map</p>
<ul>
<li>键无序：HashMap  [底层是：哈希表  jdk7：数组＋链表，jdk8:数组＋链表＋红黑树]</li>
<li>键排序：TreeMap  []</li>
<li>键插入和取出顺序一致：LinkedHashMap</li>
<li>读取文件 Propertie</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="13-泛型"><a href="#13-泛型" class="headerlink" title="13 泛型"></a>13 泛型</h1><h2 id="13-1-泛型"><a href="#13-1-泛型" class="headerlink" title="13.1 泛型"></a>13.1 泛型</h2><ul>
<li><h4 id="基本介绍：-61"><a href="#基本介绍：-61" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>泛型又称参数化类型（接收数据类型的数据类型），是Jdk5.0出现的新特性,解决数据类型的安全性问题</li>
<li>在类声明或实例化时只要指定好需要的具体的类型即可</li>
<li>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮</li>
</ul>
</li>
<li><h4 id="基本语法：-18"><a href="#基本语法：-18" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">interface 接口 &lt;T&gt;&#123;&#125;</span><br><span class="line">class 类 &lt;K,V&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">在类名后指定类型参数的值(类型):</span><br><span class="line">  List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">  lterator&lt;Customer&gt; iterator = customers.iterator();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-54"><a href="#注意事项和细节：-54" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>泛型只能是引用类型</li>
<li>在给泛型指定具体类型后，可以传入该类型或者其子类类型</li>
<li>List list3 &#x3D; new ArrayList()：默认给它的 泛型是[&lt;E＞ E就是 Object]</li>
</ol>
</li>
<li><h4 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">3000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        employees.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;<span class="comment">//传入匿名内部类接口重写compare方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee o1, Employee o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o1 <span class="keyword">instanceof</span> Employee) &amp;&amp; (o2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;类型不正确&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> o1.getBirthday().compareTo(o2.getBirthday());<span class="comment">//在MyDate内重写compareTo方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sal;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> sal, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">int</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;MyDate&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyDate&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;year=&quot;</span> + year +</span><br><span class="line">                <span class="string">&quot;, month=&quot;</span> + month +</span><br><span class="line">                <span class="string">&quot;, day=&quot;</span> + day +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(MyDate o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">yearMinus</span> <span class="operator">=</span> year - o.year;</span><br><span class="line">        <span class="keyword">if</span> (yearMinus != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> yearMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">monthMinus</span> <span class="operator">=</span> month - o.month;</span><br><span class="line">        <span class="keyword">if</span> (monthMinus != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> monthMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> day - o.day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="13-2-自定义泛型"><a href="#13-2-自定义泛型" class="headerlink" title="13.2 自定义泛型"></a>13.2 自定义泛型</h2><h3 id="13-2-1泛型类"><a href="#13-2-1泛型类" class="headerlink" title="13.2.1泛型类"></a>13.2.1泛型类</h3><ul>
<li><h4 id="基本语法：-19"><a href="#基本语法：-19" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt;&#123;</span><br><span class="line">  成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-55"><a href="#注意事项和细节：-55" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>普通成员可以使用泛型（属性、方法）</p>
</li>
<li><p>使用泛型的数组，不能初始化</p>
</li>
<li><p>静态方法中不能使用类的泛型</p>
</li>
<li><p>泛型类的类型，是在创建对象时确定的（因为创建对象时，需要指定确定类型）</p>
</li>
<li><p>如果在创建对象时，没有指定类型，默认为Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGeneric_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//T=Double, R=String, M=Integer</span></span><br><span class="line">        Tiger&lt;Double,String,Integer&gt; g = <span class="keyword">new</span> <span class="title class_">Tiger</span>&lt;&gt;(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        g.setT(<span class="number">10.9</span>); <span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//g.setT(&quot;yy&quot;); //错误，类型不对</span></span><br><span class="line">        System.out.println(g);</span><br><span class="line">        <span class="type">Tiger</span> <span class="variable">g2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;john~~&quot;</span>);<span class="comment">//OK T=Object R=Object M=Object</span></span><br><span class="line">        g2.setT(<span class="string">&quot;yy&quot;</span>); <span class="comment">//OK ,因为 T=Object &quot;yy&quot;=String 是Object子类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;g2=&quot;</span> + g2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. Tiger 后面泛型，所以我们把 Tiger 就称为自定义泛型类</span></span><br><span class="line"><span class="comment">//2, T, R, M 泛型的标识符, 一般是单个大写字母</span></span><br><span class="line"><span class="comment">//3. 泛型标识符可以有多个.</span></span><br><span class="line"><span class="comment">//4. 普通成员可以使用泛型 (属性、方法)</span></span><br><span class="line"><span class="comment">//5. 使用泛型的数组，不能初始化</span></span><br><span class="line"><span class="comment">//6. 静态方法中不能使用类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T, R, M&gt; &#123;</span><br><span class="line">    String name;</span><br><span class="line">    R r; <span class="comment">//属性使用到泛型</span></span><br><span class="line">    M m;</span><br><span class="line">    T t;</span><br><span class="line">    <span class="comment">//因为数组在new 不能确定T的类型，就无法在内存开空间</span></span><br><span class="line">    T[] ts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name, R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为静态是和类相关的，在类加载时，对象还没有创建</span></span><br><span class="line">    <span class="comment">//所以，如果静态方法和静态属性使用了泛型，JVM就无法完成初始化</span></span><br><span class="line"><span class="comment">//    static R r2;</span></span><br><span class="line"><span class="comment">//    public static void m1(M m) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法使用泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getR</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setR</span><span class="params">(R r)</span> &#123;<span class="comment">//方法使用到泛型</span></span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> M <span class="title function_">getM</span><span class="params">()</span> &#123;<span class="comment">//返回类型可以使用泛型.</span></span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM</span><span class="params">(M m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tiger&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, r=&quot;</span> + r +</span><br><span class="line">                <span class="string">&quot;, m=&quot;</span> + m +</span><br><span class="line">                <span class="string">&quot;, t=&quot;</span> + t +</span><br><span class="line">                <span class="string">&quot;, ts=&quot;</span> + Arrays.toString(ts) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="13-2-2泛型接口"><a href="#13-2-2泛型接口" class="headerlink" title="13.2.2泛型接口"></a>13.2.2泛型接口</h3><ul>
<li><h4 id="基本语法：-20"><a href="#基本语法：-20" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">interface 接口名&lt;T,R...&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-56"><a href="#注意事项和细节：-56" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>静态成员不能使用泛型</p>
</li>
<li><p><strong>泛型接口的类型，在继承接口或者实现接口时确定</strong></p>
</li>
<li><p>没有指定类型，默认为Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInterfaceGeneric</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  泛型接口使用的说明</span></span><br><span class="line"><span class="comment"> *  1. 接口中，静态成员也不能使用泛型</span></span><br><span class="line"><span class="comment"> *  2. 泛型接口的类型, 在继承接口或者实现接口时确定</span></span><br><span class="line"><span class="comment"> *  3. 没有指定类型，默认为Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在继承接口 指定泛型接口的类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> <span class="keyword">extends</span> <span class="title class_">IUsb</span>&lt;String, Double&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们去实现IA接口时，因为IA在继承IUsu 接口时，指定了U 为String R为Double</span></span><br><span class="line"><span class="comment">//，在实现IUsu接口的方法时，使用String替换U, 是Double替换R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">implements</span> <span class="title class_">IA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Double r1, Double r2, String u1, String u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口时，直接指定泛型接口的类型</span></span><br><span class="line"><span class="comment">//给U 指定Integer 给 R 指定了 Float</span></span><br><span class="line"><span class="comment">//所以，当我们实现IUsb方法时，会使用Integer替换U, 使用Float替换R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&lt;Integer, Float&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">get</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Float aFloat)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有指定类型，默认为Object</span></span><br><span class="line"><span class="comment">//建议直接写成 IUsb&lt;Object,Object&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span> &#123; <span class="comment">//等价 class CC implements IUsb&lt;Object,Object&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//U name; 不能这样使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法中，可以使用接口泛型</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(R r1, R r2, U u1, U u2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="13-2-3泛型方法"><a href="#13-2-3泛型方法" class="headerlink" title="13.2.3泛型方法"></a>13.2.3泛型方法</h3><ul>
<li><h4 id="基本语法：-21"><a href="#基本语法：-21" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符&lt;T,R...&gt;返回类型 方法名(参数列表)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-57"><a href="#注意事项和细节：-57" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>泛型方法，可以定义在普通类中，也可以定义在泛型类中</p>
</li>
<li><p>当泛型方法被调用时，类型会确定</p>
</li>
<li><p>public void eat(E e) {},<br>修饰符后没有&lt;T,R…＞ eat<br>方法不是泛型方法，而是使用了泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMethodGeneric</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.fly(<span class="string">&quot;宝马&quot;</span>, <span class="number">100</span>);<span class="comment">//当调用方法时，传入参数，编译器，就会确定类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        car.fly(<span class="number">300</span>, <span class="number">100.1</span>);<span class="comment">//当调用方法时，传入参数，编译器，就会确定类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//T-&gt;String, R-&gt; ArrayList</span></span><br><span class="line">        Fish&lt;String, ArrayList&gt; fish = <span class="keyword">new</span> <span class="title class_">Fish</span>&lt;&gt;();</span><br><span class="line">        fish.hello(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">11.3f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型方法，可以定义在普通类中, 也可以定义在泛型类中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;<span class="comment">//普通类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明 泛型方法</span></span><br><span class="line">    <span class="comment">//1. &lt;T,R&gt; 就是泛型</span></span><br><span class="line">    <span class="comment">//2. 是提供给 fly使用的</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">(T t, R r)</span> &#123;<span class="comment">//泛型方法</span></span><br><span class="line">        System.out.println(t.getClass());<span class="comment">//String</span></span><br><span class="line">        System.out.println(r.getClass());<span class="comment">//Integer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>&lt;T, R&gt; &#123;<span class="comment">//泛型类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>&lt;U,M&gt; <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(U u, M m)</span> &#123;<span class="comment">//泛型方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 下面hi方法不是泛型方法</span></span><br><span class="line">    <span class="comment">//2. 是hi方法使用了类声明的 泛型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span></span><br><span class="line">    <span class="keyword">public</span>&lt;K&gt; <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(R r, K k)</span> &#123;</span><br><span class="line">        System.out.println(r.getClass());<span class="comment">//ArrayList</span></span><br><span class="line">        System.out.println(k.getClass());<span class="comment">//Float</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="13-3-泛型继承和通配符"><a href="#13-3-泛型继承和通配符" class="headerlink" title="13.3 泛型继承和通配符"></a>13.3 泛型继承和通配符</h2><ul>
<li><h4 id="注意事项和细节：-58"><a href="#注意事项和细节：-58" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>泛型不具备继承性</p>
</li>
<li><?>：支持任意泛型类型
</li>
<li><? extends A>：支持A类以及A类的子类，规定了泛型的上限
</li>
<li><? super A>：支持A类以及A类的父类，不限于直接父类，规定了泛型的下限

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExtends</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型没有继承性</span></span><br><span class="line">        <span class="comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例说明下面三个方法的使用</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">        printCollection1(list1);</span><br><span class="line">        printCollection1(list2);</span><br><span class="line">        printCollection1(list3);</span><br><span class="line">        printCollection1(list4);</span><br><span class="line">        printCollection1(list5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line"><span class="comment">//        printCollection2(list1);//×</span></span><br><span class="line"><span class="comment">//        printCollection2(list2);//×</span></span><br><span class="line">        printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span></span><br><span class="line">        printCollection3(list1);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">        printCollection3(list3);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list4);//×</span></span><br><span class="line">        <span class="comment">//printCollection3(list5);//×</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ? extends AA 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是Object</span></span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? super 子类类名AA:支持AA类以及AA类的父类，不限于直接父类，</span></span><br><span class="line">    <span class="comment">//规定了泛型的下限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="例：-2"><a href="#例：-2" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">         DAO&lt;User&gt; dao = <span class="keyword">new</span> <span class="title class_">DAO</span>&lt;User&gt;();</span><br><span class="line">         dao.save(<span class="string">&quot;001&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">         dao.save(<span class="string">&quot;002&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="string">&quot;tom&quot;</span>));</span><br><span class="line">         dao.save(<span class="string">&quot;003&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="number">12</span>,<span class="string">&quot;mike&quot;</span>));</span><br><span class="line">        List&lt;User&gt; list = dao.list();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        dao.update(<span class="string">&quot;002&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">14</span>,<span class="string">&quot;faker&quot;</span>));</span><br><span class="line">        List&lt;User&gt; list1 = dao.list();</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        dao.delete(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">        List&lt;User&gt; list2 = dao.list();</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DAO</span>&lt;T&gt; &#123;<span class="comment">//泛型类</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String id,T entity)</span> &#123;</span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回 map 中存放的所有 T 对象</span></span><br><span class="line">    <span class="comment">//遍历map [k-v],将map的 所有value(T entity),封装到ArrayList返回即可</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建 Arraylist</span></span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历map</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//map.get(key) 返回就是 User对象-&gt;ArrayList</span></span><br><span class="line">            list.add(map.get(key));<span class="comment">//也可以直接使用本类的 get(String id)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String id,T entity)</span> &#123;<span class="comment">//把entity保存到map</span></span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="14-GUI"><a href="#14-GUI" class="headerlink" title="14  GUI"></a>14  GUI</h1><h2 id="14-1-绘图"><a href="#14-1-绘图" class="headerlink" title="14.1 绘图"></a>14.1 绘图</h2><ul>
<li><h4 id="绘图原理："><a href="#绘图原理：" class="headerlink" title="绘图原理："></a>绘图原理：</h4><ul>
<li>Component类提供了两个和绘图相关最重要的方法：<ol>
<li>paint(Graphics g)绘制组件的外观</li>
<li>repaint()刷新组件的外观</li>
</ol>
</li>
<li>当组件第一次在屏幕显示的时候,程序会自动的调用paint0方法来绘制组件，在以下情况paintQ将会被调用：<ol>
<li>窗口最小化,再最大化</li>
<li>窗口的大小发生变化</li>
<li>repaint函数被调用</li>
</ol>
</li>
</ul>
</li>
<li><h4 id="Graphics类："><a href="#Graphics类：" class="headerlink" title="Graphics类："></a>Graphics类：</h4><ul>
<li>画直线 drawLine(int x1,int yl,int x2,int y2)</li>
<li>画矩形边框 drawRect(int x, int y, int width, int height)</li>
<li>画椭圆边框 drawOval(int x, int y, int width, int height)</li>
<li>填充矩形fillRect(int x, int y, int width, int height)</li>
<li>填充椭园 fillOval(int x, int y. int width, int height)</li>
<li>画图片 drawlmage(Image img, int x, int y, …)</li>
<li>画字符串 drawString(String str, int x, inty)</li>
<li>设置画笔的字体 setFont (Font font)</li>
<li>设置画笔的颜色 setColor(Color c)</li>
</ul>
</li>
</ul>
<h2 id="14-2-事件控制"><a href="#14-2-事件控制" class="headerlink" title="14.2 事件控制"></a>14.2 事件控制</h2><ul>
<li><h4 id="基本介绍：-62"><a href="#基本介绍：-62" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java事件处理是采取“委派事件模型”。当事件发生时,产生事件的对象,会把此”信息”传递给”事件的监听者” 处理，这里所说的”信息”实际上就是 java.awt.event 事件类库里某个类所创建的对象，把它称为”事件的对象“</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-01%2023.33.57.jpg" alt="截屏2022-06-01 23.33.57"></p>
</li>
<li><h4 id="深入理解："><a href="#深入理解：" class="headerlink" title="深入理解："></a>深入理解：</h4><ol>
<li><p>事件源：事件源是一个产生事件的对象，比如按钮，窗口等</p>
</li>
<li><p>事件：事件就是承载事件源状态改变时的对象，比如当键盘事件、鼠标事件、窗口事件等等，会生成一个事件对象，该对家保存着当前事件很多信息，比如KeyEvent 对象有含有被按下键的Gode值。java.awt.event包 和javax.swing.event包中定义了各种事<br>件类型</p>
</li>
<li><p>事件类型：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-01%2023.39.47.jpg" alt="截屏2022-06-01 23.39.47"></p>
</li>
<li><p>事件监听噐号接口：<br>(1)当事件源产生一个事件，可以传送给事件监听者处理Interfaces<br>(2) 事件监听者本质是一个类，该类实现了某个事件监听器接口比如前面我们案例中的MyPanle就是一个类，它实现了<br>KeyListener接口，它就可以作为一个事件监听者，对接受到的事件进行处理<br>(3)事件监听器接口有多种，不同的事件监听器接口可以监听不同的事件 一个类可以实现多个监听接口<br>(4)这些接口在java.awt.event包和javax.swing.event包中定义，列出常用的事件监听器接口，查看jdk 文档聚集了</p>
</li>
</ol>
</li>
</ul>
<h1 id="15-线程-基础"><a href="#15-线程-基础" class="headerlink" title="15 线程(基础)"></a>15 线程(基础)</h1><ul>
<li><h4 id="基本介绍：-63"><a href="#基本介绍：-63" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>线程由进程创建的，是进程的一个实体</li>
<li>一个进程可以拥有多个线程</li>
<li>单线程：同一个时刻，只允许执行一个线程</li>
<li>多线程：同一个时刻，可以执行多个线程</li>
<li>并发：同一个时刻，多个任务交替执行，造成一种“貌似同时”的错觉</li>
<li>并行：同一个时刻，多个任务同时执行，多核cpu可以实现并行</li>
</ul>
</li>
</ul>
<h2 id="16-1-线程使用"><a href="#16-1-线程使用" class="headerlink" title="16.1 线程使用"></a>16.1 线程使用</h2><h3 id="16-1-1-继承Thread"><a href="#16-1-1-继承Thread" class="headerlink" title="16.1.1 继承Thread"></a>16.1.1 继承Thread</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Cat对象，可以当做线程使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//源码</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            (1)</span></span><br><span class="line"><span class="comment">            public synchronized void start() &#123;</span></span><br><span class="line"><span class="comment">                start0();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            (2)</span></span><br><span class="line"><span class="comment">            //start0() 是本地方法，是JVM调用, 底层是c/c++实现</span></span><br><span class="line"><span class="comment">            //真正实现多线程的效果，是start0(), 而不是 run</span></span><br><span class="line"><span class="comment">            private native void start0();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        cat.start();<span class="comment">//启动线程-&gt; 最终会执行cat的run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//cat.run();//run方法就是一个普通的方法, 没有真正的启动一个线程，就会把run方法执行完毕，才向下执行</span></span><br><span class="line">        <span class="comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span></span><br><span class="line">        <span class="comment">//这时 主线程和子线程是交替执行..</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName());<span class="comment">//名字main</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i=&quot;</span> + i);</span><br><span class="line">            <span class="comment">//让主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span></span><br><span class="line"><span class="comment">//2. 我们会重写 run方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment">//3. run Thread 类 实现了 Runnable 接口的run方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//重写run方法，写上自己的业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//该线程每隔1秒。在控制台输出 “喵喵, 我是小猫咪”</span></span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵, 我是小猫咪&quot;</span> + (++times) + <span class="string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让该线程休眠1秒 ctrl+alt+t</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//当times 到80, 退出while, 这时线程也就退出..</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="16-1-2-实现Runnable"><a href="#16-1-2-实现Runnable" class="headerlink" title="16.1.2 实现Runnable"></a>16.1.2 实现Runnable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 这里不能调用start</span></span><br><span class="line">        <span class="comment">//创建了Thread对象，把 dog对象(实现Runnable),放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Tiger tiger = new Tiger();//实现了 Runnable</span></span><br><span class="line"><span class="comment">//        ThreadProxy threadProxy = new ThreadProxy(tiger);</span></span><br><span class="line"><span class="comment">//        threadProxy.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类 , 模拟了一个极简的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy类当做 ThreadProxy</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是 Runnable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//通过实现Runnable接口，开发线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="对比：-2"><a href="#对比：-2" class="headerlink" title="对比："></a>对比：</h4><ol>
<li>java的设计来看，通过继承Thread或者实现Runnable接口来创建线程本质上没有区别,从jidk帮助文档我们可以看到Thread类本身就实现了Runnable接口</li>
<li>实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</li>
</ol>
</li>
<li><h4 id="线程退出："><a href="#线程退出：" class="headerlink" title="线程退出："></a>线程退出：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果希望main线程去控制t1 线程的终止, 必须可以修改 loop</span></span><br><span class="line">        <span class="comment">//让t1 退出run方法，从而终止 t1线程 -&gt; 通知方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让主线程休眠 10 秒，再通知 t1线程退出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程休眠10s...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设置一个控制变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);<span class="comment">// 让当前线程休眠50ms</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T 运行中....&quot;</span> + (++count));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="代理模式模拟："><a href="#代理模式模拟：" class="headerlink" title="代理模式模拟："></a>代理模式模拟：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 这里不能调用start</span></span><br><span class="line">        <span class="comment">//创建了Thread对象，把 dog对象(实现Runnable),放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Tiger tiger = new Tiger();//实现了 Runnable</span></span><br><span class="line"><span class="comment">//        ThreadProxy threadProxy = new ThreadProxy(tiger);</span></span><br><span class="line"><span class="comment">//        threadProxy.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类 , 模拟了一个极简的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy类当做 ThreadProxy</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是 Runnable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//通过实现Runnable接口，开发线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-2-线程方法"><a href="#16-2-线程方法" class="headerlink" title="16.2 线程方法"></a>16.2 线程方法</h2><ul>
<li><h4 id="常用方法1："><a href="#常用方法1：" class="headerlink" title="常用方法1："></a>常用方法1：</h4><ul>
<li><p>setName：设置线程名称，使之与参数 name 相同</p>
</li>
<li><p>getName：返回该线程的名称</p>
</li>
<li><p>start：使该线程开始执行;Java 虚拟机底层调用该线程的 start0方法</p>
</li>
<li><p>run ：调用线程对象 run 方法</p>
</li>
<li><p>setPriority：更改线程的优先级</p>
</li>
<li><p>getPriority：获取线程的优先级</p>
</li>
<li><p>sleep：在指定的毫秒数内让当前正在执行的线程休眠（暂停执行)</p>
</li>
<li><p>interrupt：中断线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//测试相关的方法</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;老韩&quot;</span>);</span><br><span class="line">        t.setPriority(Thread.MIN_PRIORITY);<span class="comment">//1</span></span><br><span class="line">        t.start();<span class="comment">//启动子线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程打印5 hi ,然后我就中断 子线程的休眠</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;hi &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 线程的优先级 =&quot;</span> + t.getPriority());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        t.interrupt();<span class="comment">//当执行到这里，就会中断 t线程的休眠.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; <span class="comment">//自定义的线程类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//Thread.currentThread().getName() 获取当前线程的名称</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  吃包子~~~~&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 休眠中~~~&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">20000</span>);<span class="comment">//20秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">//当该线程执行到一个interrupt 方法时，就会catch 一个 异常, 可以加入自己的业务代码</span></span><br><span class="line">                <span class="comment">//InterruptedException 是捕获到一个中断异常.</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被 interrupt了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="注意事项和细节：-59"><a href="#注意事项和细节：-59" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>start：底层会创建新的线程，调用run，run 就是一个简单的方法调用，不会启动新线程</li>
<li>interrupt：中断线程，但并没有真正的结束线程，所以一般用于中断正在休眠线程</li>
<li>sleep：线程的静态方法，使当前线程休眠</li>
</ol>
</li>
<li><h4 id="常用方法2"><a href="#常用方法2" class="headerlink" title="常用方法2:"></a>常用方法2:</h4><ul>
<li><p>yield：线程的礼让。让出Cpu，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</p>
</li>
<li><p>join：线程的插队。插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程(小弟) 吃了 &quot;</span> + i  + <span class="string">&quot; 包子&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程(小弟) 让 子线程(老大) 先吃&quot;</span>);</span><br><span class="line">                <span class="comment">//join, 线程插队</span></span><br><span class="line">                <span class="comment">//t2.join();// 这里相当于让t2 线程先执行完毕</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>();<span class="comment">//礼让，不一定成功..</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程(老大) 吃完了 主线程(小弟) 接着吃..&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程(老大) 吃了 &quot;</span> + i +  <span class="string">&quot; 包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="用户线程和守护线程："><a href="#用户线程和守护线程：" class="headerlink" title="用户线程和守护线程："></a>用户线程和守护线程：</h4><ul>
<li><p>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</p>
</li>
<li><p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</p>
<p>setDaemon(True)</p>
</li>
<li><p>常见的守护线程：垃圾回收机制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line">        <span class="comment">//如果我们希望当main线程结束后，子线程自动结束</span></span><br><span class="line">        <span class="comment">//只需将子线程设为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        myDaemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//main线程</span></span><br><span class="line">            System.out.println(<span class="string">&quot;辛苦的工作...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1000毫秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;快乐聊天，哈哈哈~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="16-3-线程生命周期"><a href="#16-3-线程生命周期" class="headerlink" title="16.3 线程生命周期"></a>16.3 线程生命周期</h2><ul>
<li><h4 id="周期图："><a href="#周期图：" class="headerlink" title="周期图："></a>周期图：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-03%2015.58.12.jpg" alt="截屏2022-06-03 15.58.12"></li>
</ul>
<h2 id="16-4-Synchronized⭐️"><a href="#16-4-Synchronized⭐️" class="headerlink" title="16.4  Synchronized⭐️"></a>16.4  Synchronized⭐️</h2><ul>
<li><h4 id="线程同步机制："><a href="#线程同步机制：" class="headerlink" title="线程同步机制："></a>线程同步机制：</h4><p>线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</p>
</li>
<li><h4 id="基本语法：-22"><a href="#基本语法：-22" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(对象) &#123; <span class="comment">// 得到对象的锁，才能操作同步代码</span></span><br><span class="line">  需要被同步代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span>&#123;</span><br><span class="line">  需要被同步代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="例：-3"><a href="#例：-3" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket03</span> <span class="variable">sellTicket03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket03</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第1个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第2个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第3个线程-窗口</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口方式, 使用synchronized实现线程同步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//让多个线程共享 ticketNum</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制run方法变量</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步方法（静态的）的锁为当前类本身</span></span><br><span class="line">    <span class="comment">//老韩解读</span></span><br><span class="line">    <span class="comment">//1. public synchronized static void m1() &#123;&#125; 锁是加在 SellTicket03.class</span></span><br><span class="line">    <span class="comment">//2. 如果在静态方法中，实现一个同步代码块.</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (SellTicket03.class) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;m2&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SellTicket03.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老韩说明</span></span><br><span class="line">    <span class="comment">//1. public synchronized void sell() &#123;&#125; 就是一个同步方法</span></span><br><span class="line">    <span class="comment">//2. 这时锁在 this对象</span></span><br><span class="line">    <span class="comment">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在this对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123; <span class="comment">//同步方法, 在同一时刻， 只能有一个线程来执行sell方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束...&quot;</span>);</span><br><span class="line">                loop = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠50毫秒, 模拟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span></span><br><span class="line">                    + <span class="string">&quot; 剩余票数=&quot;</span> + (--ticketNum));<span class="comment">//1 - 0 - -1  - -2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            sell();<span class="comment">//sell方法是一共同步方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-5-互斥锁⭐️"><a href="#16-5-互斥锁⭐️" class="headerlink" title="16.5 互斥锁⭐️"></a>16.5 互斥锁⭐️</h2><ul>
<li><h4 id="基本介绍：-64"><a href="#基本介绍：-64" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性</li>
<li>每个对象都对应于一个可称为“互斥锁〞 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li>
<li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时表明该对象在任一时刻只能由一个线程访问</li>
<li>同步的局限性：导致程序的执行效率要降低</li>
<li>同步方法（非静态的）的锁可以是this，也可以是其他对象（要求是同一个对象）</li>
<li>同步方法（静态的）的锁为当前类本身</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-60"><a href="#注意事项和细节：-60" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>同步方法如果没有使用static修饰：默认锁对象为this</p>
</li>
<li><p>如果方法使用static修饰，默认锁对象：当前类.class</p>
</li>
<li><p>实现的落地步骤：</p>
<ol>
<li><p>需要先分析上锁的代码</p>
</li>
<li><p>选择同步代码块或同步方法</p>
</li>
<li><p>要求多个线程的锁对象为同一个即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="16-6-死锁"><a href="#16-6-死锁" class="headerlink" title="16.6 死锁"></a>16.6 死锁</h2><ul>
<li><h4 id="基本介绍：-65"><a href="#基本介绍：-65" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁，在编程是一定要避免死锁的发生</p>
</li>
<li><h4 id="释放锁："><a href="#释放锁：" class="headerlink" title="释放锁："></a>释放锁：</h4><ul>
<li>当前线程的同步方法、同步代码块执行结束</li>
<li>当前线程在同步代码块、同步方法中遇到break、return</li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的wait0方法，当前线程暂停，井释放锁</li>
</ul>
</li>
<li><h4 id="不释放锁："><a href="#不释放锁：" class="headerlink" title="不释放锁："></a>不释放锁：</h4><ul>
<li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行</li>
<li>线程执行同步代码块时，其他线程调用了该线程的suspendO方法将该线程挂起</li>
</ul>
</li>
</ul>
<h1 id="16-IO流"><a href="#16-IO流" class="headerlink" title="16  IO流"></a>16  IO流</h1><h2 id="16-0-文件"><a href="#16-0-文件" class="headerlink" title="16.0 文件"></a>16.0 文件</h2><ul>
<li><h4 id="基本介绍：-66"><a href="#基本介绍：-66" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>文件是保存数据的地方</p>
</li>
<li><h4 id="文件流："><a href="#文件流：" class="headerlink" title="文件流："></a>文件流：</h4><p>输入流：数据从数据源(文件)到程序(内存)的路径</p>
<p>输出流：数据从程序(内存)到数据源(文件)的路径</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-06%2016.06.15.jpg" alt="截屏2022-06-06 16.06.15"></p>
</li>
<li><h4 id="创建文件："><a href="#创建文件：" class="headerlink" title="创建文件："></a>创建文件：</h4><ul>
<li><p>new File(String pathname) &#x2F;&#x2F;根据文件路径构建</p>
</li>
<li><p>new File(File parent,String child) &#x2F;&#x2F;根据父目录文件+子路径构建</p>
</li>
<li><p>new File(String parent,String child) &#x2F;&#x2F;根据父目录+子路径构建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1 new File(String pathname)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/henghengzhu/Downloads/代码/news1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式2 new File(File parent,String child) //根据父目录文件+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/henghengzhu/Downloads/代码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//这里的file对象，在java程序中，只是一个对象</span></span><br><span class="line">        <span class="comment">//只有执行了createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3 new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//String parentPath = &quot;e:\\&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/henghengzhu/Downloads/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="常用方法：-15"><a href="#常用方法：-15" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>file.getName()</p>
</li>
<li><p>file.getAbsolutePath()</p>
</li>
<li><p>file.getParent()</p>
</li>
<li><p>file.exists()</p>
</li>
<li><p>file.isFile()</p>
</li>
<li><p>file.isFile()</p>
</li>
<li><p>isDirectory()</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\news1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line">        <span class="comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录=&quot;</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="comment">//F</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-1-IO流原理及分类"><a href="#16-1-IO流原理及分类" class="headerlink" title="16.1  IO流原理及分类"></a>16.1  IO流原理及分类</h2><ul>
<li><h4 id="基本介绍：-67"><a href="#基本介绍：-67" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>I&#x2F;O是Input&#x2F;Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理数据传输</p>
</li>
<li><p>Java程序中，对于数据的输入&#x2F;输出操作以”流(stream)”的方式进行</p>
</li>
<li><p>java.io包下提供了各种”流”类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</p>
</li>
<li><p>输入input：读取外部数据（磁盛、光盘等存储设备的数据）到程序（内存）中</p>
</li>
<li><p>输出output：将程序（内存）数据输出到磁盘、光盘等存储设备中</p>
</li>
</ul>
</li>
<li><h4 id="流的分类："><a href="#流的分类：" class="headerlink" title="流的分类："></a>流的分类：</h4><ul>
<li><p>按操作数据单位不同分为：字节流(8 bit)，字符流(按字符）</p>
</li>
<li><p>按数据流的流向不同分为：输入流，输出流</p>
</li>
<li><p>按流的角色的不同分为：节点流，处理流&#x2F;包装流</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-07%2019.14.25.jpg" alt="截屏2022-06-07 19.14.25"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-07%2019.26.09.jpg" alt="截屏2022-06-07 19.26.09"></p>
</li>
</ul>
</li>
</ul>
<h2 id="16-2-节点流和处理流"><a href="#16-2-节点流和处理流" class="headerlink" title="16.2 节点流和处理流"></a>16.2 节点流和处理流</h2><ul>
<li><h4 id="基本介绍：-68"><a href="#基本介绍：-68" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>节点流可以从一个特定的数据源读写数据，如FileReader、FileWriter</p>
</li>
<li><p>处理流(也叫包装流)是 “连接〞在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-12%2019.34.04.jpg" alt="截屏2022-06-12 19.34.04"></p>
</li>
</ul>
</li>
<li><h4 id="区别和联系："><a href="#区别和联系：" class="headerlink" title="区别和联系："></a>区别和联系：</h4><ol>
<li>节点流是底层流&#x2F;低级流,直接跟数据源相接</li>
<li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供重方便的方法来完成输入输出</li>
<li>处理流(也叫包装流)对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li>
</ol>
</li>
<li><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li>
<li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用重加灵活方便</li>
</ul>
</li>
<li><h4 id="模拟："><a href="#模拟：" class="headerlink" title="模拟："></a>模拟：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">FileReader_</span>());</span><br><span class="line">        bufferedReader_.readFiles(<span class="number">10</span>);</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">StringReader_</span>());</span><br><span class="line">        bufferedReader_2.readString(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Reader_</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Reader_ 抽象类，使用read方法统一管理.</span></span><br><span class="line">    <span class="comment">//后面在调用时，利于对象动态绑定机制， 绑定到对应的实现子类即可.</span></span><br><span class="line">    <span class="comment">//public abstract void read();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reader_ reader_; <span class="comment">//属性是 Reader_类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收Reader_ 子类对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedReader_</span><span class="params">(Reader_ reader_)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader_ = reader_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123; <span class="comment">//封装一层</span></span><br><span class="line">        reader_.readFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让方法更加灵活， 多次读取文件, 或者加缓冲byte[] ....</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFiles</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader_.readFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展 readString, 批量处理字符串数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readStrings</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;num; i++) &#123;</span><br><span class="line">            reader_.readString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-3-输入流⭐️"><a href="#16-3-输入流⭐️" class="headerlink" title="16.3 输入流⭐️"></a>16.3 输入流⭐️</h2><ul>
<li><h4 id="基本介绍：-69"><a href="#基本介绍：-69" class="headerlink" title="基本介绍："></a>基本介绍：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-12%2019.16.25.jpg" alt="截屏2022-06-12 19.16.25"></h4></li>
</ul>
<h3 id="16-3-1-InputStream"><a href="#16-3-1-InputStream" class="headerlink" title="16.3.1  InputStream"></a>16.3.1  InputStream</h3><h4 id="16-3-1-1-FileInputStream"><a href="#16-3-1-1-FileInputStream" class="headerlink" title="16.3.1.1  FileInputStream"></a>16.3.1.1  FileInputStream</h4><ul>
<li><h4 id="常用方法：-16"><a href="#常用方法：-16" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2838.jpg" alt="IMG_2838"></p>
</li>
<li><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示读取文件...</span></span><br><span class="line"><span class="comment">     * 单个字节的读取，效率比较低</span></span><br><span class="line"><span class="comment">     * -&gt; 使用 read(byte[] b)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)readData);<span class="comment">//转成char显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 read(byte[] b) 读取文件，提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; <span class="comment">//一次读取8个字节.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取最多b.length字节的数据到字节数组。 此方法将阻塞，直到某些输入可用。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="comment">//如果读取正常, 返回实际读取的字节数</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-3-1-2-BufferedInputStream"><a href="#16-3-1-2-BufferedInputStream" class="headerlink" title="16.3.1.2  BufferedInputStream"></a>16.3.1.2  BufferedInputStream</h4><ul>
<li><h4 id="基本介绍：-70"><a href="#基本介绍：-70" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Bufferedlnputstream是字节流在创建 Bufferedlnputstream时，会创建一个内部缓沖区数组</p>
</li>
<li><h4 id="常用方法：-17"><a href="#常用方法：-17" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2858.jpg" alt="IMG_2858"></p>
</li>
<li><h4 id="例：-4"><a href="#例：-4" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\Koala.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.avi&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a3.java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象BufferedInputStream对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//因为 FileInputStream  是 InputStream 子类</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取文件，并写入到 destFilePath</span></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件拷贝完毕~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-3-1-3-ObjectInputStream"><a href="#16-3-1-3-ObjectInputStream" class="headerlink" title="16.3.1.3  ObjectInputStream"></a>16.3.1.3  ObjectInputStream</h4><ul>
<li><h4 id="基本介绍：-71"><a href="#基本介绍：-71" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>Objectlnputstream 提供反序列化功能</li>
<li>反序列化就是在恢复数据时，恢复数据的值和数据类型</li>
<li>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：Serializable和Externalizable</li>
</ul>
</li>
<li><h4 id="例：-5"><a href="#例：-5" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定反序列化的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解读</span></span><br><span class="line">        <span class="comment">//1. 读取(反序列化)的顺序需要和你保存数据(序列化)的顺序一致</span></span><br><span class="line">        <span class="comment">//2. 否则会出现异常</span></span><br><span class="line"></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readBoolean());</span><br><span class="line"></span><br><span class="line">        System.out.println(ois.readChar());</span><br><span class="line">        System.out.println(ois.readDouble());</span><br><span class="line">        System.out.println(ois.readUTF());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//dog 的编译类型是 Object , dog 的运行类型是 Dog</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行类型=&quot;</span> + dog.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;dog信息=&quot;</span> + dog);<span class="comment">//底层 Object -&gt; Dog</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里是特别重要的细节:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 如果我们希望调用Dog的方法, 需要向下转型</span></span><br><span class="line">        <span class="comment">//2. 需要我们将Dog类的定义，放在到可以引用的位置</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> (Dog)dog;</span><br><span class="line">        System.out.println(dog2.getName()); <span class="comment">//旺财..</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流, 关闭外层流即可，底层会关闭 FileInputStream 流</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="16-3-2-Reader"><a href="#16-3-2-Reader" class="headerlink" title="16.3.2  Reader"></a>16.3.2  Reader</h3><h4 id="16-3-2-1-FileReader"><a href="#16-3-2-1-FileReader" class="headerlink" title="16.3.2.1  FileReader"></a>16.3.2.1  FileReader</h4><ul>
<li><h4 id="常用方法：-18"><a href="#常用方法：-18" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>read：每次读取单个字符，返回该字符，如果到文件末尾返回-1</li>
<li>read(char)：批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回-1</li>
</ul>
</li>
<li><h4 id="方法使用："><a href="#方法使用：" class="headerlink" title="方法使用："></a>方法使用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个字符读取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. 创建FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取 使用read, 单个字符读取</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符数组读取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~readFile02 ~~~&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//1. 创建FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取 使用read(buf), 返回的是实际读取到的字符数</span></span><br><span class="line">            <span class="comment">//如果返回-1, 说明到文件结束</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-3-2-2-BufferedReader"><a href="#16-3-2-2-BufferedReader" class="headerlink" title="16.3.2.2  BufferedReader"></a>16.3.2.2  BufferedReader</h4><ul>
<li><h4 id="例：-6"><a href="#例：-6" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="comment">//创建bufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath));</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        String line; <span class="comment">//按行读取, 效率高</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. bufferedReader.readLine() 是按行读取文件</span></span><br><span class="line">        <span class="comment">//2. 当返回null 时，表示文件读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流, 这里注意，只需要关闭 BufferedReader ，因为底层会自动的去关闭 节点流</span></span><br><span class="line">        <span class="comment">//FileReader。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public void close() throws IOException &#123;</span></span><br><span class="line"><span class="comment">                synchronized (lock) &#123;</span></span><br><span class="line"><span class="comment">                    if (in == null)</span></span><br><span class="line"><span class="comment">                        return;</span></span><br><span class="line"><span class="comment">                    try &#123;</span></span><br><span class="line"><span class="comment">                        in.close();//in 就是我们传入的 new FileReader(filePath), 关闭了.</span></span><br><span class="line"><span class="comment">                    &#125; finally &#123;</span></span><br><span class="line"><span class="comment">                        in = null;</span></span><br><span class="line"><span class="comment">                        cb = null;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-3-2-3-InputStreamReader"><a href="#16-3-2-3-InputStreamReader" class="headerlink" title="16.3.2.3  InputStreamReader"></a>16.3.2.3  InputStreamReader</h4><ul>
<li><h4 id="基本介绍：-72"><a href="#基本介绍：-72" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>InputStreamReader：Reader的子类，可以将lnputStream(字节流)包装成Reader(字符流）</p>
</li>
<li><p>当处理纯文本数据时，如果使用宇符流效率重高，井且可以有效解決中文问题，所以建议字节流转换成字符流</p>
</li>
</ul>
</li>
<li><h4 id="例：-7"><a href="#例：-7" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//解读</span></span><br><span class="line">        <span class="comment">//1. 把 FileInputStream 转成 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2. 指定编码 gbk</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span></span><br><span class="line">        <span class="comment">//3. 把 InputStreamReader 传入 BufferedReader</span></span><br><span class="line">        <span class="comment">//BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将2 和 3 合在一起</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                                                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容=&quot;</span> + s);</span><br><span class="line">        <span class="comment">//5. 关闭外层流</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-4-输出流⭐️"><a href="#16-4-输出流⭐️" class="headerlink" title="16.4 输出流⭐️"></a>16.4 输出流⭐️</h2><ul>
<li><h4 id="基本介绍：-73"><a href="#基本介绍：-73" class="headerlink" title="基本介绍："></a>基本介绍：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-14%2010.49.52.jpg" alt="截屏2022-06-14 10.49.52"></li>
</ul>
<h3 id="16-4-1-OutputStream"><a href="#16-4-1-OutputStream" class="headerlink" title="16.4.1  OutputStream"></a>16.4.1  OutputStream</h3><h4 id="16-4-1-1-FileOutputStream"><a href="#16-4-1-1-FileOutputStream" class="headerlink" title="16.4.1.1  FileOutputStream"></a>16.4.1.1  FileOutputStream</h4><ul>
<li><h4 id="常用方法：-19"><a href="#常用方法：-19" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2848.jpg" alt="IMG_2848"></p>
</li>
<li><h4 id="使用方法：-1"><a href="#使用方法：-1" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示使用FileOutputStream 将数据写到文件中,</span></span><br><span class="line"><span class="comment">     * 如果该文件不存在，则创建该文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 FileOutputStream对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到 FileOutputStream对象</span></span><br><span class="line">            <span class="comment">//说明</span></span><br><span class="line">            <span class="comment">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span></span><br><span class="line">            <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span></span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//写入一个字节</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(&#x27;H&#x27;);//</span></span><br><span class="line">            <span class="comment">//写入字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hsp,world!&quot;</span>;</span><br><span class="line">            <span class="comment">//str.getBytes() 可以把 字符串-&gt; 字节数组</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(str.getBytes());</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            write(byte[] b, int off, int len) 将 len字节从位于偏移量 off的指定字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-4-1-2-BufferedOutputStream"><a href="#16-4-1-2-BufferedOutputStream" class="headerlink" title="16.4.1.2  BufferedOutputStream"></a>16.4.1.2  BufferedOutputStream</h4><ul>
<li><h4 id="基本介绍：-74"><a href="#基本介绍：-74" class="headerlink" title="基本介绍："></a>基本介绍：</h4></li>
</ul>
<p>BufferedOutputstream是字节流，实现缓冲的输出流，可以将多个字节写入底层输出流中，而不必对每次字节写入调用底层<br>系统</p>
<ul>
<li><h4 id="常用方法：-20"><a href="#常用方法：-20" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2859.jpg" alt="IMG_2859"></p>
</li>
<li><h4 id="例：-8"><a href="#例：-8" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\Koala.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.avi&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a3.java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象BufferedInputStream对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//因为 FileInputStream  是 InputStream 子类</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取文件，并写入到 destFilePath</span></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件拷贝完毕~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-4-1-3-ObjectOutputStream"><a href="#16-4-1-3-ObjectOutputStream" class="headerlink" title="16.4.1.3  ObjectOutputStream"></a>16.4.1.3  ObjectOutputStream</h4><ul>
<li><h4 id="基本介绍：-75"><a href="#基本介绍：-75" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>Objectoutputstream 提供序列化功能</p>
</li>
<li><p>序列化就是在保存数据时，保存数据的值和数据类型</p>
</li>
<li><p>列化就是在恢复数据时，恢复数据的值和数据类型</p>
</li>
<li><p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：Serializable和Externalizable</p>
</li>
</ul>
</li>
<li><h4 id="例：-9"><a href="#例：-9" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化数据到 e:\data.dat</span></span><br><span class="line">        oos.writeInt(<span class="number">100</span>);<span class="comment">// int -&gt; Integer (实现了 Serializable)</span></span><br><span class="line">        oos.writeBoolean(<span class="literal">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了 Serializable)</span></span><br><span class="line">        oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了 Serializable)</span></span><br><span class="line">        oos.writeDouble(<span class="number">9.5</span>);<span class="comment">// double -&gt; Double (实现了 Serializable)</span></span><br><span class="line">        oos.writeUTF(<span class="string">&quot;韩顺平教育&quot;</span>);<span class="comment">//String</span></span><br><span class="line">        <span class="comment">//保存一个dog对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">10</span>, <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;白色&quot;</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据保存完毕(序列化形式)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-61"><a href="#注意事项和细节：-61" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>读写顺序要一致</li>
<li>要求实现序列化或反序列化对象，需要实现 Serializable</li>
<li>序列化的类中建议添加SerialVersionUID，为了提高版本兼容性</li>
<li>序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</li>
<li>序列化对象时，要求里面属性的类型也需要实现序列化接口</li>
<li>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也己经默认实现了序列化</li>
</ol>
</li>
</ul>
<h4 id="16-4-1-4-PrintStream"><a href="#16-4-1-4-PrintStream" class="headerlink" title="16.4.1.4  PrintStream"></a>16.4.1.4  PrintStream</h4><ul>
<li><h4 id="例：-10"><a href="#例：-10" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             public void print(String s) &#123;</span></span><br><span class="line"><span class="comment">                if (s == null) &#123;</span></span><br><span class="line"><span class="comment">                    s = &quot;null&quot;;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                write(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.print(<span class="string">&quot;john, hello&quot;</span>);</span><br><span class="line">        <span class="comment">//因为print底层使用的是write , 所以我们可以直接调用write进行打印/输出</span></span><br><span class="line">        out.write(<span class="string">&quot;韩顺平,你好&quot;</span>.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们可以去修改打印流输出的位置/设备</span></span><br><span class="line">        <span class="comment">//1. 输出修改成到 &quot;e:\\f1.txt&quot;</span></span><br><span class="line">        <span class="comment">//2. &quot;hello, 韩顺平教育~&quot; 就会输出到 e:\f1.txt</span></span><br><span class="line">        <span class="comment">//3. public static void setOut(PrintStream out) &#123;</span></span><br><span class="line">        <span class="comment">//        checkIO();</span></span><br><span class="line">        <span class="comment">//        setOut0(out); // native 方法，修改了out</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\f1.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, 韩顺平教育~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="16-4-2-Writer"><a href="#16-4-2-Writer" class="headerlink" title="16.4.2  Writer"></a>16.4.2  Writer</h3><h4 id="16-4-2-1-FileWriter"><a href="#16-4-2-1-FileWriter" class="headerlink" title="16.4.2.1  FileWriter"></a>16.4.2.1  FileWriter</h4><ul>
<li><h4 id="常用方法：-21"><a href="#常用方法：-21" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>new File Writer (File&#x2F;String)：覆盖模式，相当于流的指针在首端</li>
<li>new FileWriter (File&#x2F;String.true)：追加模式，相当于流的指针在尾端</li>
<li>write(int)：写入单个字符</li>
<li>write(char[])：写入指定数组</li>
<li>write(char[],off len)：写入指定数组的指定部分</li>
<li>write (string)：写入整个字符律</li>
<li>write(string,off,len)：写入字符串的指定部分</li>
</ul>
</li>
<li><h4 id="方法使用：-1"><a href="#方法使用：-1" class="headerlink" title="方法使用："></a>方法使用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\note.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);<span class="comment">//默认是覆盖写入</span></span><br><span class="line"><span class="comment">//            3) write(int):写入单个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="comment">//            4) write(char[]):写入指定数组</span></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line"><span class="comment">//            5) write(char[],off,len):写入指定数组的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;韩顺平教育&quot;</span>.toCharArray(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//            6) write（string）：写入整个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot; 你好北京~&quot;</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;风雨之后，定见彩虹&quot;</span>);</span><br><span class="line"><span class="comment">//            7) write(string,off,len):写入字符串的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海天津&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//在数据量大的情况下，可以使用循环操作.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</span></span><br><span class="line">            <span class="comment">//老韩看源码就知道原因.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                看看代码</span></span><br><span class="line"><span class="comment">                private void writeBytes() throws IOException &#123;</span></span><br><span class="line"><span class="comment">        this.bb.flip();</span></span><br><span class="line"><span class="comment">        int var1 = this.bb.limit();</span></span><br><span class="line"><span class="comment">        int var2 = this.bb.position();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        assert var2 &lt;= var1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int var3 = var2 &lt;= var1 ? var1 - var2 : 0;</span></span><br><span class="line"><span class="comment">        if (var3 &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">            if (this.ch != null) &#123;</span></span><br><span class="line"><span class="comment">                assert this.ch.write(this.bb) == var3 : var3;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                this.out.write(this.bb.array(), this.bb.arrayOffset() + var2, var3);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        this.bb.clear();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//fileWriter.flush();</span></span><br><span class="line">                <span class="comment">//关闭文件流，等价 flush() + 关闭</span></span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="文件拷贝："><a href="#文件拷贝：" class="headerlink" title="文件拷贝："></a>文件拷贝：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//完成 文件拷贝，将 e:\\Koala.jpg 拷贝 c:\\</span></span><br><span class="line">        <span class="comment">//思路分析</span></span><br><span class="line">        <span class="comment">//1. 创建文件的输入流 , 将文件读入到程序</span></span><br><span class="line">        <span class="comment">//2. 创建文件的输出流， 将读取到的文件数据，写入到指定的文件.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala3.jpg&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line">            <span class="comment">//定义一个字节数组,提高读取效果</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//读取到后，就写入到文件 通过 fileOutputStream</span></span><br><span class="line">                <span class="comment">//即，是一边读，一边写</span></span><br><span class="line">                fileOutputStream.write(buf, <span class="number">0</span>, readLen);<span class="comment">//一定要使用这个方法</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝ok~&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关闭输入流和输出流，释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul>
<li><strong>FileWriter使用后，必须要关闭(close)或刷新(flush），否则写入不到指定的文件</strong></li>
</ul>
</li>
</ul>
<h4 id="16-4-2-2-BufferedWriter"><a href="#16-4-2-2-BufferedWriter" class="headerlink" title="16.4.2.2  BufferedWriter"></a>16.4.2.2  BufferedWriter</h4><ul>
<li><h4 id="例：-11"><a href="#例：-11" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\ok.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建BufferedWriter</span></span><br><span class="line">        <span class="comment">//说明:</span></span><br><span class="line">        <span class="comment">//1. new FileWriter(filePath, true) 表示以追加的方式写入</span></span><br><span class="line">        <span class="comment">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个和系统相关的换行</span></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello2, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello3, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明：关闭外层流即可 ， 传入的 new FileWriter(filePath) ,会在底层关闭</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="文件拷贝：-1"><a href="#文件拷贝：-1" class="headerlink" title="文件拷贝："></a>文件拷贝：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. BufferedReader 和 BufferedWriter 是安装字符操作</span></span><br><span class="line">        <span class="comment">//2. 不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</span></span><br><span class="line">        <span class="comment">//BufferedInputStream</span></span><br><span class="line">        <span class="comment">//BufferedOutputStream</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a2.java&quot;</span>;</span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\a2韩顺平.avi&quot;;</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFilePath));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明: readLine 读取一行内容，但是没有换行</span></span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//每读取一行，就写入</span></span><br><span class="line">                bw.write(line);</span><br><span class="line">                <span class="comment">//插入一个换行</span></span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝完毕...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(br != <span class="literal">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-4-2-3-OutputStreamWriter"><a href="#16-4-2-3-OutputStreamWriter" class="headerlink" title="16.4.2.3  OutputStreamWriter"></a>16.4.2.3  OutputStreamWriter</h4><ul>
<li><h4 id="基本介绍：-76"><a href="#基本介绍：-76" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>OutputStreamWriter：Writer的子类，实现将Outputstream(字节流)包装成Writer(字符流)</li>
<li>当处理纯文本数据时，如果使用宇符流效率重高，井且可以有效解決中文问题，所以建议格字节流转快成字符流</li>
<li>可以在使用时指定编码格式</li>
</ul>
</li>
<li><h4 id="例：-12"><a href="#例：-12" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hsp.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">charSet</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath), charSet);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">        bw.write(<span class="string">&quot;hi, 韩顺平教育&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;按照 &quot;</span> + charSet + <span class="string">&quot; 保存文件成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="16-4-2-4-PrintWrite"><a href="#16-4-2-4-PrintWrite" class="headerlink" title="16.4.2.4  PrintWrite"></a>16.4.2.4  PrintWrite</h4><ul>
<li><h4 id="例：-13"><a href="#例：-13" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter printWriter = new PrintWriter(System.out);</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\f2.txt&quot;</span>));</span><br><span class="line">        printWriter.print(<span class="string">&quot;hi, 北京你好~~~~&quot;</span>);</span><br><span class="line">        printWriter.close();<span class="comment">//flush + 关闭流, 才会将数据写入到文件..</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="16-5-Properties"><a href="#16-5-Properties" class="headerlink" title="16.5 Properties"></a>16.5 Properties</h2><ul>
<li><h4 id="基本介绍：-77"><a href="#基本介绍：-77" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>专门用于读号配置文件的集合类配置文件的格式：键&#x3D;值</p>
</li>
<li><p>键值对不需要有空格，值不需要用引号一起来</p>
</li>
<li><p>默认类型是String</p>
</li>
<li></li>
</ul>
</li>
<li><h4 id="常用方法：-22"><a href="#常用方法：-22" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li>load：加载配置文件的键值对到Properties对象</li>
<li>list：将数据显示到指定设备</li>
<li>getProperty (key)：根据键获取值</li>
<li>setProperty(key value)：设置键值对到Properties对象</li>
<li>store：将Properties中的键值对存储到配置文件，在idea 中，保存信息到配置文件，如果含有中文，会存储为unicode码</li>
</ul>
</li>
<li><h4 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//使用Properties 类来读取mysql.properties 文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//3. 把k-v显示控制台</span></span><br><span class="line">        properties.list(System.out);</span><br><span class="line">        <span class="comment">//4. 根据key 获取对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//使用Properties 类来创建 配置文件, 修改配置文件内容</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        <span class="comment">//1.如果该文件没有key 就是创建</span></span><br><span class="line">        <span class="comment">//2.如果该文件有key ,就是修改</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Properties 父类是 Hashtable ， 底层就是Hashtable 核心方法</span></span><br><span class="line"><span class="comment">            public synchronized V put(K key, V value) &#123;</span></span><br><span class="line"><span class="comment">                // Make sure the value is not null</span></span><br><span class="line"><span class="comment">                if (value == null) &#123;</span></span><br><span class="line"><span class="comment">                    throw new NullPointerException();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                // Makes sure the key is not already in the hashtable.</span></span><br><span class="line"><span class="comment">                Entry&lt;?,?&gt; tab[] = table;</span></span><br><span class="line"><span class="comment">                int hash = key.hashCode();</span></span><br><span class="line"><span class="comment">                int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span></span><br><span class="line"><span class="comment">                @SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="comment">                Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span></span><br><span class="line"><span class="comment">                for(; entry != null ; entry = entry.next) &#123;</span></span><br><span class="line"><span class="comment">                    if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span></span><br><span class="line"><span class="comment">                        V old = entry.value;</span></span><br><span class="line"><span class="comment">                        entry.value = value;//如果key 存在，就替换</span></span><br><span class="line"><span class="comment">                        return old;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                addEntry(hash, key, value, index);//如果是新k, 就addEntry</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);<span class="comment">//注意保存时，是中文的 unicode码值</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;888888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将k-v 存储文件中即可</span></span><br><span class="line">        properties.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\mysql2.properties&quot;</span>), <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存配置文件成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h1><h2 id="17-1-网络基础"><a href="#17-1-网络基础" class="headerlink" title="17.1 网络基础"></a>17.1 网络基础</h2><ul>
<li><h4 id="ip地址："><a href="#ip地址：" class="headerlink" title="ip地址："></a>ip地址：</h4><ul>
<li>用于唯一标识网络中的每台计算机&#x2F;主机</li>
<li>查看ip地址：ipconfig</li>
<li>ip地址的表示形式：点分十进制 xx.xx.xx.xx</li>
<li>每一个十进制数的范围：0~255</li>
<li>ip地址的组成&#x3D;网络地址＋主机地址，比如：192.168.16.69</li>
<li>ilPv6是互联网工程任务组设计的用于替代1PV4的下一代IP协议</li>
</ul>
</li>
<li><h4 id="ipv4地址分类："><a href="#ipv4地址分类：" class="headerlink" title="ipv4地址分类："></a>ipv4地址分类：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.42.09.jpg" alt="截屏2022-06-20 10.42.09"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.43.05.jpg" alt="截屏2022-06-20 10.43.05"></p>
</li>
<li><h4 id="域名："><a href="#域名：" class="headerlink" title="域名："></a>域名：</h4><ul>
<li>将ip地址映射成域名</li>
</ul>
</li>
<li><h4 id="端口号："><a href="#端口号：" class="headerlink" title="端口号："></a>端口号：</h4><ul>
<li>用于标识计算机上某个特定的网络程序</li>
<li>表示形式：以整数形式，范围0~65535</li>
<li>0~1024己经被占用，比如ssh 22,ftp 21, smtp 25 http 80</li>
<li>常见的网络程序端口号：<br>tomcat :8080<br>mysql:3306<br>oracle:1521<br>sqlserver:1433</li>
</ul>
</li>
<li><h4 id="网络通信协议："><a href="#网络通信协议：" class="headerlink" title="网络通信协议："></a>网络通信协议：</h4><ul>
<li><p>TCP&#x2F;IP (Transmission Control Protocol&#x2F;Internet Protocol的简写，中文译名为传输控制协议&#x2F;因特网互联协议，又叫网络通讯协议，这个协议是internet最基本的协议，internet国际互联网络的基础就是由网络层的IP协议和传输层的TCP协议组成的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.46.15.jpg" alt="截屏2022-06-20 10.46.15"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.46.39.jpg" alt="截屏2022-06-20 10.46.39"></p>
</li>
</ul>
</li>
<li><h4 id="TCP："><a href="#TCP：" class="headerlink" title="TCP："></a>TCP：</h4><ul>
<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>
<li>传输前，采用”三次握手”方式，是可靠的</li>
<li>TCP协议进行通信的两个应用进程：客户端、服务端</li>
<li>在连接中可进行大数据量的传输</li>
<li>传输完毕，需释放已建立的连接，效率低</li>
</ul>
</li>
<li><h4 id="UDP："><a href="#UDP：" class="headerlink" title="UDP："></a>UDP：</h4><ul>
<li>格数据源、目的封装成数据包，不需要建立连接</li>
<li>每个数据报的大小限制在64K内</li>
<li>因无需连接，故是不可靠的</li>
<li>发送数据结束时无需释放资源(因为不是面向连接的)，速度快</li>
</ul>
</li>
</ul>
<h2 id="17-2-InetAddress"><a href="#17-2-InetAddress" class="headerlink" title="17.2  InetAddress"></a>17.2  InetAddress</h2><ul>
<li><h4 id="常用方法：-23"><a href="#常用方法：-23" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>获取本机InetAddress对象 getLocalHost</p>
</li>
<li><p>根据指定主机名&#x2F;域名获取ip地址对象 getByName</p>
</li>
<li><p>获取InetAddress对象的主机名 getHostName</p>
</li>
<li><p>获取InetAddress对象的地址 getHostAddress</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取本机的InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);<span class="comment">//DESKTOP-S4MP84S/192.168.12.1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据指定主机名 获取 InetAddress对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-S4MP84S&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host1=&quot;</span> + host1);<span class="comment">//DESKTOP-S4MP84S/192.168.12.1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据域名返回 InetAddress对象, 比如 www.baidu.com 对应</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host2=&quot;</span> + host2);<span class="comment">//www.baidu.com / 110.242.68.4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 通过 InetAddress 对象，获取对应的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> host2.getHostAddress();<span class="comment">//IP 110.242.68.4</span></span><br><span class="line">        System.out.println(<span class="string">&quot;host2 对应的ip = &quot;</span> + hostAddress);<span class="comment">//110.242.68.4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 通过 InetAddress 对象，获取对应的主机名/或者的域名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2对应的主机名/域名=&quot;</span> + hostName); <span class="comment">// www.baidu.com</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="17-3-Socket"><a href="#17-3-Socket" class="headerlink" title="17.3  Socket"></a>17.3  Socket</h2><ul>
<li><h4 id="基本介绍：-78"><a href="#基本介绍：-78" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>通信的两端都要有Socket，是两台机器间通信的端点</li>
<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输</li>
<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li>
</ul>
</li>
<li><h4 id="TCP网络通信编程："><a href="#TCP网络通信编程：" class="headerlink" title="TCP网络通信编程："></a>TCP网络通信编程：</h4><ul>
<li><p>基于客户端——服务端的网络通信</p>
</li>
<li><p>底层使用TCP&#x2F;IP协议</p>
</li>
<li><p>基于Socket的TCP编程</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2011.27.52.jpg" alt="截屏2022-06-20 11.27.52"></p>
</li>
</ul>
</li>
</ul>
<h2 id="17-4-TCP编程⭐️"><a href="#17-4-TCP编程⭐️" class="headerlink" title="17.4  TCP编程⭐️"></a>17.4  TCP编程⭐️</h2><ul>
<li><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP03Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 在本机 的9999端口监听, 等待连接</span></span><br><span class="line">        <span class="comment">//   细节: 要求在本机没有其它服务在监听9999</span></span><br><span class="line">        <span class="comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span></span><br><span class="line">        <span class="comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 socket =&quot;</span> + socket.getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. IO读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取socket相关联的输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//   使用字符输出流的方式回复信息</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello client 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭流和socket</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();<span class="comment">//关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP03Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 连接服务端 (ip , 端口）</span></span><br><span class="line">        <span class="comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 socket返回=&quot;</span> + socket.getClass());</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">//   得到 和 socket对象关联的输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, server 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取和socket关联的输入流. 读取数据(字符)，并显示</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭流对象和socket, 必须关闭</span></span><br><span class="line">        bufferedReader.close();<span class="comment">//关闭外层流</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="图片拷贝"><a href="#图片拷贝" class="headerlink" title="图片拷贝"></a>图片拷贝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 服务端在本机监听8888端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在8888端口监听....&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 等待连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 读取客户端发送的数据</span></span><br><span class="line">        <span class="comment">//   通过Socket得到输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;src\\abc.mp4&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端回复 &quot;收到图片&quot;</span></span><br><span class="line">        <span class="comment">// 通过socket 获取到输出流(字符)</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        writer.flush();<span class="comment">//把内容刷新到数据通道</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭其他资源</span></span><br><span class="line">        writer.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端连接服务端 8888，得到Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//创建读取磁盘文件的输入流</span></span><br><span class="line">        <span class="comment">//String filePath = &quot;e:\\qie.png&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\abc.mp4&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//bytes 就是filePath对应的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket获取到输出流, 将bytes数据发送给服务端</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bos.write(bytes);<span class="comment">//将文件对应的字节数组的内容，写入到数据通道</span></span><br><span class="line">        bis.close();</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入数据的结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=====接收从服务端回复的消息=====</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//使用StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StreamUtils.streamToString(inputStream);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关的流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="音乐拷贝："><a href="#音乐拷贝：" class="headerlink" title="音乐拷贝："></a>音乐拷贝：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 监听 9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2.等待客户端连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待下载文件&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//3.读取 客户端发送要下载的文件名</span></span><br><span class="line">        <span class="comment">//  这里老师使用了while读取文件名，时考虑将来客户端发送的数据较大的情况</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            downLoadFileName += <span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端希望下载文件名=&quot;</span> + downLoadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师在服务器上有两个文件, 无名.mp3 高山流水.mp3</span></span><br><span class="line">        <span class="comment">//如果客户下载的是 高山流水 我们就返回该文件，否则一律返回 无名.mp3</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resFileName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;高山流水&quot;</span>.equals(downLoadFileName)) &#123;</span><br><span class="line">            resFileName = <span class="string">&quot;src\\高山流水.mp3&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resFileName = <span class="string">&quot;src\\无名.mp3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建一个输入流，读取文件</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(resFileName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 使用工具类StreamUtils ，读取文件到一个字节数组</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//6. 得到Socket关联的输出流</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//7. 写入到数据通道，返回给客户端</span></span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//很关键.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8 关闭相关的资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端退出...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 接收用户输入，指定下载文件名</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入下载文件名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 客户端连接服务端，准备发送</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//3. 获取和Socket关联的输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(downloadFileName.getBytes());</span><br><span class="line">        <span class="comment">//设置写入结束的标志</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 读取服务端返回的文件(字节数据)</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//5. 得到一个输出流，准备将 bytes 写入到磁盘文件</span></span><br><span class="line">        <span class="comment">//比如你下载的是 高山流水 =&gt; 下载的就是 高山流水.mp3</span></span><br><span class="line">        <span class="comment">//    你下载的是 韩顺平 =&gt; 下载的就是 无名.mp3  文件名 韩顺平.mp3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span> + downloadFileName + <span class="string">&quot;.mp3&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 关闭相关的资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端下载完毕，正确退出..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="netstat指令："><a href="#netstat指令：" class="headerlink" title="netstat指令："></a>netstat指令：</h4><ul>
<li>netstat-an 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</li>
<li>netstat -an l more 可以分页显示</li>
<li>要求在dos控制台下执行</li>
</ul>
</li>
</ul>
<h2 id="17-5-UDP编程"><a href="#17-5-UDP编程" class="headerlink" title="17.5  UDP编程"></a>17.5  UDP编程</h2><ul>
<li><h4 id="基本介绍：-79"><a href="#基本介绍：-79" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序</li>
<li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达</li>
<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号</li>
<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li>
</ul>
</li>
<li><h4 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h4><ol>
<li><p>核心的两个类&#x2F;对象 Datagramsocket与DatagramPacket</p>
</li>
<li><p>建立发送端，接收端</p>
</li>
<li><p>建立数据包</p>
</li>
<li><p>调用DatagramSocket的发送、接收方法</p>
</li>
<li><p>关网DatagramSocket</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2889.jpg" alt="IMG_2889"></p>
</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-62"><a href="#注意事项和细节：-62" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>没有明确的服务端和客户端，演变成数据的发送端和接收端</li>
<li>接收数据和发送数据是通过 DatagramSocket 对象完成</li>
<li>将数据封装到DatagramPacket 对象&#x2F; 装包</li>
<li>当接收到 DatagramPacket 对象，需要进行拆包，取出数据</li>
<li>DatagramSocket 可以指定在哪个端口接收数据</li>
</ol>
</li>
<li><h4 id="例：-14"><a href="#例：-14" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//老师提示: 当有数据包发送到 本机的9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//老师提示: 当有数据包发送到 本机的9998端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="18-反射"><a href="#18-反射" class="headerlink" title="18 反射"></a>18 反射</h1><h2 id="18-1-反射机制"><a href="#18-1-反射机制" class="headerlink" title="18.1 反射机制"></a>18.1 反射机制</h2><ul>
<li><h4 id="基本介绍：-80"><a href="#基本介绍：-80" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>反射机制允许程序在执行期借助子Reflection API取得任何类的内部信息(比如成员变量，构造器，成员方法等等），并能操作对象的属性及方法</p>
</li>
<li><p>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.19.26.jpg" alt="截屏2022-06-27 23.19.26"></p>
</li>
</ul>
</li>
</ul>
<h2 id="18-2-反射相关类"><a href="#18-2-反射相关类" class="headerlink" title="18.2 反射相关类"></a>18.2 反射相关类</h2><ul>
<li>java.lang.Class：代表一个类，Class对象表示某个类加载后在堆中的对象</li>
<li>java.lang.reflect.Method：代表该类的方法</li>
<li>java.lang.reflect.Field：代表类的成员变量</li>
<li>java.lang.reflect.Constructor：代表类的构造方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 使用Properties 类, 可以读写配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();<span class="comment">//&quot;com.hspedu.Cat&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> properties.get(<span class="string">&quot;method&quot;</span>).toString();<span class="comment">//&quot;hi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用反射机制解决</span></span><br><span class="line">        <span class="comment">//(1) 加载类, 返回Class类型的对象cls</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="comment">//运行类型</span></span><br><span class="line">        <span class="comment">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName&quot;hi&quot;  的方法对象</span></span><br><span class="line">        <span class="comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">        method1.invoke(o); <span class="comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Field: 代表类的成员变量, Field对象表示某个类的成员变量</span></span><br><span class="line">        <span class="comment">//得到name字段</span></span><br><span class="line">        <span class="comment">//getField不能得到私有的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;age&quot;</span>); <span class="comment">//</span></span><br><span class="line">        System.out.println(nameField.get(o)); <span class="comment">// 传统写法 对象.成员变量 , 反射 :  成员变量对象.get(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor对象表示构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor(); <span class="comment">//()中可以指定构造器参数类型, 返回无参构造器</span></span><br><span class="line">        System.out.println(constructor);<span class="comment">//Cat()</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class); <span class="comment">//这里传入的 String.class 就是String类的Class对象</span></span><br><span class="line">        System.out.println(constructor2);<span class="comment">//Cat(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-3-Class类"><a href="#18-3-Class类" class="headerlink" title="18.3 Class类"></a>18.3 Class类</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.33.40.jpg" alt="截屏2022-06-27 23.33.40"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2925.jpg" alt="IMG_2925"></p>
<ul>
<li><h4 id="基本介绍：-81"><a href="#基本介绍：-81" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>Class也是类，因此也继承Object类</li>
<li>Class类对象不是new出来的，而是系统创建的</li>
<li>类的Class类对象，在内存中只有一份，且只加载一次</li>
<li>每个类的实例都会记录它属于哪个Class实例生成</li>
<li>通过Class可以完整地得到一个类的完整结构，通过一系列API</li>
<li>Class对象是存放在堆的</li>
<li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据(包括 方法代码，变量名，方法名，访问权限等等）</li>
</ul>
</li>
<li><h4 id="Class类对象获取："><a href="#Class类对象获取：" class="headerlink" title="Class类对象获取："></a>Class类对象获取：</h4><ol>
<li><p>前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取</p>
<p>Class cls1 &#x3D; Class.forName(“java.lang.Cat” )</p>
<p>应用场景：多用于配置文件，读取类全路径，加载类</p>
</li>
<li><p>前提：若已知具体的类，通过类的class 获取，该方式最为安全可靠，程序性能最高</p>
<p>Class cls2 &#x3D; Cat.class</p>
<p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象</p>
</li>
<li><p>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</p>
<p>Class class &#x3D; 对象.getClass();</p>
<p>应用场景：通过创建好的对象，获取Class对象</p>
</li>
<li><p>其他方式(类加载器)<br>ClassLoader cl &#x3D; 对象.getClass().getClassLoader();<br>Class class4 &#x3D; cl.loadClass(“类的全类名”);</p>
</li>
<li><p>基本数据(int, char boolean,float,double.byte.long,short) </p>
<p>Class cls &#x3D; 基本数据类型.class</p>
</li>
<li><p>基本数据类型对应的包装类，可以通过.type 得到Class类对象</p>
<p>Class cls &#x3D; 包装类.TYPE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClass_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. Class.forName</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hspedu.Car&quot;</span>; <span class="comment">//通过读取配置文件获取</span></span><br><span class="line">        Class&lt;?&gt; cls1 = Class.forName(classAllPath);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 类名.class , 应用场景: 用于参数传递</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 对象.getClass(), 应用场景，有对象实例</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 通过类加载器【4种】来获取到类的Class对象</span></span><br><span class="line">        <span class="comment">//(1)先得到类加载器 car</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//(2)通过类加载器得到Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls4</span> <span class="operator">=</span> classLoader.loadClass(classAllPath);</span><br><span class="line">        System.out.println(cls4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cls1 , cls2 , cls3 , cls4 其实是同一个对象</span></span><br><span class="line">        System.out.println(cls1.hashCode());</span><br><span class="line">        System.out.println(cls2.hashCode());</span><br><span class="line">        System.out.println(cls3.hashCode());</span><br><span class="line">        System.out.println(cls4.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 基本数据(int, char,boolean,float,double,byte,long,short) 按如下方式得到Class类对象</span></span><br><span class="line">        Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">        Class&lt;Character&gt; characterClass = <span class="type">char</span>.class;</span><br><span class="line">        Class&lt;Boolean&gt; booleanClass = <span class="type">boolean</span>.class;</span><br><span class="line">        System.out.println(integerClass);<span class="comment">//int</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 基本数据类型对应的包装类，可以通过 .TYPE 得到Class类对象</span></span><br><span class="line">        Class&lt;Integer&gt; type1 = Integer.TYPE;</span><br><span class="line">        Class&lt;Character&gt; type2 = Character.TYPE; <span class="comment">//其它包装类BOOLEAN, DOUBLE, LONG,BYTE等待</span></span><br><span class="line">        System.out.println(type1);</span><br><span class="line"></span><br><span class="line">        System.out.println(integerClass.hashCode());<span class="comment">//?</span></span><br><span class="line">        System.out.println(type1.hashCode());<span class="comment">//?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="有Class对象的类型："><a href="#有Class对象的类型：" class="headerlink" title="有Class对象的类型："></a>有Class对象的类型：</h4><ol>
<li><p>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</p>
</li>
<li><p>interface :接口</p>
</li>
<li><p>数组</p>
</li>
<li><p>enum：枚举</p>
</li>
<li><p>annotation ：注解</p>
</li>
<li><p>基本数据类型</p>
</li>
<li><p>void</p>
</li>
</ol>
</li>
<li><h4 id="常用方法：-24"><a href="#常用方法：-24" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.37.22.jpg" alt="截屏2022-06-27 23.37.22"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hspedu.Car&quot;</span>;</span><br><span class="line">        <span class="comment">//1 . 获取到Car类 对应的 Class对象</span></span><br><span class="line">        <span class="comment">//&lt;?&gt; 表示不确定的Java类型</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line">        <span class="comment">//2. 输出cls</span></span><br><span class="line">        System.out.println(cls); <span class="comment">//显示cls对象, 是哪个类的Class对象 com.hspedu.Car</span></span><br><span class="line">        System.out.println(cls.getClass());<span class="comment">//输出cls运行类型 java.lang.Class</span></span><br><span class="line">        <span class="comment">//3. 得到包名</span></span><br><span class="line">        System.out.println(cls.getPackage().getName());<span class="comment">//包名</span></span><br><span class="line">        <span class="comment">//4. 得到全类名</span></span><br><span class="line">        System.out.println(cls.getName());</span><br><span class="line">        <span class="comment">//5. 通过cls创建对象实例</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) cls.newInstance();</span><br><span class="line">        System.out.println(car);<span class="comment">//car.toString()</span></span><br><span class="line">        <span class="comment">//6. 通过反射获取属性 brand</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">brand</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//宝马</span></span><br><span class="line">        <span class="comment">//7. 通过反射给属性赋值</span></span><br><span class="line">        brand.set(car, <span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//奔驰</span></span><br><span class="line">        <span class="comment">//8 我希望大家可以得到所有的属性(字段)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======所有的字段属性====&quot;</span>);</span><br><span class="line">        Field[] fields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f.getName());<span class="comment">//名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="18-4-类加载"><a href="#18-4-类加载" class="headerlink" title="18.4 类加载"></a>18.4 类加载</h2><ul>
<li><h4 id="基本介绍：-82"><a href="#基本介绍：-82" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li>反射机制是 java实现动态语言的关键，也就是通过反射实现类动态加载</li>
<li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li>
<li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</li>
</ol>
</li>
<li><h4 id="类加载时机："><a href="#类加载时机：" class="headerlink" title="类加载时机："></a>类加载时机：</h4><ol>
<li>当创建对象时 (new）&#x2F;&#x2F;静态加载</li>
<li>当子类被加载时，父类也加载 &#x2F;&#x2F;静态加载</li>
<li>调用类中的静态成员时 &#x2F;&#x2F;静态加载</li>
<li>通过反射 &#x2F;&#x2F;动态加载</li>
</ol>
</li>
<li><h4 id="过程图："><a href="#过程图：" class="headerlink" title="过程图："></a>过程图：</h4><p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-06-28%2023.20.21.jpg" alt="截屏2022-06-28 23.20.21"></p>
</li>
<li><h4 id="各个阶段任务："><a href="#各个阶段任务：" class="headerlink" title="各个阶段任务："></a>各个阶段任务：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-28%2023.22.18.jpg" alt="截屏2022-06-28 23.22.18"></p>
</li>
</ul>
<h4 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1 加载阶段"></a>1 加载阶段</h4><p>JM 在该阶段的主要目的是将字节码从不同的数据源（可能是class 文件、也可能是jar 包，甚至网络）转化为二进制字节流加载到内存中，并生成一个代表该类的java.lang.Class 对象</p>
<h4 id="2-1-连接阶段——验证"><a href="#2-1-连接阶段——验证" class="headerlink" title="2.1 连接阶段——验证"></a>2.1 连接阶段——验证</h4><ol>
<li>目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li>
<li>包括：文件格式验证(是否以魔数 oxcafebabe开头)、元数据验证、字节码验证和符号引用验证</li>
<li>可以考虑使用-Xverify:none 参数来关闭大部分的类验证措施，缩短虛拟机类加载的时间</li>
</ol>
<h4 id="2-2-连接阶段——准备"><a href="#2-2-连接阶段——准备" class="headerlink" title="2.2 连接阶段——准备"></a>2.2 连接阶段——准备</h4><ol>
<li>JVM 会在该阶段对静态变量，分配内存井初始化（对应数据类型的默认初始值如0、OL、null false 等），这些变量所使用的内存都将在方法区中进行分配</li>
</ol>
<h4 id="2-3-连接阶段——解析"><a href="#2-3-连接阶段——解析" class="headerlink" title="2.3 连接阶段——解析"></a>2.3 连接阶段——解析</h4><ol>
<li>虛拟机将常量池内的符号引用替换为直接引用的过程</li>
</ol>
<h4 id="3-初始化："><a href="#3-初始化：" class="headerlink" title="3 初始化："></a>3 初始化：</h4><ol>
<li><p>到初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行&lt;clinit&gt;() 方法的过程</p>
</li>
<li><p>&lt;clinit&gt;() 方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句，</p>
<p>井进行合井</p>
</li>
<li><p>虚拟机会保证一个类的 &lt;Clinit&gt;()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;Clinit&gt;()方其他线程都需要阻塞等待，直到活动线程执行&lt;Clinit&gt;()方法完毕</p>
</li>
</ol>
<h2 id="18-5-反射获取类的结构信息"><a href="#18-5-反射获取类的结构信息" class="headerlink" title="18.5 反射获取类的结构信息"></a>18.5 反射获取类的结构信息</h2><ul>
<li><h4 id="第一组Class类方法："><a href="#第一组Class类方法：" class="headerlink" title="第一组Class类方法："></a>第一组Class类方法：</h4><ul>
<li><p>getName:获取全类名</p>
</li>
<li><p>getSimpleName:获取简单类名</p>
</li>
<li><p>getFields:获取所有public修饰的属性，包含本类以及父类的</p>
</li>
<li><p>getDeclaredFields:获取本类中所有属性</p>
</li>
<li><p>getMethods:获取所有public修饰的方法，包含本类以及父类的</p>
</li>
<li><p>getDeclaredMethods:获取本类中所有方法</p>
</li>
<li><p>getConstructors:获取所有public修饰的构造器，包含本类</p>
</li>
<li><p>getDeclaredConstructors:获取本类中所有构造器</p>
</li>
<li><p>getPackage:lPackage形式返回 包信息</p>
</li>
<li><p>getSuperClass:以Class形式返回父类信息</p>
</li>
<li><p>getlnterfaces:以Class[]形式返回接口信息</p>
</li>
<li><p>getAnnotations:以Annotation[] 形式返回注解信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());<span class="comment">//com.hspedu.reflection.Person</span></span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());<span class="comment">//Person</span></span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;<span class="comment">//增强for</span></span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里老师只是输出名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());<span class="comment">//com.hspedu.reflection</span></span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);<span class="comment">//注解</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IB</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">IA</span>, IB &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="第二组Field类方法："><a href="#第二组Field类方法：" class="headerlink" title="第二组Field类方法："></a>第二组Field类方法：</h4><ul>
<li><p>getModifiers:以int形式返回修饰符<br>public 是 1，private 是 2 ，protected 是 4，static是8，final是 16</p>
</li>
<li><p>getType:以Class形式返回类型</p>
</li>
<li><p>getName:返回属性名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到Class对象</span></span><br><span class="line">Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line"><span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line"><span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">            + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="第三组Method类方法："><a href="#第三组Method类方法：" class="headerlink" title="第三组Method类方法："></a>第三组Method类方法：</h4><ul>
<li><p>getModifiers:以int形式返回修饰符<br>public 是 1，private 是 2 ，protected 是 4，static是8，final是 16</p>
</li>
<li><p>getName:返回方法名</p>
</li>
<li><p>getParameterTypes:以Class[]返回参数类型数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="第四组Constructor类方法："><a href="#第四组Constructor类方法：" class="headerlink" title="第四组Constructor类方法："></a>第四组Constructor类方法：</h4><ul>
<li><p>getModifiers: 以int形式返回修饰符</p>
</li>
<li><p>getName:返回构造器名</p>
</li>
<li><p>getParameterTypes:以Class[]返回参数类型数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里老师只是输出名</span></span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="18-6-通过反射创建对象"><a href="#18-6-通过反射创建对象" class="headerlink" title="18.6 通过反射创建对象"></a>18.6 通过反射创建对象</h2><ul>
<li><h4 id="Class相关方法："><a href="#Class相关方法：" class="headerlink" title="Class相关方法："></a>Class相关方法：</h4><ul>
<li>newlnstance：调用类中的无参构造器，获取对应类的对象</li>
<li>getConstructor(Class.…clazz):根据参数列表，获取对应的public构造器对象</li>
<li>getDecalared Constructor(Class..clazz):根据参数列表，获取对应的所有构造器对象</li>
</ul>
</li>
<li><h4 id="Constructor类相关方法："><a href="#Constructor类相关方法：" class="headerlink" title="Constructor类相关方法："></a>Constructor类相关方法：</h4><ul>
<li>SetAccessible:暴破</li>
<li>newlnstance(Obiect…obj):调用构造器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先获取到User类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;com.hspedu.reflection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过public的无参构造器创建实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//3. 通过public的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            constructor 对象就是</span></span><br><span class="line"><span class="comment">            public User(String name) &#123;//public的有参构造器</span></span><br><span class="line"><span class="comment">                this.name = name;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.1 先得到对应构造器</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//3.2 创建实例，并传入实参</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">hsp</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hsp=&quot;</span> + hsp);</span><br><span class="line">        <span class="comment">//4. 通过非public的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">//4.1 得到private的构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//4.2 创建实例</span></span><br><span class="line">        <span class="comment">//暴破【暴力破解】 , 使用反射可以访问private构造器/方法/属性, 反射面前，都是纸老虎</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">100</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2=&quot;</span> + user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//User类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;韩顺平教育&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;<span class="comment">//public的有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="18-7-通过反射访问类"><a href="#18-7-通过反射访问类" class="headerlink" title="18.7 通过反射访问类"></a>18.7 通过反射访问类</h2><ul>
<li><h4 id="通过反射访问类中属性："><a href="#通过反射访问类中属性：" class="headerlink" title="通过反射访问类中属性："></a>通过反射访问类中属性：</h4><ul>
<li><p>根据属性名获取Field对象<br>Field f&#x3D; class对象.getDeclaredField(属性名);</p>
</li>
<li><p>暴破：f.setAccessible(true);</p>
</li>
<li><p>访问:<br>f.set(o,值);<br>System.out.print(f.get(o));</p>
</li>
<li><p>如果是静态属性，则set和get中的参数o，可以写成null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessProperty</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Student类对应的 Class对象</span></span><br><span class="line">        Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.hspedu.reflection.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stuClass.newInstance();<span class="comment">//o 的运行类型就是Student</span></span><br><span class="line">        System.out.println(o.getClass());<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//3. 使用反射得到age 属性对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(o, <span class="number">88</span>);<span class="comment">//通过反射来操作属性</span></span><br><span class="line">        System.out.println(o);<span class="comment">//</span></span><br><span class="line">        System.out.println(age.get(o));<span class="comment">//返回age属性的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用反射操作name 属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//对name 进行暴破, 可以操作private 属性</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//name.set(o, &quot;老韩&quot;);</span></span><br><span class="line">        name.set(<span class="literal">null</span>, <span class="string">&quot;老韩~&quot;</span>);<span class="comment">//因为name是static属性，因此 o 也可以写出null</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(name.get(o)); <span class="comment">//获取属性值</span></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));<span class="comment">//获取属性值, 要求name是static</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="通过反射访问类中方法："><a href="#通过反射访问类中方法：" class="headerlink" title="通过反射访问类中方法："></a>通过反射访问类中方法：</h4></li>
<li><ol>
<li><p>根据方法名和参数列表获取Method方法对象：Method m:<br>clazz.getDeclaredMethod(方法名，xx.class);</p>
</li>
<li><p>获取对象：Object o&#x3D;class.newlnstance();</p>
</li>
<li><p>暴破：o.setAccessible(true);</p>
</li>
<li><p>访问：Object returnValue &#x3D;m.invoke(o,实参列表)：可以写成null</p>
</li>
<li><p>注意：如果是静态方法，则invoke的参数o，可以写成null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Boss类对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; bossCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Boss&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> bossCls.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用public的hi方法</span></span><br><span class="line">        <span class="comment">//Method hi = bossCls.getMethod(&quot;hi&quot;, String.class);//OK</span></span><br><span class="line">        <span class="comment">//3.1 得到hi方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;hi&quot;</span>, String.class);<span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//3.2 调用</span></span><br><span class="line">        hi.invoke(o, <span class="string">&quot;韩顺平教育~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 调用private static 方法</span></span><br><span class="line">        <span class="comment">//4.1 得到 say 方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;say&quot;</span>, <span class="type">int</span>.class, String.class, <span class="type">char</span>.class);</span><br><span class="line">        <span class="comment">//4.2 因为say方法是private, 所以需要暴破，原理和前面讲的构造器和属性一样</span></span><br><span class="line">        say.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(say.invoke(o, <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">        <span class="comment">//4.3 因为say方法是static的，还可以这样调用 ，可以传入null</span></span><br><span class="line">        System.out.println(say.invoke(<span class="literal">null</span>, <span class="number">200</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal</span> <span class="operator">=</span> say.invoke(<span class="literal">null</span>, <span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal 的运行类型=&quot;</span> + reVal.getClass());<span class="comment">//String</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在演示一个返回的案例</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal2</span> <span class="operator">=</span> m1.invoke(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal2的运行类型=&quot;</span> + reVal2.getClass());<span class="comment">//Monster</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">say</span><span class="params">(<span class="type">int</span> n, String s, <span class="type">char</span> c)</span> &#123;<span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="string">&quot; &quot;</span> + s + <span class="string">&quot; &quot;</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(String s)</span> &#123;<span class="comment">//普通public方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hi &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="18-8-反射性能优化"><a href="#18-8-反射性能优化" class="headerlink" title="18.8 反射性能优化"></a>18.8 反射性能优化</h2><ul>
<li><h4 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h4><ul>
<li><p>优点：可以动态的创建和使用对象(也是框架底层孩心)，使用灵活，没有反射机制，框架技术就失去底层支撑</p>
</li>
<li><p>缺点：使用反射基本是解释执行，对执行速度有影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field</span></span><br><span class="line">        <span class="comment">//Method</span></span><br><span class="line">        <span class="comment">//Constructor</span></span><br><span class="line">        m1();</span><br><span class="line">        m2();</span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统方法来调用hi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90</span>; i++) &#123;</span><br><span class="line">            cat.hi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射机制调用方法hi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.hspedu.Cat&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">900000000</span>; i++) &#123;</span><br><span class="line">            hi.invoke(o);<span class="comment">//反射调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m2() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射调用优化 + 关闭访问检查</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.hspedu.Cat&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        hi.setAccessible(<span class="literal">true</span>);<span class="comment">//在反射调用方法时，取消访问检查</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">900000000</span>; i++) &#123;</span><br><span class="line">            hi.invoke(o);<span class="comment">//反射调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m3() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="关闭访问检查："><a href="#关闭访问检查：" class="headerlink" title="关闭访问检查："></a>关闭访问检查：</h4><ul>
<li>Method和Field、Constructor对象都有setAccessible()方法</li>
<li>setAccessible作用是启动和禁用访问安全检查的开关</li>
<li>参数值为true表示 反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li>
</ul>
</li>
</ul>
<h1 id="19-MySQL数据库"><a href="#19-MySQL数据库" class="headerlink" title="19 MySQL数据库"></a>19 MySQL数据库</h1><h2 id="19-0-数据库"><a href="#19-0-数据库" class="headerlink" title="19.0 数据库"></a>19.0 数据库</h2><ul>
<li><h4 id="基本介绍：-83"><a href="#基本介绍：-83" class="headerlink" title="基本介绍："></a>基本介绍：</h4><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-09%2013.25.41-20220809132619560.jpg"></h2></li>
<li><h4 id="创建指令："><a href="#创建指令：" class="headerlink" title="创建指令："></a>创建指令：</h4><ul>
<li><p>创建数据库：CREATE DATABASE syh_db01;</p>
</li>
<li><p>创建一个使用 utf8 字符集的 hsp_db02 数据库：</p>
<p>CREATE DATABASE syh_db02 CHARACTER SET utf8;</p>
</li>
<li><p>创建一个使用 utf8 字符集，并带校对规则的的syh_db03 数据库：</p>
<p>CREATE DATABASE hsp_db03 CHARACTER SET utf8 COLLATE utf8_bin;</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-63"><a href="#注意事项和细节：-63" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>CHARACTER SET：指定数据库采用的字符集，如果不指定字符集，<strong>默认utf8</strong></li>
<li>COLLATE：指定数据库字符集的校对规则（常用的 utf8 bin、 utf8 general ci <strong>注意默认是 utf8 general ci</strong>）</li>
<li>校对规则：utf8_bin 区分大小，utf8_general_ci不区分大小写</li>
<li><strong>表不指定字符集和校对规则则默认使用数据库的字符集和校对规则</strong></li>
</ol>
</li>
<li><h4 id="查看、删除指令："><a href="#查看、删除指令：" class="headerlink" title="查看、删除指令："></a>查看、删除指令：</h4><ul>
<li>显示数据库语句：SHOW DATABASES</li>
<li>品示数据库创建语句：SHOW CREATE DATABASE db name</li>
<li>数据库删除语句：DROP DATABASE [IF EXISTS] db name</li>
</ul>
</li>
<li><h4 id="备份、恢复指令："><a href="#备份、恢复指令：" class="headerlink" title="备份、恢复指令："></a>备份、恢复指令：</h4><ul>
<li>备份数据库(注意：在DOS执行) 命令行：mysqldump-u 用户名 -p -B 数据库1 数据库2 数据库n＞文件名.sql</li>
<li>恢复数据库(注意：进入Mysql命令行再执行)：Source 文件名.sql</li>
</ul>
</li>
</ul>
<h2 id="19-1-表"><a href="#19-1-表" class="headerlink" title="19.1 表"></a>19.1 表</h2><ul>
<li><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` ( </span><br><span class="line">  `id` INT NOT NULL AUTO_INCREMENT, </span><br><span class="line">  `name` VARCHAR(255), </span><br><span class="line">  `password` VARCHAR(255),</span><br><span class="line">  `biethday` DATE) </span><br><span class="line">  CHARACTER SET utf8 COLLATE utf8_bin ENGING INNODB;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">			ADD (column datatype [DEFAULI expr],</span><br><span class="line">     			column datatype...);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">			MODIFY(column datatype [DEFAULTexpr],</span><br><span class="line">            column datatype...);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">			DROP(column);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看表的结构： desc 表名;</span><br><span class="line">修改表名： Rename table 表名 to 新表名;</span><br><span class="line">修改表宇符集： alter table 表名 character set 字符集;</span><br><span class="line">不允许为空： NOT NULL;</span><br><span class="line">自增长： AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-2-数据类型⭐️"><a href="#19-2-数据类型⭐️" class="headerlink" title="19.2 数据类型⭐️"></a>19.2 数据类型⭐️</h2><ul>
<li><h4 id="Mysql常用数据类型："><a href="#Mysql常用数据类型：" class="headerlink" title="Mysql常用数据类型："></a>Mysql常用数据类型：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2997.jpg" alt="IMG_2997"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-11%2009.18.11.jpg" alt="截屏2022-08-11 09.18.11"></p>
</li>
<li><h4 id="无符号："><a href="#无符号：" class="headerlink" title="无符号："></a>无符号：</h4><ul>
<li>create table t10 (id tinyint );&#x2F;&#x2F;默认是有符号的</li>
<li>create table t11 (id tinyint <strong>unsigned</strong> );&#x2F;&#x2F;无符号的</li>
</ul>
</li>
</ul>
<h3 id="19-2-1-数值型"><a href="#19-2-1-数值型" class="headerlink" title="19.2.1 数值型"></a>19.2.1 数值型</h3><ul>
<li><h4 id="整数："><a href="#整数：" class="headerlink" title="整数："></a>整数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-11%2009.23.42-20220811092459795-20220811092605703.jpg"></p>
</li>
<li><h4 id="bit："><a href="#bit：" class="headerlink" title="bit："></a>bit：</h4><ul>
<li>mysql&gt; create table t05 (num bit (8));</li>
<li>mysql&gt; insert into t05 (1, 3);</li>
<li>mysql&gt; insert into t05 values(2, 65);</li>
</ul>
</li>
<li><h4 id="bit注意事项和细节："><a href="#bit注意事项和细节：" class="headerlink" title="bit注意事项和细节："></a>bit注意事项和细节：</h4><ol>
<li>bit 字段显示时，按照位的方式显示</li>
<li>查询的时候仍然可以用使用<strong>数值</strong>查询</li>
<li>如果一个值只有 0,1可以考虑使用 bit(1)可以节约空间位类型</li>
<li>M指定位数，默认值1，范围1-64使用不多</li>
</ol>
</li>
<li><h4 id="小数："><a href="#小数：" class="headerlink" title="小数："></a>小数：</h4><ul>
<li>FLOAT&#x2F;&#x2F;Float&#x2F;&#x2F;单精度精度</li>
<li>DOUBLE [UNSIGNED]&#x2F;&#x2F;Double&#x2F;&#x2F;双精度</li>
<li>DECIMAL[M, D] [UNSIGNED]&#x2F;&#x2F;自定义</li>
</ul>
</li>
<li><h4 id="小数注意事项和细节："><a href="#小数注意事项和细节：" class="headerlink" title="小数注意事项和细节："></a>小数注意事项和细节：</h4><ol>
<li>decimal可以支持更加精确的小数位</li>
<li>M是小数位数(精度)的总数，D是小数点(标度)后面的位数。</li>
<li>如果D是0，则值没有小数点或分数部分。M最大65，D最大是30。如果D被省略，默认是0。如果M被省略，默认是10</li>
<li>建议：如果希望小数的精度高，推荐使用decimal</li>
</ol>
</li>
</ul>
<h3 id="19-2-2-字符串型"><a href="#19-2-2-字符串型" class="headerlink" title="19.2.2 字符串型"></a>19.2.2 字符串型</h3><ul>
<li><h4 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h4><ul>
<li>CHAR (size)固定长度宇符串 最大255 字符</li>
<li>VARCHAR(size)可变长度字符串最大65532字节[utf8编码最大21844字符1-3个字节用子记录大小]</li>
</ul>
</li>
<li><h4 id="字符串注意事项和细节："><a href="#字符串注意事项和细节：" class="headerlink" title="字符串注意事项和细节："></a>字符串注意事项和细节：</h4><ol>
<li>char(4)&#x2F;&#x2F;这个4表示字符数(最大255)，不是字节数，不管是中文还是宇母都是放四个,按字符计算</li>
<li>varchar(4)&#x2F;&#x2F;这个4表示字符数，不管是字母还是中文都以定义好的表的编码来存放数据</li>
<li>char(4) 是定长</li>
<li>varchar(4) 是变长，就是说，如果你插入了’aa’,实际占用空间大小并不是4个字符，而是按照实际占用空间来分配（说明：varchar本身还需要占用1-3个字节来记录存放内容长度）</li>
<li>查询速度：char &gt; varchar</li>
<li>存放文果时，也可以使用 Text 数据类型、可以将TEXT列视为VARCHAR列，注意 Text 不能有默认值．大小 0-2^16字节<br>如果希望存放更多字符，可以选择MEDIUMTEXT 0-2^24 或者 LONGTEXT 0~2^32</li>
</ol>
</li>
</ul>
<h3 id="19-2-3-日期型"><a href="#19-2-3-日期型" class="headerlink" title="19.2.3 日期型"></a>19.2.3 日期型</h3><ul>
<li><h4 id="日期类："><a href="#日期类：" class="headerlink" title="日期类："></a>日期类：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE birthday6</span><br><span class="line">			(t1 DATE, </span><br><span class="line">	 		 t2 DATETIME,</span><br><span class="line"> 	 		 †3 TIMESTAMP NOT NULL DEFAULT</span><br><span class="line">	 		 CURRENT TIMESTAMP ON UPDATE</span><br><span class="line">	 		 CURRENT_TIMESTAMP );</span><br><span class="line">   		 //timestamp时间戳</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="日期类注意事项和细节："><a href="#日期类注意事项和细节：" class="headerlink" title="日期类注意事项和细节："></a>日期类注意事项和细节：</h4><ol>
<li>TimeStamp在Insert和update时，自动更新</li>
</ol>
</li>
</ul>
<h2 id="19-3-CRUD⭐️"><a href="#19-3-CRUD⭐️" class="headerlink" title="19.3 CRUD⭐️"></a>19.3 CRUD⭐️</h2><h3 id="19-3-1-Insert"><a href="#19-3-1-Insert" class="headerlink" title="19.3.1 Insert"></a>19.3.1 Insert</h3><ul>
<li><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO tablename (column ,column...)</span><br><span class="line">						VALUES(value , value...) ;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-64"><a href="#注意事项和细节：-64" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>插入的数据应与字段的数据类型相同</li>
<li>数据的长度应在列的规定范围内</li>
<li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li>
<li>字符和日期型数据应包含在单引号中</li>
<li>列可以插入空值[前提是该字段允许为空]</li>
<li>insert into tab name (列名…）values ().().() 形式添加多条记录</li>
<li>如果是给表中的所有字段添加数据，可以不写前面的字段名称</li>
<li>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</li>
</ol>
</li>
</ul>
<h3 id="19-3-2-Update"><a href="#19-3-2-Update" class="headerlink" title="19.3.2 Update"></a>19.3.2 Update</h3><ul>
<li><h4 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE  employee</span><br><span class="line">				SET salary = 1000</span><br><span class="line">				WHERE user_name = &#x27;jack&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-65"><a href="#注意事项和细节：-65" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>UPDATE语法可以用新值重新原有表行中的各列</li>
<li>SET子句指示要修改哪些列和要给子哪些值</li>
<li>WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行</li>
<li>如果需要修改多个字段，可以通过 set 字段1&#x3D;值1，字段2&#x3D;值2…</li>
</ol>
</li>
</ul>
<h3 id="19-3-3-Delete"><a href="#19-3-3-Delete" class="headerlink" title="19.3.3 Delete"></a>19.3.3 Delete</h3><ul>
<li><h4 id="基本使用：-2"><a href="#基本使用：-2" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE  FROM employee</span><br><span class="line">				WHERE user_name = &#x27;jack&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-66"><a href="#注意事项和细节：-66" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>如果不使用where子句，将删除表中所有数据</li>
<li>Delete语句不能删除某一列的值（可使用update 设为 null 或者”)</li>
<li>使用delete语句仅删除记录，不删除表本身，可以使用drop删除表</li>
</ol>
</li>
</ul>
<h3 id="19-3-4-Select"><a href="#19-3-4-Select" class="headerlink" title="19.3.4 Select"></a>19.3.4 Select</h3><ul>
<li><h4 id="基本使用：-3"><a href="#基本使用：-3" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT [DISTINCT] *|&#123;column1,column2,...&#125;</span><br><span class="line">				FROM tablename;</span><br><span class="line">				GROUP BY column</span><br><span class="line">				having condition</span><br><span class="line">				ORDER BY column</span><br><span class="line">				limit start,rows;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-67"><a href="#注意事项和细节：-67" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>Select 指定查询哪些列的数据</li>
<li>column指定列名</li>
<li>*表示指定查询哪张表</li>
<li>DISTINCT可选，指显示结果时，是否去掉重复数据</li>
</ol>
</li>
<li><h4 id="表达式进行列运算："><a href="#表达式进行列运算：" class="headerlink" title="表达式进行列运算："></a>表达式进行列运算：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *|&#123;column1|expression,column2|expression,...&#125;</span><br><span class="line">				FROM tablename;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="as："><a href="#as：" class="headerlink" title="as："></a>as：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT columname as 别名 from tablename;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="where："><a href="#where：" class="headerlink" title="where："></a>where：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tablename</span><br><span class="line">				 WHERE 条件；</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2014.45.09.jpg" alt="截屏2022-08-14 14.45.09"></p>
</li>
<li><h4 id="between-and"><a href="#between-and" class="headerlink" title="between and:"></a>between and:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT empno,ename,dname,grade</span><br><span class="line">				FROM emp,dept,salgrade </span><br><span class="line">				WHERE emp.deptno = dept.deptno </span><br><span class="line">				AND (sal BETWEEN losal AND hisal);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="order-by："><a href="#order-by：" class="headerlink" title="order by："></a>order by：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">				FROM tablename</span><br><span class="line">				order by colum asc|desc;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-68"><a href="#注意事项和细节：-68" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>Order by 指定排序的列，排序的列既可以是表中的列名，也可以是select语句后指定的列名</li>
<li>AsC 升序[默认]、Desc 降序</li>
<li>ORDER BY 子句应位于SELECT语句的结尾</li>
</ol>
</li>
<li><h4 id="group-by-x2F-having："><a href="#group-by-x2F-having：" class="headerlink" title="group by&#x2F;having："></a>group by&#x2F;having：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">				FROM tablename</span><br><span class="line">				GROUP BY column2 </span><br><span class="line">				having condition;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-69"><a href="#注意事项和细节：-69" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>group by用于对查询的结果分组统计</li>
<li>having子句用于限制分组显示结果</li>
</ol>
</li>
<li><h4 id="limit："><a href="#limit：" class="headerlink" title="limit："></a>limit：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">				FROM tablename</span><br><span class="line">				LIMIT star , row;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-3-5-Select增强查询"><a href="#19-3-5-Select增强查询" class="headerlink" title="19.3.5 Select增强查询"></a>19.3.5 Select增强查询</h3><ul>
<li><h4 id="增强查询："><a href="#增强查询：" class="headerlink" title="增强查询："></a>增强查询：</h4><ul>
<li>WHERE</li>
</ul>
</li>
<li><h4 id="模糊查询："><a href="#模糊查询：" class="headerlink" title="模糊查询："></a>模糊查询：</h4><ul>
<li>LIKE</li>
</ul>
</li>
<li><h4 id="排序查询："><a href="#排序查询：" class="headerlink" title="排序查询："></a>排序查询：</h4><ul>
<li>ORDER BY ASC&#x2F;DESC</li>
</ul>
</li>
<li><h4 id="分页查询："><a href="#分页查询：" class="headerlink" title="分页查询："></a>分页查询：</h4><ul>
<li>LIMIT star , row</li>
</ul>
</li>
</ul>
<h3 id="19-3-6-Select多表查询"><a href="#19-3-6-Select多表查询" class="headerlink" title="19.3.6 Select多表查询"></a>19.3.6 Select多表查询</h3><ul>
<li><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ename,sal,dname,emp.deptno</span><br><span class="line">				FROM emp, dept</span><br><span class="line">				WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="自连接："><a href="#自连接：" class="headerlink" title="自连接："></a>自连接：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT worker.ename AS &#x27;职员名&#x27; , boss.ename AS &#x27;上级名&#x27; </span><br><span class="line">				FROM emp worker, emp boss</span><br><span class="line">				WHERE worker.mgr = boss.empno;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="多行子查询："><a href="#多行子查询：" class="headerlink" title="多行子查询："></a>多行子查询：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename, job, sal, deptno</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE job IN (</span><br><span class="line">        SELECT DISTINCT job</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE deptno = 10</span><br><span class="line">        ) AND deptno != 10;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-70"><a href="#注意事项和细节：-70" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>多行子查询指返回多行数据的子查询 使用关键字 in</li>
</ol>
</li>
<li><h4 id="多列子查询："><a href="#多列子查询：" class="headerlink" title="多列子查询："></a>多列子查询：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">				FROM emp</span><br><span class="line">				WHERE (deptno,job) = (</span><br><span class="line">          SELECT deptno,job</span><br><span class="line">          FROM emp</span><br><span class="line">          WHERE ename = &#x27;ALLEN&#x27;</span><br><span class="line">        ) AND ename != &#x27;ALLEN&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="表复制："><a href="#表复制：" class="headerlink" title="表复制："></a>表复制：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO my_table</span><br><span class="line">				SELECT * FROM my_table;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="结构复制："><a href="#结构复制：" class="headerlink" title="结构复制："></a>结构复制：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE my_table LIKE emp;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="返回表的所有列："><a href="#返回表的所有列：" class="headerlink" title="返回表的所有列："></a>返回表的所有列：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT tmp.* ,dname,loc</span><br><span class="line">				FROM dept,(</span><br><span class="line">          SELECT COUNT(*) AS per_num,deptno</span><br><span class="line">          FROM emp</span><br><span class="line">          GROUP BY deptno</span><br><span class="line">        )tmp</span><br><span class="line">        WHERE tmp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-4-函数⭐️"><a href="#19-4-函数⭐️" class="headerlink" title="19.4 函数⭐️"></a>19.4 函数⭐️</h2><ul>
<li><h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数:"></a>统计函数:</h4><ol>
<li>SUM &#x2F;&#x2F;合计</li>
<li>AVG &#x2F;&#x2F;平均</li>
<li>MAX&#x2F;MIN</li>
<li>COUNT &#x2F;&#x2F;统计 (null不计入)</li>
</ol>
</li>
<li><h4 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2015.16.55.jpg" alt="截屏2022-08-14 15.16.55"></p>
</li>
<li><h4 id="数学函数："><a href="#数学函数：" class="headerlink" title="数学函数："></a>数学函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2015.48.16.jpg" alt="截屏2022-08-14 15.48.16"></p>
</li>
<li><h4 id="时间函数："><a href="#时间函数：" class="headerlink" title="时间函数："></a>时间函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2016.05.37.jpg" alt="截屏2022-08-14 16.05.37"></p>
</li>
<li><h4 id="注意事项和细节：-71"><a href="#注意事项和细节：-71" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>DATE ADD0 中的 interval 后面可以是 year minute second day 等</li>
<li>DATE SUB0 中的 interval 后面可以是 jear minute second dav 等</li>
<li>DATEDIFF(date1.date2）得到的是天数，而且是date 1-date2 的天数，因此可以取负数这四个西数的日期类型可以是 date, datetime 或者 timestamp</li>
<li>使用int来保存一个unix时间个unix时间戳，然后使用 from unixtime()进行转换</li>
</ol>
</li>
<li><h4 id="加密和系统："><a href="#加密和系统：" class="headerlink" title="加密和系统："></a>加密和系统：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2017.22.35.jpg" alt="截屏2022-08-14 17.22.35"></p>
</li>
<li><h4 id="流程控制："><a href="#流程控制：" class="headerlink" title="流程控制："></a>流程控制：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-15%2014.20.30.jpg" alt="截屏2022-08-15 14.20.30"></p>
</li>
</ul>
<h2 id="19-5-内连接"><a href="#19-5-内连接" class="headerlink" title="19.5 内连接"></a>19.5 内连接</h2><ul>
<li><h4 id="基本介绍：-84"><a href="#基本介绍：-84" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>只返回两表相连相等的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ename,sal,dname,emp.deptno</span><br><span class="line">				FROM emp, dept</span><br><span class="line">				WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-6-外连接⭐️"><a href="#19-6-外连接⭐️" class="headerlink" title="19.6 外连接⭐️"></a>19.6 外连接⭐️</h2><ul>
<li><h4 id="左外连接："><a href="#左外连接：" class="headerlink" title="左外连接："></a>左外连接：</h4><p>左侧的表完全显示我们就说是左外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT `name`,stu.id,grade</span><br><span class="line">				FROM stu LEFT JOIN exam</span><br><span class="line">				ON stu.id = exam.id;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="右外连接："><a href="#右外连接：" class="headerlink" title="右外连接："></a>右外连接：</h4><p>右侧的表完全显示我们就说是右外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT `name`,stu.id,grade</span><br><span class="line">				FROM stu RIGHT JOIN exam</span><br><span class="line">				ON stu.id = exam.id;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-7-约束"><a href="#19-7-约束" class="headerlink" title="19.7 约束"></a>19.7 约束</h2><ul>
<li><h4 id="基本介绍：-85"><a href="#基本介绍：-85" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>约束用于确保数据库的数据满足特定的商业规则</p>
<p>约束包括：not null 、unique、primary key、foreign key、check</p>
</li>
</ul>
<h3 id="19-7-1-primary-key"><a href="#19-7-1-primary-key" class="headerlink" title="19.7.1 primary key"></a>19.7.1 primary key</h3><ul>
<li><h4 id="基本介绍：-86"><a href="#基本介绍：-86" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于唯一的标示表行的数据，当定义主键约束后，该列不能重复</p>
</li>
<li><h4 id="基本语法：-23"><a href="#基本语法：-23" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">				(id INT PRIMARY KEY,</span><br><span class="line">        `name` VARCHAR(32));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">				(id INT,</span><br><span class="line">        `name` VARCHAR(32)</span><br><span class="line">        PRIMARY KEY(id,`name`)); //复合主键</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-72"><a href="#注意事项和细节：-72" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>primary key不能重复而且<strong>不能为null</strong></li>
<li>一张表最多只能有一个主键，但可以是复合主键</li>
<li>主键的指定方式有两种：<br>直接在字段名后指定：字段名 primakry key<br>在表定义最后写： primary key(列名)</li>
<li>使用desc 表名，可以看到primary key的情况</li>
</ol>
</li>
</ul>
<h3 id="19-7-2-not-null"><a href="#19-7-2-not-null" class="headerlink" title="19.7.2 not null"></a>19.7.2 not null</h3><ul>
<li><h4 id="基本介绍：-87"><a href="#基本介绍：-87" class="headerlink" title="基本介绍："></a>基本介绍：</h4>如果在列上定义了not null,那么当插入数据时，必须为列提供数据</li>
</ul>
<h3 id="19-7-3-unique"><a href="#19-7-3-unique" class="headerlink" title="19.7.3 unique"></a>19.7.3 unique</h3><ul>
<li><h4 id="基本介绍：-88"><a href="#基本介绍：-88" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>如果在列上定义了not null,那么当插入数据时，必须为列提供数据</p>
</li>
<li><h4 id="注意事项和细节：-73"><a href="#注意事项和细节：-73" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>如果没有指定not null ，则 unique 字段可以有多个null</li>
<li>一张表可以有多个unique字段</li>
</ol>
</li>
</ul>
<h3 id="19-7-3-foreign-key"><a href="#19-7-3-foreign-key" class="headerlink" title="19.7.3 foreign key"></a>19.7.3 foreign key</h3><ul>
<li><h4 id="基本介绍：-89"><a href="#基本介绍：-89" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于定义主表和从表之间的关系：外键约束要定义在从表上，主表则必须具有主键约束或是unique约束，当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为null</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-16%2015.38.13.jpg" alt="截屏2022-08-16 15.38.13"></p>
</li>
<li><h4 id="基本语法：-24"><a href="#基本语法：-24" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">				(id INT ,</span><br><span class="line">        `name` VARCHAR(32))</span><br><span class="line">				FOREIGN KEY (本表字段) REFERENCES 主表名(主键或unique字段));</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-74"><a href="#注意事项和细节：-74" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>外键指向的表的字段，要求是primary key 或者是unique</li>
<li>表的类型是innodb，这样的表才支持外键</li>
<li>外键字段的类型要和主键字段的类型一致(长度可以不同)</li>
<li>外键宇段的值，必须在主键字段中出现过，或者为null 前提是外键字段允许为null</li>
<li>一旦建立主外键的关系，数据不能随意删除了</li>
</ol>
</li>
</ul>
<h3 id="19-7-4-check"><a href="#19-7-4-check" class="headerlink" title="19.7.4 check"></a>19.7.4 check</h3><ul>
<li><h4 id="基本介绍：-90"><a href="#基本介绍：-90" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于强制行数据必须满足的条件</p>
</li>
<li><h4 id="基本语法：-25"><a href="#基本语法：-25" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段 数据类型 CHECK (条件)</span><br><span class="line">sex VARCHAR(32) CHECK(sex IN(&#x27;man&#x27;,&#x27;woman&#x27;))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-8-自增长"><a href="#19-8-自增长" class="headerlink" title="19.8 自增长"></a>19.8 自增长</h2><ul>
<li><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>整数列添加记录时进行自我增长</p>
</li>
<li><h4 id="基本语法：-26"><a href="#基本语法：-26" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE `uesr` AUTO_INCREMENT = 100;</span><br><span class="line">CREATE TABLE `user` ( </span><br><span class="line">  `id` INT NOT NULL AUTO_INCREMENT);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="添加方式："><a href="#添加方式：" class="headerlink" title="添加方式："></a>添加方式：</h4><ul>
<li>insert into xxx (字段1，字段2..…）values(null，’值’…);</li>
<li>insert into xxx (字段2…）values(‘值1’，’值2’…);</li>
<li>insert into xxx values(null,’值1’，…)</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-75"><a href="#注意事项和细节：-75" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>一般来说自增长是和primary key 配合使用的</li>
<li>自增长也可以单独使用[但是需要配合一个unique</li>
<li>自增长修饰的字段为整数型(也可以为小数)</li>
<li>自增长默认从 1开始，你也可以通过如下命令修改alter<br>table 表名 auto increment&#x3D;新的开始值</li>
<li>如果你添加数据时，给自增长字段(列） 指定的有值，则以指定的值为准</li>
</ol>
</li>
</ul>
<h2 id="19-9-索引⭐️"><a href="#19-9-索引⭐️" class="headerlink" title="19.9 索引⭐️"></a>19.9 索引⭐️</h2><ul>
<li><h4 id="查询索引："><a href="#查询索引：" class="headerlink" title="查询索引："></a>查询索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW KEYS FROM 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEXES FROM 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-9-1-主键索引"><a href="#19-9-1-主键索引" class="headerlink" title="19.9.1 主键索引"></a>19.9.1 主键索引</h3><ul>
<li><h4 id="创建索引："><a href="#创建索引：" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">				(id INT PRIMARY KEY);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD PRIMARY KEY(字段);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="删除索引："><a href="#删除索引：" class="headerlink" title="删除索引："></a>删除索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-9-2-唯一索引"><a href="#19-9-2-唯一索引" class="headerlink" title="19.9.2 唯一索引"></a>19.9.2 唯一索引</h3><ul>
<li><h4 id="创建索引：-1"><a href="#创建索引：-1" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX 索引名 ON 表名(字段);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-9-3-普通索引"><a href="#19-9-3-普通索引" class="headerlink" title="19.9.3 普通索引"></a>19.9.3 普通索引</h3><ul>
<li><h4 id="创建索引：-2"><a href="#创建索引：-2" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX 索引名 ON 表名(字段);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD INDEX 索引名(字段);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="删除索引：-1"><a href="#删除索引：-1" class="headerlink" title="删除索引："></a>删除索引：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX 索引名 ON 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-9-4-全文索引"><a href="#19-9-4-全文索引" class="headerlink" title="19.9.4 全文索引"></a>19.9.4 全文索引</h3><h3 id="19-9-5-总结"><a href="#19-9-5-总结" class="headerlink" title="19.9.5 总结"></a>19.9.5 总结</h3><ul>
<li><h4 id="注意事项和细节：-76"><a href="#注意事项和细节：-76" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>较频繁的作为查询条件字段应该创建索引</li>
<li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</li>
<li>更新非常频繁的字段不适合创建索引</li>
<li>不会出现在WHERE子句中字段不该创建索引</li>
</ol>
</li>
</ul>
<h2 id="19-10-事物"><a href="#19-10-事物" class="headerlink" title="19.10 事物"></a>19.10 事物</h2><h3 id="19-10-1-事物"><a href="#19-10-1-事物" class="headerlink" title="19.10.1 事物"></a>19.10.1 事物</h3><ul>
<li><h4 id="基本介绍：-91"><a href="#基本介绍：-91" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>事务用于保证数据的一致性,它由一组相关的dml语句组成,该组的dml语句要么全部成功，要么全部失败</p>
</li>
<li><h4 id="事物和锁："><a href="#事物和锁：" class="headerlink" title="事物和锁："></a>事物和锁：</h4><p>当执行事务操作时(dml语句)，mysql会在表上加锁,防止其它用户改表的数据</p>
</li>
<li><h4 id="回退事物："><a href="#回退事物：" class="headerlink" title="回退事物："></a>回退事物：</h4><p>保存点是事务中的点 用于取消部分事务，当结束事务时 (commit），会自动的删除该事务所定义的所有保存意，当执行回退事务时，通过指定保存点可以回退到指定的点</p>
</li>
<li><h4 id="提交事物："><a href="#提交事物：" class="headerlink" title="提交事物："></a>提交事物：</h4><p>使用commit语句可以提交事务.当执行了commit语句子后,会确认事务的变化、结束事务、删除保存点、 释放锁，数据生效。当使用commit语句结束事务子后，其它会话将可以查看到事务变化后的新数据</p>
</li>
<li><h4 id="事物操作："><a href="#事物操作：" class="headerlink" title="事物操作："></a>事物操作：</h4><ul>
<li>start transaction — 开始一个事务</li>
<li>savepoint 保存点名 一 设置保存点</li>
<li>rollback to 保存点名一 回退事务到保存点</li>
<li>rollback — 回退全部事务</li>
<li>commit — 提交事务，所有的操作生效，不能回退</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-77"><a href="#注意事项和细节：-77" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>如果不开始事务，默认情况下，dml操作是自动提交的，不能回滚</li>
<li>如果开始一个事务，你没有创建保存点． 你可以执行rollback，默认就是回退到<br>你事务开始的状态</li>
<li>你也可以在这个事务中(还没有提交时)，创建多个保存点•比如：savepoint<br>aaa;执行 dml , savepoint bbb;</li>
<li>回退到更早的保存点则无法会退更晚的保存点</li>
<li>mysql的事务机制需要innodb的存储引擎还可以使用，myisam不好使</li>
<li>开始一个事务 start transaction，set autocommit&#x3D;off:</li>
</ol>
</li>
</ul>
<h3 id="19-10-2-事物隔离"><a href="#19-10-2-事物隔离" class="headerlink" title="19.10.2 事物隔离"></a>19.10.2 事物隔离</h3><ul>
<li><h4 id="基本介绍：-92"><a href="#基本介绍：-92" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的淮确性</p>
</li>
<li><h4 id="事物隔离级别："><a href="#事物隔离级别：" class="headerlink" title="事物隔离级别："></a>事物隔离级别：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2015.12.42.jpg" alt="截屏2022-08-17 15.12.42"></p>
</li>
<li><h4 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h4><p>当一个事务读取另一个事务尚<strong>未提交</strong>的修改时，产生脏读</p>
</li>
<li><h4 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h4><p>同一查询在同一事务中多次进行，由于其他<strong>提交</strong>事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读</p>
</li>
<li><h4 id="幻读："><a href="#幻读：" class="headerlink" title="幻读："></a>幻读：</h4><p>同一查询在同一事务中多次进行，由于其他<strong>提交</strong>事务所做的插入操作，每次返回不同的结果集，此时发生幻读</p>
</li>
<li><h4 id="可串行化："><a href="#可串行化：" class="headerlink" title="可串行化："></a>可串行化：</h4><p>只有当其他事物提交改动时，返回不同结果集，且只允许一个事物进行操作</p>
</li>
<li><h4 id="隔离操作指令："><a href="#隔离操作指令：" class="headerlink" title="隔离操作指令："></a>隔离操作指令：</h4><ul>
<li>查看当前会话隔离级别——select @@tx isolation;</li>
<li>查看系统当前隔离级别——select @@global.tx isolation;</li>
<li>设置当前会话隔离级别——set session transaction isolation level repeatable read;</li>
<li>设置系统当前隔离级别——set global transaction isolation level repeatable read;</li>
<li>mysql 默认的事务隔离级别是repeatable read</li>
</ul>
</li>
<li><h4 id="事物特性："><a href="#事物特性：" class="headerlink" title="事物特性："></a>事物特性：</h4><ol>
<li>原子性 (Atomicity)原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li>
<li>一致性 (Consistency)事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li>
<li>隔离性 (Isolation)事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离</li>
<li>持久性 (Durability)持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来郎使数据库发生故障也不应该对其有任何影响</li>
</ol>
</li>
</ul>
<h2 id="19-11-表类型和存储引擎"><a href="#19-11-表类型和存储引擎" class="headerlink" title="19.11 表类型和存储引擎"></a>19.11 表类型和存储引擎</h2><ul>
<li><h4 id="基本介绍：-93"><a href="#基本介绍：-93" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>MySQL表类型由存储引擎(Storage Engines)决定，主要包括MyISAM,innoDB、Memory等</p>
</li>
<li><p>MysQL 数据表主要支持六种类型，<br>分别是：CSV、 Memory、ARCHIVE、MRG MYISAM、 MYISAM、InnoBDB</p>
</li>
<li><p>分为两类，一类是“事务安全型”(transaction-safe)， 比如：InnoDB；其余都是“非事物安全型”(non-transactionsafe)[mysiam] 和 memory]</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2016.10.56.jpg" alt="截屏2022-08-17 16.10.56"></p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-78"><a href="#注意事项和细节：-78" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>MyLSAM不支持事物，也不支持外键，访问速度快，对事物完整性没有要求</li>
<li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引</li>
<li>MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应一个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在</li>
</ol>
</li>
<li><h4 id="引擎选择："><a href="#引擎选择：" class="headerlink" title="引擎选择："></a>引擎选择：</h4><ol>
<li>如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MyISAM是不二选择，速度快</li>
<li>如果需要支持事务，选择InnoDB</li>
<li>Memory 存储引擎就是将数据存储在内存中，由于没有磁盘1&#x2F;0的等待，速度极快，但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失</li>
</ol>
</li>
<li><h4 id="修改存储引擎："><a href="#修改存储引擎：" class="headerlink" title="修改存储引擎："></a>修改存储引擎：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE `表名` ENGINE = 存储引擎;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-12-视图"><a href="#19-12-视图" class="headerlink" title="19.12 视图"></a>19.12 视图</h2><ul>
<li><h4 id="基本介绍：-94"><a href="#基本介绍：-94" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>视图是一个虛拟表，其内容由查询定义。同真实的表一样，视图包含列，其数据来自对应的真实表(基表）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2016.35.47.jpg" alt="截屏2022-08-17 16.35.47"></p>
</li>
<li><h4 id="视图操作："><a href="#视图操作：" class="headerlink" title="视图操作："></a>视图操作：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW 视图名 AS SELECT 语句</span><br><span class="line">ALTER VIEW 视图名 AS SELECT 语句</span><br><span class="line">SHOW CREATE VIEW 视图名</span><br><span class="line">DROP VIEW 视图名1,视图名2</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注意事项和细节：-79"><a href="#注意事项和细节：-79" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>创建视图后，到数据库去看，对应视图只有一个视图结构文件(形式：视图名.frm)</li>
<li>视图的数据变化会影响到基表，基表的数据变化也会影响到视圈[insert update delete]</li>
<li>视图中可以再使用视图，数据仍然来自基表</li>
</ol>
</li>
<li><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ol>
<li>安全：一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。这时就可以创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询自己需要的字段，不能查看保密的字段</li>
<li>性能：关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时，数据库查询通常会用到连接 (JOIN)。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用JOIN查询数据</li>
<li>灵活：如果系统中有一张1日的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样就可以少做很多改动，也达到了升级数据表的目的</li>
</ol>
</li>
<li><h4 id="多基表视图："><a href="#多基表视图：" class="headerlink" title="多基表视图："></a>多基表视图：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW emp_view02 AS</span><br><span class="line">SELECT empno,ename,dname,grade</span><br><span class="line">				FROM emp,dept,salgrade </span><br><span class="line">				WHERE emp.deptno = dept.deptno </span><br><span class="line">				AND (sal BETWEEN losal AND hisal);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-13-用户管理"><a href="#19-13-用户管理" class="headerlink" title="19.13 用户管理"></a>19.13 用户管理</h2><ul>
<li><h4 id="管理指令："><a href="#管理指令：" class="headerlink" title="管理指令："></a>管理指令：</h4><ul>
<li>创建用户：create user ‘用户名’ @ ‘允许登录位置’ identified by 密码</li>
<li>删除用户：drop user ‘用户名’ @ ‘允许登录位置’</li>
<li>修改密码：SET PASSWORD FOR  ‘用户名’ @ ‘允许登陆位置’ &#x3D; PASSWORD(‘123456’)</li>
</ul>
</li>
<li><h4 id="授权："><a href="#授权：" class="headerlink" title="授权："></a>授权：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.37.57.jpg" alt="截屏2022-08-17 19.37.57"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.41.20.jpg" alt="截屏2022-08-17 19.41.20"></p>
</li>
<li><h4 id="权限管理："><a href="#权限管理：" class="headerlink" title="权限管理："></a>权限管理：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.36.52.jpg" alt="截屏2022-08-17 19.36.52"></p>
</li>
<li><h4 id="注意事项和细节：-80"><a href="#注意事项和细节：-80" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>在创建用户的时候，如果不指定Host，则为%，%表示表示所有1P都有连接权限create user xxx;</li>
<li>create user ‘xoxx‘@’192.168.1.%’ 表示 xxx用户在 192.168.1.*的ip可以登<br>录mysq</li>
<li>在删除用户的时候，如果 host 不是 %，需要明确指定“用户’@’host值‘</li>
</ol>
</li>
</ul>
<h1 id="20-JDBC和连接池"><a href="#20-JDBC和连接池" class="headerlink" title="20 JDBC和连接池"></a>20 JDBC和连接池</h1><ul>
<li><h4 id="基本介绍：-95"><a href="#基本介绍：-95" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>是Java提供一套用于数据库操作的接口API，Java程序员只需要面向这套接口编程。不同的数据库厂商，针对接口提供品供不同实现</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-19%2016.27.42.jpg" alt="截屏2022-08-19 16.27.42"></p>
</li>
<li><h4 id="连接方式："><a href="#连接方式：" class="headerlink" title="连接方式："></a>连接方式：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConn</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>(); <span class="comment">//创建driver对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载Driver类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式2=&quot;</span> + connect);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3 使用DriverManager 替代 driver 进行统一管理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射加载Driver</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">        DriverManager.registerDriver(driver);<span class="comment">//注册Driver驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式4: 使用Class.forName 自动完成注册驱动，简化代码</span></span><br><span class="line">    <span class="comment">//这种方式获取连接是使用的最多，推荐使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载了 Driver类</span></span><br><span class="line">        <span class="comment">//在加载 Driver类时，完成注册</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            源码: 1. 静态代码块，在类加载时，会执行一次.</span></span><br><span class="line"><span class="comment">            2. DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">            3. 因此注册driver的工作已经完成</span></span><br><span class="line"><span class="comment">            static &#123;</span></span><br><span class="line"><span class="comment">                try &#123;</span></span><br><span class="line"><span class="comment">                    DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">                &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                    throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第4种方式~ &quot;</span> + connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式5 , 在方式4的基础上改进，增加配置文件，让连接mysql更加灵活</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方式5 &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-1-JDBC-API⭐️"><a href="#20-1-JDBC-API⭐️" class="headerlink" title="20.1 JDBC API⭐️"></a>20.1 JDBC API⭐️</h2><h3 id="20-1-1-ResultSet"><a href="#20-1-1-ResultSet" class="headerlink" title="20.1.1 ResultSet"></a>20.1.1 ResultSet</h3><ul>
<li><h4 id="基本介绍：-96"><a href="#基本介绍：-96" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li><p>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成</p>
</li>
<li><p>Resultset对象保特一个光标指向基当前的数据行，最初的光标位于第一行之前</p>
</li>
<li><p>next方法将光标移动到下一行，并且由于在ResultSet对象中没有更多行时返回<br>false，因此可以在while循环中使用循环来遍历结果集</p>
</li>
</ol>
</li>
<li><h4 id="底层：-1"><a href="#底层：-1" class="headerlink" title="底层："></a>底层：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-19%2019.52.31.jpg" alt="截屏2022-08-19 19.52.31"></p>
</li>
<li><h4 id="例：-15"><a href="#例：-15" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//4. 组织SqL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name , sex, borndate from actor&quot;</span>;</span><br><span class="line">        <span class="comment">//执行给定的SQL语句，该语句返回单个 ResultSet对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+</span></span><br><span class="line"><span class="comment">        | id | name      | sex | borndate            |</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+-------+</span></span><br><span class="line"><span class="comment">        |  4 | 刘德华     | 男  | 1970-12-12 00:00:00 |</span></span><br><span class="line"><span class="comment">        |  5 | jack      | 男  | 1990-11-11 00:00:00 |</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+-------+</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            老韩阅读debug 代码 resultSet 对象的结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 使用while取出数据</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123; <span class="comment">// 让光标向后移动，如果没有更多行，则返回false</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>); <span class="comment">//获取该行的第1列</span></span><br><span class="line">            <span class="comment">//int id1 = resultSet.getInt(&quot;id&quot;); 通过列名来获取值, 推荐</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);<span class="comment">//获取该行的第2列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> resultSet.getDate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + date);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="20-1-2-Statement"><a href="#20-1-2-Statement" class="headerlink" title="20.1.2 Statement"></a>20.1.2 Statement</h3><ul>
<li><h4 id="基本介绍：-97"><a href="#基本介绍：-97" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li>Statement对象 用于执行静态SQL语句并返回其生成的结果的对象</li>
<li>在连接建立后，需要对数据库进行访问，执行 命名或是SQL语</li>
<li>Statement对象执行SQL 语句，存在SQL注入风险</li>
</ol>
</li>
<li><h4 id="例：-16"><a href="#例：-16" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Statement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. 组织SqL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd  from admin where name =&#x27;&quot;</span></span><br><span class="line">                + admin_name + <span class="string">&quot;&#x27; and pwd = &#x27;&quot;</span> + admin_pwd + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="20-1-3-PrepareStatement"><a href="#20-1-3-PrepareStatement" class="headerlink" title="20.1.3 PrepareStatement"></a>20.1.3 PrepareStatement</h3><ul>
<li><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍:"></a>基本介绍:</h4><ol>
<li>PreparedStatement 执行的 SQL 语句中的参数用问号(?)来表示，调用Preparedstatement 对象的 setxxx()方法来设置这些参数.setxxx()方法有两个参数，第一个参数是要设置的SQL 语句中的参数的索引（从 1 开始），第二个是设置的 SOL 语句中的参数的值</li>
<li>调用 executeQuery()，返回 ResultSet 对象</li>
<li>调用 executeUpdate()，执行更新，包括增、删、修改</li>
</ol>
</li>
<li><h4 id="DML："><a href="#DML：" class="headerlink" title="DML："></a>DML：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementDML_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看 PreparedStatement类图</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输删除管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;请输入管理员的新密码: &quot;);</span></span><br><span class="line"><span class="comment">//        String admin_pwd = scanner.nextLine();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="comment">//添加记录</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into admin values(?, ?)&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update admin set pwd = ? where name = ?&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from  admin where name = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//preparedStatement.setString(2, admin_name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行 dml 语句使用  executeUpdate</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行失败&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看 PreparedStatement类图</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd  from admin where name =? and pwd = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行 select 语句使用  executeQuery</span></span><br><span class="line">        <span class="comment">//   如果执行的是 dml(update, insert ,delete) executeUpdate()</span></span><br><span class="line">        <span class="comment">//   这里执行 executeQuery ,不要在写 sql</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-2-JDBCUtils"><a href="#20-2-JDBCUtils" class="headerlink" title="20.2 JDBCUtils"></a>20.2 JDBCUtils</h2><ul>
<li><h4 id="基本介绍：-98"><a href="#基本介绍：-98" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>可以将其封装JDBC连接的工具类JDBCUtils</p>
</li>
<li><h4 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="comment">//定义相关的属性(4个), 因为只需要一份，因此，我们做出static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url; <span class="comment">//url</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver; <span class="comment">//驱动名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在static代码块去初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//读取相关的属性值</span></span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//在实际开发中，我们可以这样处理</span></span><br><span class="line">            <span class="comment">//1. 将编译异常转成 运行异常</span></span><br><span class="line">            <span class="comment">//2. 调用者，可以选择捕获该异常，也可以选择默认处理该异常，比较方便.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接数据库, 返回Connection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//1. 将编译异常转成 运行异常</span></span><br><span class="line">            <span class="comment">//2. 调用者，可以选择捕获该异常，也可以选择默认处理该异常，比较方便.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭相关资源</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. ResultSet 结果集</span></span><br><span class="line"><span class="comment">        2. Statement 或者 PreparedStatement</span></span><br><span class="line"><span class="comment">        3. Connection</span></span><br><span class="line"><span class="comment">        4. 如果需要关闭资源，就传入对象，否则传入 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为null</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="literal">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//将编译异常转成运行异常抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="例：-17"><a href="#例：-17" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils_Use</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            System.out.println(connection.getClass()); <span class="comment">//com.mysql.jdbc.JDBC4Connection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">5</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + borndate + <span class="string">&quot;\t&quot;</span> + phone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> &#123;<span class="comment">//insert , update, delete</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 测试 delete 和 insert ,自己玩.</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-3-事务⭐️"><a href="#20-3-事务⭐️" class="headerlink" title="20.3 事务⭐️"></a>20.3 事务⭐️</h2><ul>
<li><h4 id="基本介绍：-99"><a href="#基本介绍：-99" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li>JDBC程序中当一个Connection对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚</li>
<li>JDBC程序中为了让多个 SOL 语句作为一个整体执行，需要使用事务</li>
<li>调用 Connection 的 setAutoCommit(false） 可以取消自动提交事务</li>
<li>在所有的 SQL 语句都成功执行后，调用 commit()：方法提交事务</li>
<li>在其中某个操作失败或出现异常时，调用 rollback()：方法回滚事务</li>
</ol>
</li>
<li><h4 id="例：-18"><a href="#例：-18" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作转账的业务</span></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection(); <span class="comment">// 在默认情况下，connection是默认自动提交</span></span><br><span class="line">            <span class="comment">//将 connection 设置为不自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">//开启了事务</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate(); <span class="comment">// 执行第1条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//抛出异常</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate(); <span class="comment">// 执行第3条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//这里我们可以进行回滚，即撤销执行的SQL</span></span><br><span class="line">            <span class="comment">//默认回滚到事务开始的状态.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;执行发生了异常，撤销执行的sql&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-4-批处理"><a href="#20-4-批处理" class="headerlink" title="20.4 批处理"></a>20.4 批处理</h2><ul>
<li><h4 id="基本介绍：-100"><a href="#基本介绍：-100" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理</li>
<li>JDBC的批量处理语句包括下面方法：<br>addBatch()：添加需要批量处理的SQL语句或参数<br>executeBatch()：执行批量处理语句；<br>clearBatch()：清空批处理包的语句</li>
<li>JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数  ?rewrite BatchedStatements&#x3D;true</li>
<li>批处理往往和PreparedStatement一起搭配使用，可以既减少编译次数，又減少运行次数，效率大大提高</li>
</ol>
</li>
<li><h4 id="底层：-2"><a href="#底层：-2" class="headerlink" title="底层："></a>底层：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-20%2016.58.02.jpg" alt="截屏2022-08-20 16.58.02"></p>
</li>
<li><h4 id="例：-19"><a href="#例：-19" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用批量方式添加数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;<span class="comment">//5000执行</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            <span class="comment">//将sql 语句加入到批处理包中 -&gt; 看源码</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1. //第一就创建 ArrayList - elementData =&gt; Object[]</span></span><br><span class="line"><span class="comment">            //2. elementData =&gt; Object[] 就会存放我们预处理的sql语句</span></span><br><span class="line"><span class="comment">            //3. 当elementData满后,就按照1.5扩容</span></span><br><span class="line"><span class="comment">            //4. 当添加到指定的值后，就executeBatch</span></span><br><span class="line"><span class="comment">            //5. 批量处理会减少我们发送sql语句的网络开销，而且减少编译次数，因此效率提高</span></span><br><span class="line"><span class="comment">            public void addBatch() throws SQLException &#123;</span></span><br><span class="line"><span class="comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span></span><br><span class="line"><span class="comment">                    if (this.batchedArgs == null) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        this.batchedArgs = new ArrayList();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span></span><br><span class="line"><span class="comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    this.batchedArgs.add(new PreparedStatement.BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">            <span class="comment">//当有1000条记录时，在批量执行</span></span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123;<span class="comment">//满1000条sql</span></span><br><span class="line">                preparedStatement.executeBatch();</span><br><span class="line">                <span class="comment">//清空一把</span></span><br><span class="line">                preparedStatement.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;批量方式 耗时=&quot;</span> + (end - start));<span class="comment">//批量方式 耗时=108</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-5-连接池"><a href="#20-5-连接池" class="headerlink" title="20.5 连接池"></a>20.5 连接池</h2><ul>
<li><h4 id="基本介绍：-101"><a href="#基本介绍：-101" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li><p>传统的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，<br>再验证!P地址，用户名和密码(0.05s~1s时间）。需要数据库连接的时候，就向数据库要求一个，频繁地进行数据库连接操作将占用过多系统资源，容易造成服务器崩溃</p>
</li>
<li><p>传统数据库连接，每一次数据库连接使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄漏，最终将导致重启数据库</p>
</li>
<li><p>传统获取连接的方式，不能控制创建的连接数量，如连接过多，也可能导致内存泄漏，MySQL崩溃</p>
</li>
<li><p>解解決传统开发中的数据库连接问题，可以采用数据库连接池技术</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-20%2019.44.02.jpg" alt="截屏2022-08-20 19.44.02"></p>
</li>
</ol>
</li>
<li><h4 id="连接池种类："><a href="#连接池种类：" class="headerlink" title="连接池种类："></a>连接池种类：</h4><ol>
<li>JDBC 的数据库连按池使用 javax.sql.DataSource 来表示，DataSource只是一个接口，该接口通常由第三方提供实现</li>
<li>C3PO数据库连接池，速度相对较慢，稳定性不错 (hibernate, spring)</li>
<li>DBCP数据库连接池，速度相对c3p0较快，但不稳定</li>
<li>Proxoo 数据库连接池，有监控连接池状态的功能，稳定性较c3po差一点</li>
<li>BoneCP 数据库连接池，速度快</li>
<li>Druid(德鲁伊)是阿里提供的数据库连接池，集DBCP、C3P0、Proxool优点于一身的数据库连接池</li>
</ol>
</li>
<li><h4 id="C3PO"><a href="#C3PO" class="headerlink" title="C3PO:"></a>C3PO:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1： 相关参数，在程序中指定user, url , password等</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建一个数据源对象</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        <span class="comment">//2. 通过配置文件mysql.properties 获取相关连接的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//读取相关的属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给数据源 comboPooledDataSource 设置相关的参数</span></span><br><span class="line">        <span class="comment">//注意：连接管理是由 comboPooledDataSource 来管理</span></span><br><span class="line">        comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">        comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">        comboPooledDataSource.setUser(user);</span><br><span class="line">        comboPooledDataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始化连接数</span></span><br><span class="line">        comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大连接数</span></span><br><span class="line">        comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//测试连接池的效率, 测试对mysql 5000次操作</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection(); <span class="comment">//这个方法就是从 DataSource 接口实现的</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接OK&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//c3p0 5000连接mysql 耗时=391</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 5000连接mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式 使用配置文件模板来完成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将c3p0 提供的 c3p0.config.xml 拷贝到 src目录下</span></span><br><span class="line">    <span class="comment">//2. 该文件指定了连接数据库和连接池的相关参数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;hsp_edu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试5000次连接mysql</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接OK~&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//c3p0的第二种方式 耗时=413</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0的第二种方式(500000) 耗时=&quot;</span> + (end - start));<span class="comment">//1917</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Druid："><a href="#Druid：" class="headerlink" title="Druid："></a>Druid：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Druid_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 加入 Druid jar包</span></span><br><span class="line">        <span class="comment">//2. 加入 配置文件 druid.properties , 将该文件拷贝项目的src目录</span></span><br><span class="line">        <span class="comment">//3. 创建Properties对象, 读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建一个指定参数的数据库连接池, Druid连接池</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span></span><br><span class="line">                DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接成功!&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//druid连接池 操作5000 耗时=412</span></span><br><span class="line">        System.out.println(<span class="string">&quot;druid连接池 操作500000 耗时=&quot;</span> + (end - start));<span class="comment">//539</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在静态代码块完成 ds初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写getConnection方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接, 老师再次强调： 在数据库连接池技术中，close 不是真的断掉连接</span></span><br><span class="line">    <span class="comment">//而是把使用的Connection对象放回连接池</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid_USE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 druid方式完成&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());<span class="comment">//运行类型 com.alibaba.druid.pool.DruidPooledConnection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//getName()</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);<span class="comment">//getSex()</span></span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + borndate + <span class="string">&quot;\t&quot;</span> + phone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtilsByDruid.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-6-Apache—DBUtils"><a href="#20-6-Apache—DBUtils" class="headerlink" title="20.6 Apache—DBUtils"></a>20.6 Apache—DBUtils</h2><ul>
<li><h4 id="基本介绍：-102"><a href="#基本介绍：-102" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的封装，<br>使用dbutils能极大简化jdbc编码的工作量</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-21%2019.39.49.jpg" alt="截屏2022-08-21 19.39.49"></p>
</li>
</ol>
</li>
<li><h4 id="DbUtils："><a href="#DbUtils：" class="headerlink" title="DbUtils："></a>DbUtils：</h4><ol>
<li>QueryRunner类：该类封装了SQL的执行，是线程安全的，可以实现增、删、改、查、批处理</li>
<li>使用QueryRunner类实现查询</li>
<li>ResultSetHandler接口：该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式</li>
</ol>
</li>
<li><h4 id="DbUtils-API："><a href="#DbUtils-API：" class="headerlink" title="DbUtils API："></a>DbUtils API：</h4><ul>
<li>ArrayHandler：把结果集中的第一行数据转成对象数组</li>
<li>ArrayListHandler：把结果集中的每—行数据都转成一个数组，再存放到List中</li>
<li>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中</li>
<li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的Java Bean实例中，存放到List中</li>
<li>ColumnListHandler：将结果集中某一列的数据存放到List中</li>
<li>ScalarHandle：将结果集中的单行单列的数据存放到List中</li>
<li>KeyedHandler (name)：将结果集中的每行数据都封装到Map里，再把这些map再存到一个map里，其key为指定的key</li>
<li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对</li>
</ul>
</li>
<li><h4 id="土方法："><a href="#土方法：" class="headerlink" title="土方法："></a>土方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用老师的土方法来解决ResultSet =封装=&gt; Arraylist</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Actor&gt; <span class="title function_">testSelectToArrayList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 druid方式完成&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        ArrayList&lt;Actor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建ArrayList对象,存放actor对象</span></span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());<span class="comment">//运行类型 com.alibaba.druid.pool.DruidPooledConnection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//getName()</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);<span class="comment">//getSex()</span></span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                <span class="comment">//把得到的resultset 的记录，封装到 Actor对象，放入到list集合</span></span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">Actor</span>(id, name, sex, borndate, phone));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;list集合数据=&quot;</span> + list);</span><br><span class="line">            <span class="keyword">for</span>(Actor actor : list) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span> + actor.getId() + <span class="string">&quot;\t&quot;</span> + actor.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtilsByDruid.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为ArrayList 和 connection 没有任何关联，所以该集合可以复用.</span></span><br><span class="line">        <span class="keyword">return</span>  list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="例：-20"><a href="#例：-20" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils_USE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用apache-DBUtils 工具类 + druid 完成对表的crud操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryMany</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123; <span class="comment">//返回结果是多行的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回ArrayList 结果集</span></span><br><span class="line">        <span class="comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span></span><br><span class="line">        <span class="comment">//   注意: sql 语句也可以查询部分列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 老韩解读</span></span><br><span class="line">        <span class="comment">//(1) query 方法就是执行sql 语句，得到resultset ---封装到 --&gt; ArrayList 集合中</span></span><br><span class="line">        <span class="comment">//(2) 返回集合</span></span><br><span class="line">        <span class="comment">//(3) connection: 连接</span></span><br><span class="line">        <span class="comment">//(4) sql : 执行的sql语句</span></span><br><span class="line">        <span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class): 在将resultset -&gt; Actor 对象 -&gt; 封装到 ArrayList</span></span><br><span class="line">        <span class="comment">//    底层使用反射机制 去获取Actor 类的属性，然后进行封装</span></span><br><span class="line">        <span class="comment">//(6) 1 就是给 sql 语句中的? 赋值，可以有多个值，因为是可变参数Object... params</span></span><br><span class="line">        <span class="comment">//(7) 底层得到的resultset ,会在query 关闭, 关闭PreparedStatment</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析 queryRunner.query方法:</span></span><br><span class="line"><span class="comment">         * public &lt;T&gt; T query(Connection conn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params) throws SQLException &#123;</span></span><br><span class="line"><span class="comment">         *         PreparedStatement stmt = null;//定义PreparedStatement</span></span><br><span class="line"><span class="comment">         *         ResultSet rs = null;//接收返回的 ResultSet</span></span><br><span class="line"><span class="comment">         *         Object result = null;//返回ArrayList</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *         try &#123;</span></span><br><span class="line"><span class="comment">         *             stmt = this.prepareStatement(conn, sql);//创建PreparedStatement</span></span><br><span class="line"><span class="comment">         *             this.fillStatement(stmt, params);//对sql 进行 ? 赋值</span></span><br><span class="line"><span class="comment">         *             rs = this.wrap(stmt.executeQuery());//执行sql,返回resultset</span></span><br><span class="line"><span class="comment">         *             result = rsh.handle(rs);//返回的resultset --&gt; arrayList[result] [使用到反射，对传入class对象处理]</span></span><br><span class="line"><span class="comment">         *         &#125; catch (SQLException var33) &#123;</span></span><br><span class="line"><span class="comment">         *             this.rethrow(var33, sql, params);</span></span><br><span class="line"><span class="comment">         *         &#125; finally &#123;</span></span><br><span class="line"><span class="comment">         *             try &#123;</span></span><br><span class="line"><span class="comment">         *                 this.close(rs);//关闭resultset</span></span><br><span class="line"><span class="comment">         *             &#125; finally &#123;</span></span><br><span class="line"><span class="comment">         *                 this.close((Statement)stmt);//关闭preparedstatement对象</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *         return result;</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Actor&gt; list =</span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出集合的信息&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">            System.out.print(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 返回的结果是单行记录(单个对象)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingle</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 老韩解读</span></span><br><span class="line">        <span class="comment">// 因为我们返回的单行记录&lt;---&gt;单个对象 , 使用的Hander 是 BeanHandler</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="number">10</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示apache-dbutils + druid 完成查询结果是单行单列-返回的就是object</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalar</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单行单列 , 返回的就是Object</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//老师解读： 因为返回的是一个对象, 使用的handler 就是 ScalarHandler</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), <span class="number">4</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示apache-dbutils + druid 完成 dml (update, insert ,delete)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 这里组织sql 完成 update, insert delete</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into actor values(null, ?, ?, ?, ?)&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//(1) 执行dml 操作是 queryRunner.update()</span></span><br><span class="line">        <span class="comment">//(2) 返回的值是受影响的行数 (affected: 受影响)</span></span><br><span class="line">        <span class="comment">//int affectedRow = queryRunner.update(connection, sql, &quot;林青霞&quot;, &quot;女&quot;, &quot;1966-10-10&quot;, &quot;116&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectedRow</span> <span class="operator">=</span> queryRunner.update(connection, sql, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(affectedRow &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响到表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-7-DAO—BasicDao"><a href="#20-7-DAO—BasicDao" class="headerlink" title="20.7 DAO—BasicDao"></a>20.7 DAO—BasicDao</h2><ul>
<li><h4 id="基本介绍：-103"><a href="#基本介绍：-103" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol>
<li><p>data access object效据访向对象</p>
</li>
<li><p>这样的通类，称为BasicDao，是专门和数据库交互的，即完成对数据库的crud操作</p>
</li>
<li><p>在 BaiscDao 的基础上，实现一张表 对应一个Dao，更好的完成功能，比如 Customer表<br>Customer.java类(javabean)—CustomerDao.java</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-21%2019.40.23.jpg" alt="截屏2022-08-21 19.40.23"></p>
</li>
</ol>
</li>
<li><h4 id="例：-21"><a href="#例：-21" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAO</span>&lt;T&gt; &#123; <span class="comment">//泛型指定具体类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开发通用的dml方法, 针对任意的表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> qr.update(connection, sql, parameters);</span><br><span class="line">            <span class="keyword">return</span>  update;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回多个对象(即查询的结果是多行), 针对任意表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql 语句，可以有 ?</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 传入一个类的Class对象 比如 Actor.class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameters 传入 ? 的具体的值，可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据Actor.class 返回对应的 ArrayList 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">queryMulti</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询单行结果 的通用方法</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">querySingle</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span>  qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询单行单列的方法,即返回单值的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryScalar</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span>  qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试ActorDAO 对actor表crud操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testActorDAO</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ActorDAO</span> <span class="variable">actorDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActorDAO</span>();</span><br><span class="line">        <span class="comment">//1. 查询</span></span><br><span class="line">        List&lt;Actor&gt; actors = actorDAO.queryMulti(<span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>, Actor.class, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===查询结果===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : actors) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 查询单行记录</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> actorDAO.querySingle(<span class="string">&quot;select * from actor where id = ?&quot;</span>, Actor.class, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====查询单行结果====&quot;</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 查询单行单列</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> actorDAO.queryScalar(<span class="string">&quot;select name from actor where id = ?&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====查询单行单列值===&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. dml操作  insert ,update, delete</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> actorDAO.update(<span class="string">&quot;insert into actor values(null, ?, ?, ?, ?)&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;2000-11-11&quot;</span>, <span class="string">&quot;999&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(update &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响表&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="21-正则表达式"><a href="#21-正则表达式" class="headerlink" title="21 正则表达式"></a>21 正则表达式</h1><ul>
<li><h4 id="基本介绍：-104"><a href="#基本介绍：-104" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用某种模式去匹配字符串的一个公式</p>
</li>
<li><h4 id="底层实现：⭐️"><a href="#底层实现：⭐️" class="headerlink" title="底层实现：⭐️"></a>底层实现：⭐️</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.01.00.jpg" alt="截屏2022-08-28 15.01.00"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着Java的应用开始普及9889 &quot;</span>;</span><br><span class="line">        <span class="comment">//目标：匹配所有四个数字</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. \\d 表示一个任意的数字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="comment">//说明：创建匹配器matcher， 按照 正则表达式的规则 去匹配 content字符串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.开始匹配</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * matcher.find() 完成的任务 （考虑分组）</span></span><br><span class="line"><span class="comment">         * 什么是分组，比如  (\d\d)(\d\d) ,正则表达式中有() 表示分组,第1个()表示第1组,第2个()表示第2组...</span></span><br><span class="line"><span class="comment">         * 1. 根据指定的规则 ,定位满足规则的子字符串(比如(19)(98))</span></span><br><span class="line"><span class="comment">         * 2. 找到后，将 子字符串的开始的索引记录到 matcher对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment">         *    2.1 groups[0] = 0 , 把该子字符串的结束的索引+1的值记录到 groups[1] = 4</span></span><br><span class="line"><span class="comment">         *    2.2 记录1组()匹配到的字符串 groups[2] = 0  groups[3] = 2</span></span><br><span class="line"><span class="comment">         *    2.3 记录2组()匹配到的字符串 groups[4] = 2  groups[5] = 4</span></span><br><span class="line"><span class="comment">         *    2.4.如果有更多的分组.....</span></span><br><span class="line"><span class="comment">         * 3. 同时记录oldLast 的值为 子字符串的结束的 索引+1的值即35, 即下次执行find时，就从35开始匹配</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * matcher.group(0) 分析</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 源码:</span></span><br><span class="line"><span class="comment">         * public String group(int group) &#123;</span></span><br><span class="line"><span class="comment">         *         if (first &lt; 0)</span></span><br><span class="line"><span class="comment">         *             throw new IllegalStateException(&quot;No match found&quot;);</span></span><br><span class="line"><span class="comment">         *         if (group &lt; 0 || group &gt; groupCount())</span></span><br><span class="line"><span class="comment">         *             throw new IndexOutOfBoundsException(&quot;No group &quot; + group);</span></span><br><span class="line"><span class="comment">         *         if ((groups[group*2] == -1) || (groups[group*2+1] == -1))</span></span><br><span class="line"><span class="comment">         *             return null;</span></span><br><span class="line"><span class="comment">         *         return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         *  1. 根据 groups[0]=31 和 groups[1]=35 的记录的位置，从content开始截取子字符串返回</span></span><br><span class="line"><span class="comment">         *     就是 [31,35) 包含 31 但是不包含索引为 35的位置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  如果再次指向 find方法.仍然安上面分析来执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="comment">//小结</span></span><br><span class="line">            <span class="comment">//1. 如果正则表达式有() 即分组</span></span><br><span class="line">            <span class="comment">//2. 取出匹配的字符串规则如下</span></span><br><span class="line">            <span class="comment">//3. group(0) 表示匹配到的子字符串</span></span><br><span class="line">            <span class="comment">//4. group(1) 表示匹配到的子字符串的第1组字串</span></span><br><span class="line">            <span class="comment">//5. group(2) 表示匹配到的子字符串的第2组字串</span></span><br><span class="line">            <span class="comment">//6. ... 但是分组的数不能越界.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第1组()匹配到的值=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第2组()匹配到的值=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="21-1-基本语法"><a href="#21-1-基本语法" class="headerlink" title="21.1 基本语法"></a>21.1 基本语法</h2><ul>
<li><h4 id="基本介绍：-105"><a href="#基本介绍：-105" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>如果要想灵活的运用正则表达式，必须了解其中各种元字符的功能，元字符从功能上大致分为：</p>
<ol>
<li>限定符</li>
<li>选择匹配符</li>
<li>分组组合和反向引用符</li>
<li>特殊字符</li>
<li>字符匹配符</li>
<li>定位符</li>
</ol>
</li>
<li><h4 id="转义符-x2F-x2F"><a href="#转义符-x2F-x2F" class="headerlink" title="转义符 &#x2F;&#x2F;"></a>转义符 &#x2F;&#x2F;</h4><p>需要用到转义符号的字符有以下：.*+()$&#x2F;\[]^{}</p>
</li>
<li><h4 id="字符匹配符："><a href="#字符匹配符：" class="headerlink" title="字符匹配符："></a>字符匹配符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.02.02.jpg" alt="截屏2022-08-28 15.02.02"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.05.48.jpg" alt="截屏2022-08-28 15.05.48"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3129.jpg" alt="IMG_3129"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3130.jpg" alt="IMG_3130"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3131.jpg" alt="IMG_3131"></p>
</li>
<li><h4 id="选择匹配符："><a href="#选择匹配符：" class="headerlink" title="选择匹配符："></a>选择匹配符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2016.01.59.jpg" alt="截屏2022-08-28 16.01.59"></p>
</li>
<li><h4 id="限定符："><a href="#限定符：" class="headerlink" title="限定符："></a>限定符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2017.32.44.jpg" alt="截屏2022-08-28 17.32.44"></p>
</li>
<li><h4 id="定位符："><a href="#定位符：" class="headerlink" title="定位符："></a>定位符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2017.35.25.jpg" alt="截屏2022-08-28 17.35.25"></p>
</li>
</ul>
<h2 id="21-2-分组、捕获、反向引用"><a href="#21-2-分组、捕获、反向引用" class="headerlink" title="21.2 分组、捕获、反向引用"></a>21.2 分组、捕获、反向引用</h2><ul>
<li><h4 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h4><p>我们可以用圆括号组成个比较复杂的匹配模式，那么一个圆括号的部分我们可以看作是一个子表达式&#x2F;一个分台品</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-29%2014.13.52.jpg" alt="截屏2022-08-29 14.13.52"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-29%2014.14.11.jpg" alt="截屏2022-08-29 14.14.11"></p>
</li>
<li><h4 id="捕获："><a href="#捕获：" class="headerlink" title="捕获："></a>捕获：</h4><p>把正则表达式中子表达式&#x2F;分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组O代表的是整个正则式</p>
</li>
<li><h4 id="反向引用："><a href="#反向引用：" class="headerlink" title="反向引用："></a>反向引用：</h4><p>圆括号的内容被捕获后，可以在这个括号后被使用，从而写出-一个比较实用的匹配模式，这个我们称为反向引用，这种引用既可以是在正则表达式内部，也可以是在正则表达式外部，内部反向引用 11分组号，外部反向引用 ＄分组号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;我....我要....学学学学....编程java!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 去掉所有的.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content = matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//       System.out.println(&quot;content=&quot; + content);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 去掉重复的字  我我要学学学学编程java!</span></span><br><span class="line">        <span class="comment">// 思路</span></span><br><span class="line">        <span class="comment">//(1) 使用 (.)\\1+</span></span><br><span class="line">        <span class="comment">//(2) 使用 反向引用$1 来替换匹配到的内容</span></span><br><span class="line">        <span class="comment">// 注意：因为正则表达式变化，所以需要重置 matcher</span></span><br><span class="line"><span class="comment">//        pattern = Pattern.compile(&quot;(.)\\1+&quot;);//分组的捕获内容记录到$1</span></span><br><span class="line"><span class="comment">//        matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        while (matcher.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;找到=&quot; + matcher.group(0));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //使用 反向引用$1 来替换匹配到的内容</span></span><br><span class="line"><span class="comment">//        content = matcher.replaceAll(&quot;$1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;content=&quot; + content);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用一条语句 去掉重复的字  我我要学学学学编程java!</span></span><br><span class="line">        content = Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="21-3-常用类"><a href="#21-3-常用类" class="headerlink" title="21.3 常用类"></a>21.3 常用类</h2><h3 id="21-3-1-Pattern"><a href="#21-3-1-Pattern" class="headerlink" title="21.3.1 Pattern"></a>21.3.1 Pattern</h3><ul>
<li><h4 id="基本介绍：-106"><a href="#基本介绍：-106" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>pattern 对象是一个正则表达式对象。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，调用其公共静态方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第个参数</p>
</li>
<li><h4 id="例：-22"><a href="#例：-22" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello abc hello, 韩顺平教育&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;hello&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello.*&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配= &quot;</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="21-3-2-Matcher"><a href="#21-3-2-Matcher" class="headerlink" title="21.3.2 Matcher"></a>21.3.2 Matcher</h3><ul>
<li><h4 id="基本介绍：-107"><a href="#基本介绍：-107" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Matcher 对象是对输入字符串进行解释和匹配的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的matcher 方法来获得一个 Matcher 对象</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3144.jpg" alt="IMG_3144"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3145.jpg" alt="IMG_3145"></p>
</li>
<li><h4 id="例：-23"><a href="#例：-23" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatcherMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello edu jack hspedutom hello smith hello hspedu hspedu&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成如果content 有 hspedu 替换成 韩顺平教育</span></span><br><span class="line">        regStr = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newContent</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent=&quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="21-3-3-PatternSyntaxException"><a href="#21-3-3-PatternSyntaxException" class="headerlink" title="21.3.3 PatternSyntaxException"></a>21.3.3 PatternSyntaxException</h3><ul>
<li><h4 id="基本介绍：-108"><a href="#基本介绍：-108" class="headerlink" title="基本介绍："></a>基本介绍：</h4>PatternSyntaxException是一个非强制异常类，他表示一个正则表达式模式中的语法错误</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>javase</tag>
      </tags>
  </entry>
</search>
